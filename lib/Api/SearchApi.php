<?php
/**
 * SearchApi
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InfinityFree\DiscourseApi\ApiException;
use InfinityFree\DiscourseApi\Configuration;
use InfinityFree\DiscourseApi\HeaderSelector;
use InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation search
     *
     * Search for a term
     *
     * @param  string $q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60; (optional)
     * @param  int $page page (optional)
     *
     * @throws \InfinityFree\DiscourseApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20026
     */
    public function search($q = null, $page = null)
    {
        list($response) = $this->searchWithHttpInfo($q, $page);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * Search for a term
     *
     * @param  string $q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60; (optional)
     * @param  int $page (optional)
     *
     * @throws \InfinityFree\DiscourseApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InfinityFree\DiscourseApi\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($q = null, $page = null)
    {
        $request = $this->searchRequest($q, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\InfinityFree\DiscourseApi\Model\InlineResponse20026' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\InfinityFree\DiscourseApi\Model\InlineResponse20026', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\InfinityFree\DiscourseApi\Model\InlineResponse20026';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InfinityFree\DiscourseApi\Model\InlineResponse20026',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * Search for a term
     *
     * @param  string $q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60; (optional)
     * @param  int $page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($q = null, $page = null)
    {
        return $this->searchAsyncWithHttpInfo($q, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * Search for a term
     *
     * @param  string $q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60; (optional)
     * @param  int $page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($q = null, $page = null)
    {
        $returnType = '\InfinityFree\DiscourseApi\Model\InlineResponse20026';
        $request = $this->searchRequest($q, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  string $q The query string needs to be url encoded and is made up of the following options: - Search term. This is just a string. Usually it would be the first item in the query. - &#x60;@&lt;username&gt;&#x60;: Use the &#x60;@&#x60; followed by the username to specify posts by this user. - &#x60;#&lt;category&gt;&#x60;: Use the &#x60;#&#x60; followed by the category slug to search within this category. - &#x60;tags:&#x60;: &#x60;api,solved&#x60; or for posts that have all the specified tags &#x60;api+solved&#x60;. - &#x60;before:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;after:&#x60;: &#x60;yyyy-mm-dd&#x60; - &#x60;order:&#x60;: &#x60;latest&#x60;, &#x60;likes&#x60;, &#x60;views&#x60;, &#x60;latest_topic&#x60; - &#x60;assigned:&#x60;: username (without &#x60;@&#x60;) - &#x60;in:&#x60;: &#x60;title&#x60;, &#x60;likes&#x60;, &#x60;personal&#x60;, &#x60;seen&#x60;, &#x60;unseen&#x60;, &#x60;posted&#x60;, &#x60;created&#x60;, &#x60;watching&#x60;, &#x60;tracking&#x60;, &#x60;bookmarks&#x60;, &#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;first&#x60;, &#x60;pinned&#x60;, &#x60;wiki&#x60; - &#x60;with:&#x60;: &#x60;images&#x60; - &#x60;status:&#x60;: &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;public&#x60;, &#x60;archived&#x60;, &#x60;noreplies&#x60;, &#x60;single_user&#x60;, &#x60;solved&#x60;, &#x60;unsolved&#x60; - &#x60;min_posts:&#x60;: 1 - &#x60;max_posts:&#x60;: 10 - &#x60;min_views:&#x60;: 1 - &#x60;max_views:&#x60;: 10  If you are using cURL you can use the &#x60;-G&#x60; and the &#x60;--data-urlencode&#x60; flags to encode the query:  &#x60;&#x60;&#x60; curl -i -sS -X GET -G \&quot;http://localhost:4200/search.json\&quot; \\ --data-urlencode &#39;q&#x3D;wordpress @scossar #fun after:2020-01-01&#39; &#x60;&#x60;&#x60; (optional)
     * @param  int $page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchRequest($q = null, $page = null)
    {

        $resourcePath = '/search.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            if('form' === 'form' && is_array($q)) {
                foreach($q as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['q'] = $q;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
