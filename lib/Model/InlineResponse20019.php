<?php
/**
 * InlineResponse20019
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20019 Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20019 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_19';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'mixed',
        'username' => 'string',
        'avatarTemplate' => 'string',
        'createdAt' => 'string',
        'raw' => 'string',
        'cooked' => 'string',
        'postNumber' => 'int',
        'postType' => 'int',
        'updatedAt' => 'string',
        'replyCount' => 'int',
        'replyToPostNumber' => 'mixed',
        'quoteCount' => 'int',
        'incomingLinkCount' => 'int',
        'reads' => 'int',
        'readersCount' => 'int',
        'score' => 'int',
        'yours' => 'bool',
        'topicId' => 'int',
        'topicSlug' => 'string',
        'displayUsername' => 'mixed',
        'primaryGroupName' => 'mixed',
        'flairName' => 'mixed',
        'flairUrl' => 'mixed',
        'flairBgColor' => 'mixed',
        'flairColor' => 'mixed',
        'version' => 'int',
        'canEdit' => 'bool',
        'canDelete' => 'bool',
        'canRecover' => 'bool',
        'canWiki' => 'bool',
        'userTitle' => 'mixed',
        'bookmarked' => 'bool',
        'actionsSummary' => 'array',
        'moderator' => 'bool',
        'admin' => 'bool',
        'staff' => 'bool',
        'userId' => 'int',
        'draftSequence' => 'int',
        'hidden' => 'bool',
        'trustLevel' => 'int',
        'deletedAt' => 'mixed',
        'userDeleted' => 'bool',
        'editReason' => 'mixed',
        'canViewEditHistory' => 'bool',
        'wiki' => 'bool',
        'reviewableId' => 'mixed',
        'reviewableScoreCount' => 'int',
        'reviewableScorePendingCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'username' => null,
        'avatarTemplate' => null,
        'createdAt' => null,
        'raw' => null,
        'cooked' => null,
        'postNumber' => null,
        'postType' => null,
        'updatedAt' => null,
        'replyCount' => null,
        'replyToPostNumber' => null,
        'quoteCount' => null,
        'incomingLinkCount' => null,
        'reads' => null,
        'readersCount' => null,
        'score' => null,
        'yours' => null,
        'topicId' => null,
        'topicSlug' => null,
        'displayUsername' => null,
        'primaryGroupName' => null,
        'flairName' => null,
        'flairUrl' => null,
        'flairBgColor' => null,
        'flairColor' => null,
        'version' => null,
        'canEdit' => null,
        'canDelete' => null,
        'canRecover' => null,
        'canWiki' => null,
        'userTitle' => null,
        'bookmarked' => null,
        'actionsSummary' => null,
        'moderator' => null,
        'admin' => null,
        'staff' => null,
        'userId' => null,
        'draftSequence' => null,
        'hidden' => null,
        'trustLevel' => null,
        'deletedAt' => null,
        'userDeleted' => null,
        'editReason' => null,
        'canViewEditHistory' => null,
        'wiki' => null,
        'reviewableId' => null,
        'reviewableScoreCount' => null,
        'reviewableScorePendingCount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'username' => 'username',
        'avatarTemplate' => 'avatar_template',
        'createdAt' => 'created_at',
        'raw' => 'raw',
        'cooked' => 'cooked',
        'postNumber' => 'post_number',
        'postType' => 'post_type',
        'updatedAt' => 'updated_at',
        'replyCount' => 'reply_count',
        'replyToPostNumber' => 'reply_to_post_number',
        'quoteCount' => 'quote_count',
        'incomingLinkCount' => 'incoming_link_count',
        'reads' => 'reads',
        'readersCount' => 'readers_count',
        'score' => 'score',
        'yours' => 'yours',
        'topicId' => 'topic_id',
        'topicSlug' => 'topic_slug',
        'displayUsername' => 'display_username',
        'primaryGroupName' => 'primary_group_name',
        'flairName' => 'flair_name',
        'flairUrl' => 'flair_url',
        'flairBgColor' => 'flair_bg_color',
        'flairColor' => 'flair_color',
        'version' => 'version',
        'canEdit' => 'can_edit',
        'canDelete' => 'can_delete',
        'canRecover' => 'can_recover',
        'canWiki' => 'can_wiki',
        'userTitle' => 'user_title',
        'bookmarked' => 'bookmarked',
        'actionsSummary' => 'actions_summary',
        'moderator' => 'moderator',
        'admin' => 'admin',
        'staff' => 'staff',
        'userId' => 'user_id',
        'draftSequence' => 'draft_sequence',
        'hidden' => 'hidden',
        'trustLevel' => 'trust_level',
        'deletedAt' => 'deleted_at',
        'userDeleted' => 'user_deleted',
        'editReason' => 'edit_reason',
        'canViewEditHistory' => 'can_view_edit_history',
        'wiki' => 'wiki',
        'reviewableId' => 'reviewable_id',
        'reviewableScoreCount' => 'reviewable_score_count',
        'reviewableScorePendingCount' => 'reviewable_score_pending_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'username' => 'setUsername',
        'avatarTemplate' => 'setAvatarTemplate',
        'createdAt' => 'setCreatedAt',
        'raw' => 'setRaw',
        'cooked' => 'setCooked',
        'postNumber' => 'setPostNumber',
        'postType' => 'setPostType',
        'updatedAt' => 'setUpdatedAt',
        'replyCount' => 'setReplyCount',
        'replyToPostNumber' => 'setReplyToPostNumber',
        'quoteCount' => 'setQuoteCount',
        'incomingLinkCount' => 'setIncomingLinkCount',
        'reads' => 'setReads',
        'readersCount' => 'setReadersCount',
        'score' => 'setScore',
        'yours' => 'setYours',
        'topicId' => 'setTopicId',
        'topicSlug' => 'setTopicSlug',
        'displayUsername' => 'setDisplayUsername',
        'primaryGroupName' => 'setPrimaryGroupName',
        'flairName' => 'setFlairName',
        'flairUrl' => 'setFlairUrl',
        'flairBgColor' => 'setFlairBgColor',
        'flairColor' => 'setFlairColor',
        'version' => 'setVersion',
        'canEdit' => 'setCanEdit',
        'canDelete' => 'setCanDelete',
        'canRecover' => 'setCanRecover',
        'canWiki' => 'setCanWiki',
        'userTitle' => 'setUserTitle',
        'bookmarked' => 'setBookmarked',
        'actionsSummary' => 'setActionsSummary',
        'moderator' => 'setModerator',
        'admin' => 'setAdmin',
        'staff' => 'setStaff',
        'userId' => 'setUserId',
        'draftSequence' => 'setDraftSequence',
        'hidden' => 'setHidden',
        'trustLevel' => 'setTrustLevel',
        'deletedAt' => 'setDeletedAt',
        'userDeleted' => 'setUserDeleted',
        'editReason' => 'setEditReason',
        'canViewEditHistory' => 'setCanViewEditHistory',
        'wiki' => 'setWiki',
        'reviewableId' => 'setReviewableId',
        'reviewableScoreCount' => 'setReviewableScoreCount',
        'reviewableScorePendingCount' => 'setReviewableScorePendingCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'username' => 'getUsername',
        'avatarTemplate' => 'getAvatarTemplate',
        'createdAt' => 'getCreatedAt',
        'raw' => 'getRaw',
        'cooked' => 'getCooked',
        'postNumber' => 'getPostNumber',
        'postType' => 'getPostType',
        'updatedAt' => 'getUpdatedAt',
        'replyCount' => 'getReplyCount',
        'replyToPostNumber' => 'getReplyToPostNumber',
        'quoteCount' => 'getQuoteCount',
        'incomingLinkCount' => 'getIncomingLinkCount',
        'reads' => 'getReads',
        'readersCount' => 'getReadersCount',
        'score' => 'getScore',
        'yours' => 'getYours',
        'topicId' => 'getTopicId',
        'topicSlug' => 'getTopicSlug',
        'displayUsername' => 'getDisplayUsername',
        'primaryGroupName' => 'getPrimaryGroupName',
        'flairName' => 'getFlairName',
        'flairUrl' => 'getFlairUrl',
        'flairBgColor' => 'getFlairBgColor',
        'flairColor' => 'getFlairColor',
        'version' => 'getVersion',
        'canEdit' => 'getCanEdit',
        'canDelete' => 'getCanDelete',
        'canRecover' => 'getCanRecover',
        'canWiki' => 'getCanWiki',
        'userTitle' => 'getUserTitle',
        'bookmarked' => 'getBookmarked',
        'actionsSummary' => 'getActionsSummary',
        'moderator' => 'getModerator',
        'admin' => 'getAdmin',
        'staff' => 'getStaff',
        'userId' => 'getUserId',
        'draftSequence' => 'getDraftSequence',
        'hidden' => 'getHidden',
        'trustLevel' => 'getTrustLevel',
        'deletedAt' => 'getDeletedAt',
        'userDeleted' => 'getUserDeleted',
        'editReason' => 'getEditReason',
        'canViewEditHistory' => 'getCanViewEditHistory',
        'wiki' => 'getWiki',
        'reviewableId' => 'getReviewableId',
        'reviewableScoreCount' => 'getReviewableScoreCount',
        'reviewableScorePendingCount' => 'getReviewableScorePendingCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['avatarTemplate'] = $data['avatarTemplate'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['raw'] = $data['raw'] ?? null;
        $this->container['cooked'] = $data['cooked'] ?? null;
        $this->container['postNumber'] = $data['postNumber'] ?? null;
        $this->container['postType'] = $data['postType'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['replyCount'] = $data['replyCount'] ?? null;
        $this->container['replyToPostNumber'] = $data['replyToPostNumber'] ?? null;
        $this->container['quoteCount'] = $data['quoteCount'] ?? null;
        $this->container['incomingLinkCount'] = $data['incomingLinkCount'] ?? null;
        $this->container['reads'] = $data['reads'] ?? null;
        $this->container['readersCount'] = $data['readersCount'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['yours'] = $data['yours'] ?? null;
        $this->container['topicId'] = $data['topicId'] ?? null;
        $this->container['topicSlug'] = $data['topicSlug'] ?? null;
        $this->container['displayUsername'] = $data['displayUsername'] ?? null;
        $this->container['primaryGroupName'] = $data['primaryGroupName'] ?? null;
        $this->container['flairName'] = $data['flairName'] ?? null;
        $this->container['flairUrl'] = $data['flairUrl'] ?? null;
        $this->container['flairBgColor'] = $data['flairBgColor'] ?? null;
        $this->container['flairColor'] = $data['flairColor'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['canEdit'] = $data['canEdit'] ?? null;
        $this->container['canDelete'] = $data['canDelete'] ?? null;
        $this->container['canRecover'] = $data['canRecover'] ?? null;
        $this->container['canWiki'] = $data['canWiki'] ?? null;
        $this->container['userTitle'] = $data['userTitle'] ?? null;
        $this->container['bookmarked'] = $data['bookmarked'] ?? null;
        $this->container['actionsSummary'] = $data['actionsSummary'] ?? null;
        $this->container['moderator'] = $data['moderator'] ?? null;
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['staff'] = $data['staff'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['draftSequence'] = $data['draftSequence'] ?? null;
        $this->container['hidden'] = $data['hidden'] ?? null;
        $this->container['trustLevel'] = $data['trustLevel'] ?? null;
        $this->container['deletedAt'] = $data['deletedAt'] ?? null;
        $this->container['userDeleted'] = $data['userDeleted'] ?? null;
        $this->container['editReason'] = $data['editReason'] ?? null;
        $this->container['canViewEditHistory'] = $data['canViewEditHistory'] ?? null;
        $this->container['wiki'] = $data['wiki'] ?? null;
        $this->container['reviewableId'] = $data['reviewableId'] ?? null;
        $this->container['reviewableScoreCount'] = $data['reviewableScoreCount'] ?? null;
        $this->container['reviewableScorePendingCount'] = $data['reviewableScorePendingCount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['avatarTemplate'] === null) {
            $invalidProperties[] = "'avatarTemplate' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['cooked'] === null) {
            $invalidProperties[] = "'cooked' can't be null";
        }
        if ($this->container['postNumber'] === null) {
            $invalidProperties[] = "'postNumber' can't be null";
        }
        if ($this->container['postType'] === null) {
            $invalidProperties[] = "'postType' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['replyCount'] === null) {
            $invalidProperties[] = "'replyCount' can't be null";
        }
        if ($this->container['replyToPostNumber'] === null) {
            $invalidProperties[] = "'replyToPostNumber' can't be null";
        }
        if ($this->container['quoteCount'] === null) {
            $invalidProperties[] = "'quoteCount' can't be null";
        }
        if ($this->container['incomingLinkCount'] === null) {
            $invalidProperties[] = "'incomingLinkCount' can't be null";
        }
        if ($this->container['reads'] === null) {
            $invalidProperties[] = "'reads' can't be null";
        }
        if ($this->container['readersCount'] === null) {
            $invalidProperties[] = "'readersCount' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalidProperties[] = "'score' can't be null";
        }
        if ($this->container['yours'] === null) {
            $invalidProperties[] = "'yours' can't be null";
        }
        if ($this->container['topicId'] === null) {
            $invalidProperties[] = "'topicId' can't be null";
        }
        if ($this->container['topicSlug'] === null) {
            $invalidProperties[] = "'topicSlug' can't be null";
        }
        if ($this->container['displayUsername'] === null) {
            $invalidProperties[] = "'displayUsername' can't be null";
        }
        if ($this->container['primaryGroupName'] === null) {
            $invalidProperties[] = "'primaryGroupName' can't be null";
        }
        if ($this->container['flairName'] === null) {
            $invalidProperties[] = "'flairName' can't be null";
        }
        if ($this->container['flairUrl'] === null) {
            $invalidProperties[] = "'flairUrl' can't be null";
        }
        if ($this->container['flairBgColor'] === null) {
            $invalidProperties[] = "'flairBgColor' can't be null";
        }
        if ($this->container['flairColor'] === null) {
            $invalidProperties[] = "'flairColor' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['canEdit'] === null) {
            $invalidProperties[] = "'canEdit' can't be null";
        }
        if ($this->container['canDelete'] === null) {
            $invalidProperties[] = "'canDelete' can't be null";
        }
        if ($this->container['canRecover'] === null) {
            $invalidProperties[] = "'canRecover' can't be null";
        }
        if ($this->container['canWiki'] === null) {
            $invalidProperties[] = "'canWiki' can't be null";
        }
        if ($this->container['userTitle'] === null) {
            $invalidProperties[] = "'userTitle' can't be null";
        }
        if ($this->container['bookmarked'] === null) {
            $invalidProperties[] = "'bookmarked' can't be null";
        }
        if ($this->container['actionsSummary'] === null) {
            $invalidProperties[] = "'actionsSummary' can't be null";
        }
        if ($this->container['moderator'] === null) {
            $invalidProperties[] = "'moderator' can't be null";
        }
        if ($this->container['admin'] === null) {
            $invalidProperties[] = "'admin' can't be null";
        }
        if ($this->container['staff'] === null) {
            $invalidProperties[] = "'staff' can't be null";
        }
        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ($this->container['draftSequence'] === null) {
            $invalidProperties[] = "'draftSequence' can't be null";
        }
        if ($this->container['hidden'] === null) {
            $invalidProperties[] = "'hidden' can't be null";
        }
        if ($this->container['trustLevel'] === null) {
            $invalidProperties[] = "'trustLevel' can't be null";
        }
        if ($this->container['deletedAt'] === null) {
            $invalidProperties[] = "'deletedAt' can't be null";
        }
        if ($this->container['userDeleted'] === null) {
            $invalidProperties[] = "'userDeleted' can't be null";
        }
        if ($this->container['editReason'] === null) {
            $invalidProperties[] = "'editReason' can't be null";
        }
        if ($this->container['canViewEditHistory'] === null) {
            $invalidProperties[] = "'canViewEditHistory' can't be null";
        }
        if ($this->container['wiki'] === null) {
            $invalidProperties[] = "'wiki' can't be null";
        }
        if ($this->container['reviewableId'] === null) {
            $invalidProperties[] = "'reviewableId' can't be null";
        }
        if ($this->container['reviewableScoreCount'] === null) {
            $invalidProperties[] = "'reviewableScoreCount' can't be null";
        }
        if ($this->container['reviewableScorePendingCount'] === null) {
            $invalidProperties[] = "'reviewableScorePendingCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets avatarTemplate
     *
     * @return string
     */
    public function getAvatarTemplate()
    {
        return $this->container['avatarTemplate'];
    }

    /**
     * Sets avatarTemplate
     *
     * @param string $avatarTemplate avatarTemplate
     *
     * @return self
     */
    public function setAvatarTemplate($avatarTemplate)
    {
        $this->container['avatarTemplate'] = $avatarTemplate;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets raw
     *
     * @return string|null
     */
    public function getRaw()
    {
        return $this->container['raw'];
    }

    /**
     * Sets raw
     *
     * @param string|null $raw raw
     *
     * @return self
     */
    public function setRaw($raw)
    {
        $this->container['raw'] = $raw;

        return $this;
    }

    /**
     * Gets cooked
     *
     * @return string
     */
    public function getCooked()
    {
        return $this->container['cooked'];
    }

    /**
     * Sets cooked
     *
     * @param string $cooked cooked
     *
     * @return self
     */
    public function setCooked($cooked)
    {
        $this->container['cooked'] = $cooked;

        return $this;
    }

    /**
     * Gets postNumber
     *
     * @return int
     */
    public function getPostNumber()
    {
        return $this->container['postNumber'];
    }

    /**
     * Sets postNumber
     *
     * @param int $postNumber postNumber
     *
     * @return self
     */
    public function setPostNumber($postNumber)
    {
        $this->container['postNumber'] = $postNumber;

        return $this;
    }

    /**
     * Gets postType
     *
     * @return int
     */
    public function getPostType()
    {
        return $this->container['postType'];
    }

    /**
     * Sets postType
     *
     * @param int $postType postType
     *
     * @return self
     */
    public function setPostType($postType)
    {
        $this->container['postType'] = $postType;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets replyCount
     *
     * @return int
     */
    public function getReplyCount()
    {
        return $this->container['replyCount'];
    }

    /**
     * Sets replyCount
     *
     * @param int $replyCount replyCount
     *
     * @return self
     */
    public function setReplyCount($replyCount)
    {
        $this->container['replyCount'] = $replyCount;

        return $this;
    }

    /**
     * Gets replyToPostNumber
     *
     * @return mixed
     */
    public function getReplyToPostNumber()
    {
        return $this->container['replyToPostNumber'];
    }

    /**
     * Sets replyToPostNumber
     *
     * @param mixed $replyToPostNumber replyToPostNumber
     *
     * @return self
     */
    public function setReplyToPostNumber($replyToPostNumber)
    {
        $this->container['replyToPostNumber'] = $replyToPostNumber;

        return $this;
    }

    /**
     * Gets quoteCount
     *
     * @return int
     */
    public function getQuoteCount()
    {
        return $this->container['quoteCount'];
    }

    /**
     * Sets quoteCount
     *
     * @param int $quoteCount quoteCount
     *
     * @return self
     */
    public function setQuoteCount($quoteCount)
    {
        $this->container['quoteCount'] = $quoteCount;

        return $this;
    }

    /**
     * Gets incomingLinkCount
     *
     * @return int
     */
    public function getIncomingLinkCount()
    {
        return $this->container['incomingLinkCount'];
    }

    /**
     * Sets incomingLinkCount
     *
     * @param int $incomingLinkCount incomingLinkCount
     *
     * @return self
     */
    public function setIncomingLinkCount($incomingLinkCount)
    {
        $this->container['incomingLinkCount'] = $incomingLinkCount;

        return $this;
    }

    /**
     * Gets reads
     *
     * @return int
     */
    public function getReads()
    {
        return $this->container['reads'];
    }

    /**
     * Sets reads
     *
     * @param int $reads reads
     *
     * @return self
     */
    public function setReads($reads)
    {
        $this->container['reads'] = $reads;

        return $this;
    }

    /**
     * Gets readersCount
     *
     * @return int
     */
    public function getReadersCount()
    {
        return $this->container['readersCount'];
    }

    /**
     * Sets readersCount
     *
     * @param int $readersCount readersCount
     *
     * @return self
     */
    public function setReadersCount($readersCount)
    {
        $this->container['readersCount'] = $readersCount;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score score
     *
     * @return self
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets yours
     *
     * @return bool
     */
    public function getYours()
    {
        return $this->container['yours'];
    }

    /**
     * Sets yours
     *
     * @param bool $yours yours
     *
     * @return self
     */
    public function setYours($yours)
    {
        $this->container['yours'] = $yours;

        return $this;
    }

    /**
     * Gets topicId
     *
     * @return int
     */
    public function getTopicId()
    {
        return $this->container['topicId'];
    }

    /**
     * Sets topicId
     *
     * @param int $topicId topicId
     *
     * @return self
     */
    public function setTopicId($topicId)
    {
        $this->container['topicId'] = $topicId;

        return $this;
    }

    /**
     * Gets topicSlug
     *
     * @return string
     */
    public function getTopicSlug()
    {
        return $this->container['topicSlug'];
    }

    /**
     * Sets topicSlug
     *
     * @param string $topicSlug topicSlug
     *
     * @return self
     */
    public function setTopicSlug($topicSlug)
    {
        $this->container['topicSlug'] = $topicSlug;

        return $this;
    }

    /**
     * Gets displayUsername
     *
     * @return mixed
     */
    public function getDisplayUsername()
    {
        return $this->container['displayUsername'];
    }

    /**
     * Sets displayUsername
     *
     * @param mixed $displayUsername displayUsername
     *
     * @return self
     */
    public function setDisplayUsername($displayUsername)
    {
        $this->container['displayUsername'] = $displayUsername;

        return $this;
    }

    /**
     * Gets primaryGroupName
     *
     * @return mixed
     */
    public function getPrimaryGroupName()
    {
        return $this->container['primaryGroupName'];
    }

    /**
     * Sets primaryGroupName
     *
     * @param mixed $primaryGroupName primaryGroupName
     *
     * @return self
     */
    public function setPrimaryGroupName($primaryGroupName)
    {
        $this->container['primaryGroupName'] = $primaryGroupName;

        return $this;
    }

    /**
     * Gets flairName
     *
     * @return mixed
     */
    public function getFlairName()
    {
        return $this->container['flairName'];
    }

    /**
     * Sets flairName
     *
     * @param mixed $flairName flairName
     *
     * @return self
     */
    public function setFlairName($flairName)
    {
        $this->container['flairName'] = $flairName;

        return $this;
    }

    /**
     * Gets flairUrl
     *
     * @return mixed
     */
    public function getFlairUrl()
    {
        return $this->container['flairUrl'];
    }

    /**
     * Sets flairUrl
     *
     * @param mixed $flairUrl flairUrl
     *
     * @return self
     */
    public function setFlairUrl($flairUrl)
    {
        $this->container['flairUrl'] = $flairUrl;

        return $this;
    }

    /**
     * Gets flairBgColor
     *
     * @return mixed
     */
    public function getFlairBgColor()
    {
        return $this->container['flairBgColor'];
    }

    /**
     * Sets flairBgColor
     *
     * @param mixed $flairBgColor flairBgColor
     *
     * @return self
     */
    public function setFlairBgColor($flairBgColor)
    {
        $this->container['flairBgColor'] = $flairBgColor;

        return $this;
    }

    /**
     * Gets flairColor
     *
     * @return mixed
     */
    public function getFlairColor()
    {
        return $this->container['flairColor'];
    }

    /**
     * Sets flairColor
     *
     * @param mixed $flairColor flairColor
     *
     * @return self
     */
    public function setFlairColor($flairColor)
    {
        $this->container['flairColor'] = $flairColor;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets canEdit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['canEdit'];
    }

    /**
     * Sets canEdit
     *
     * @param bool $canEdit canEdit
     *
     * @return self
     */
    public function setCanEdit($canEdit)
    {
        $this->container['canEdit'] = $canEdit;

        return $this;
    }

    /**
     * Gets canDelete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['canDelete'];
    }

    /**
     * Sets canDelete
     *
     * @param bool $canDelete canDelete
     *
     * @return self
     */
    public function setCanDelete($canDelete)
    {
        $this->container['canDelete'] = $canDelete;

        return $this;
    }

    /**
     * Gets canRecover
     *
     * @return bool
     */
    public function getCanRecover()
    {
        return $this->container['canRecover'];
    }

    /**
     * Sets canRecover
     *
     * @param bool $canRecover canRecover
     *
     * @return self
     */
    public function setCanRecover($canRecover)
    {
        $this->container['canRecover'] = $canRecover;

        return $this;
    }

    /**
     * Gets canWiki
     *
     * @return bool
     */
    public function getCanWiki()
    {
        return $this->container['canWiki'];
    }

    /**
     * Sets canWiki
     *
     * @param bool $canWiki canWiki
     *
     * @return self
     */
    public function setCanWiki($canWiki)
    {
        $this->container['canWiki'] = $canWiki;

        return $this;
    }

    /**
     * Gets userTitle
     *
     * @return mixed
     */
    public function getUserTitle()
    {
        return $this->container['userTitle'];
    }

    /**
     * Sets userTitle
     *
     * @param mixed $userTitle userTitle
     *
     * @return self
     */
    public function setUserTitle($userTitle)
    {
        $this->container['userTitle'] = $userTitle;

        return $this;
    }

    /**
     * Gets bookmarked
     *
     * @return bool
     */
    public function getBookmarked()
    {
        return $this->container['bookmarked'];
    }

    /**
     * Sets bookmarked
     *
     * @param bool $bookmarked bookmarked
     *
     * @return self
     */
    public function setBookmarked($bookmarked)
    {
        $this->container['bookmarked'] = $bookmarked;

        return $this;
    }

    /**
     * Gets actionsSummary
     *
     * @return array
     */
    public function getActionsSummary()
    {
        return $this->container['actionsSummary'];
    }

    /**
     * Sets actionsSummary
     *
     * @param array $actionsSummary actionsSummary
     *
     * @return self
     */
    public function setActionsSummary($actionsSummary)
    {
        $this->container['actionsSummary'] = $actionsSummary;

        return $this;
    }

    /**
     * Gets moderator
     *
     * @return bool
     */
    public function getModerator()
    {
        return $this->container['moderator'];
    }

    /**
     * Sets moderator
     *
     * @param bool $moderator moderator
     *
     * @return self
     */
    public function setModerator($moderator)
    {
        $this->container['moderator'] = $moderator;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool $admin admin
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return bool
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param bool $staff staff
     *
     * @return self
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets draftSequence
     *
     * @return int
     */
    public function getDraftSequence()
    {
        return $this->container['draftSequence'];
    }

    /**
     * Sets draftSequence
     *
     * @param int $draftSequence draftSequence
     *
     * @return self
     */
    public function setDraftSequence($draftSequence)
    {
        $this->container['draftSequence'] = $draftSequence;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets trustLevel
     *
     * @return int
     */
    public function getTrustLevel()
    {
        return $this->container['trustLevel'];
    }

    /**
     * Sets trustLevel
     *
     * @param int $trustLevel trustLevel
     *
     * @return self
     */
    public function setTrustLevel($trustLevel)
    {
        $this->container['trustLevel'] = $trustLevel;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return mixed
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param mixed $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets userDeleted
     *
     * @return bool
     */
    public function getUserDeleted()
    {
        return $this->container['userDeleted'];
    }

    /**
     * Sets userDeleted
     *
     * @param bool $userDeleted userDeleted
     *
     * @return self
     */
    public function setUserDeleted($userDeleted)
    {
        $this->container['userDeleted'] = $userDeleted;

        return $this;
    }

    /**
     * Gets editReason
     *
     * @return mixed
     */
    public function getEditReason()
    {
        return $this->container['editReason'];
    }

    /**
     * Sets editReason
     *
     * @param mixed $editReason editReason
     *
     * @return self
     */
    public function setEditReason($editReason)
    {
        $this->container['editReason'] = $editReason;

        return $this;
    }

    /**
     * Gets canViewEditHistory
     *
     * @return bool
     */
    public function getCanViewEditHistory()
    {
        return $this->container['canViewEditHistory'];
    }

    /**
     * Sets canViewEditHistory
     *
     * @param bool $canViewEditHistory canViewEditHistory
     *
     * @return self
     */
    public function setCanViewEditHistory($canViewEditHistory)
    {
        $this->container['canViewEditHistory'] = $canViewEditHistory;

        return $this;
    }

    /**
     * Gets wiki
     *
     * @return bool
     */
    public function getWiki()
    {
        return $this->container['wiki'];
    }

    /**
     * Sets wiki
     *
     * @param bool $wiki wiki
     *
     * @return self
     */
    public function setWiki($wiki)
    {
        $this->container['wiki'] = $wiki;

        return $this;
    }

    /**
     * Gets reviewableId
     *
     * @return mixed
     */
    public function getReviewableId()
    {
        return $this->container['reviewableId'];
    }

    /**
     * Sets reviewableId
     *
     * @param mixed $reviewableId reviewableId
     *
     * @return self
     */
    public function setReviewableId($reviewableId)
    {
        $this->container['reviewableId'] = $reviewableId;

        return $this;
    }

    /**
     * Gets reviewableScoreCount
     *
     * @return int
     */
    public function getReviewableScoreCount()
    {
        return $this->container['reviewableScoreCount'];
    }

    /**
     * Sets reviewableScoreCount
     *
     * @param int $reviewableScoreCount reviewableScoreCount
     *
     * @return self
     */
    public function setReviewableScoreCount($reviewableScoreCount)
    {
        $this->container['reviewableScoreCount'] = $reviewableScoreCount;

        return $this;
    }

    /**
     * Gets reviewableScorePendingCount
     *
     * @return int
     */
    public function getReviewableScorePendingCount()
    {
        return $this->container['reviewableScorePendingCount'];
    }

    /**
     * Sets reviewableScorePendingCount
     *
     * @param int $reviewableScorePendingCount reviewableScorePendingCount
     *
     * @return self
     */
    public function setReviewableScorePendingCount($reviewableScorePendingCount)
    {
        $this->container['reviewableScorePendingCount'] = $reviewableScorePendingCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


