<?php
/**
 * InlineResponse20027NotificationTypes
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20027NotificationTypes Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20027NotificationTypes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_27_notification_types';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mentioned' => 'int',
        'replied' => 'int',
        'quoted' => 'int',
        'edited' => 'int',
        'liked' => 'int',
        'privateMessage' => 'int',
        'invitedToPrivateMessage' => 'int',
        'inviteeAccepted' => 'int',
        'posted' => 'int',
        'movedPost' => 'int',
        'linked' => 'int',
        'grantedBadge' => 'int',
        'invitedToTopic' => 'int',
        'custom' => 'int',
        'groupMentioned' => 'int',
        'groupMessageSummary' => 'int',
        'watchingFirstPost' => 'int',
        'topicReminder' => 'int',
        'likedConsolidated' => 'int',
        'postApproved' => 'int',
        'codeReviewCommitApproved' => 'int',
        'membershipRequestAccepted' => 'int',
        'membershipRequestConsolidated' => 'int',
        'bookmarkReminder' => 'int',
        'reaction' => 'int',
        'votesReleased' => 'int',
        'eventReminder' => 'int',
        'eventInvitation' => 'int',
        'chatMention' => 'int',
        'chatMessage' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mentioned' => null,
        'replied' => null,
        'quoted' => null,
        'edited' => null,
        'liked' => null,
        'privateMessage' => null,
        'invitedToPrivateMessage' => null,
        'inviteeAccepted' => null,
        'posted' => null,
        'movedPost' => null,
        'linked' => null,
        'grantedBadge' => null,
        'invitedToTopic' => null,
        'custom' => null,
        'groupMentioned' => null,
        'groupMessageSummary' => null,
        'watchingFirstPost' => null,
        'topicReminder' => null,
        'likedConsolidated' => null,
        'postApproved' => null,
        'codeReviewCommitApproved' => null,
        'membershipRequestAccepted' => null,
        'membershipRequestConsolidated' => null,
        'bookmarkReminder' => null,
        'reaction' => null,
        'votesReleased' => null,
        'eventReminder' => null,
        'eventInvitation' => null,
        'chatMention' => null,
        'chatMessage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mentioned' => 'mentioned',
        'replied' => 'replied',
        'quoted' => 'quoted',
        'edited' => 'edited',
        'liked' => 'liked',
        'privateMessage' => 'private_message',
        'invitedToPrivateMessage' => 'invited_to_private_message',
        'inviteeAccepted' => 'invitee_accepted',
        'posted' => 'posted',
        'movedPost' => 'moved_post',
        'linked' => 'linked',
        'grantedBadge' => 'granted_badge',
        'invitedToTopic' => 'invited_to_topic',
        'custom' => 'custom',
        'groupMentioned' => 'group_mentioned',
        'groupMessageSummary' => 'group_message_summary',
        'watchingFirstPost' => 'watching_first_post',
        'topicReminder' => 'topic_reminder',
        'likedConsolidated' => 'liked_consolidated',
        'postApproved' => 'post_approved',
        'codeReviewCommitApproved' => 'code_review_commit_approved',
        'membershipRequestAccepted' => 'membership_request_accepted',
        'membershipRequestConsolidated' => 'membership_request_consolidated',
        'bookmarkReminder' => 'bookmark_reminder',
        'reaction' => 'reaction',
        'votesReleased' => 'votes_released',
        'eventReminder' => 'event_reminder',
        'eventInvitation' => 'event_invitation',
        'chatMention' => 'chat_mention',
        'chatMessage' => 'chat_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mentioned' => 'setMentioned',
        'replied' => 'setReplied',
        'quoted' => 'setQuoted',
        'edited' => 'setEdited',
        'liked' => 'setLiked',
        'privateMessage' => 'setPrivateMessage',
        'invitedToPrivateMessage' => 'setInvitedToPrivateMessage',
        'inviteeAccepted' => 'setInviteeAccepted',
        'posted' => 'setPosted',
        'movedPost' => 'setMovedPost',
        'linked' => 'setLinked',
        'grantedBadge' => 'setGrantedBadge',
        'invitedToTopic' => 'setInvitedToTopic',
        'custom' => 'setCustom',
        'groupMentioned' => 'setGroupMentioned',
        'groupMessageSummary' => 'setGroupMessageSummary',
        'watchingFirstPost' => 'setWatchingFirstPost',
        'topicReminder' => 'setTopicReminder',
        'likedConsolidated' => 'setLikedConsolidated',
        'postApproved' => 'setPostApproved',
        'codeReviewCommitApproved' => 'setCodeReviewCommitApproved',
        'membershipRequestAccepted' => 'setMembershipRequestAccepted',
        'membershipRequestConsolidated' => 'setMembershipRequestConsolidated',
        'bookmarkReminder' => 'setBookmarkReminder',
        'reaction' => 'setReaction',
        'votesReleased' => 'setVotesReleased',
        'eventReminder' => 'setEventReminder',
        'eventInvitation' => 'setEventInvitation',
        'chatMention' => 'setChatMention',
        'chatMessage' => 'setChatMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mentioned' => 'getMentioned',
        'replied' => 'getReplied',
        'quoted' => 'getQuoted',
        'edited' => 'getEdited',
        'liked' => 'getLiked',
        'privateMessage' => 'getPrivateMessage',
        'invitedToPrivateMessage' => 'getInvitedToPrivateMessage',
        'inviteeAccepted' => 'getInviteeAccepted',
        'posted' => 'getPosted',
        'movedPost' => 'getMovedPost',
        'linked' => 'getLinked',
        'grantedBadge' => 'getGrantedBadge',
        'invitedToTopic' => 'getInvitedToTopic',
        'custom' => 'getCustom',
        'groupMentioned' => 'getGroupMentioned',
        'groupMessageSummary' => 'getGroupMessageSummary',
        'watchingFirstPost' => 'getWatchingFirstPost',
        'topicReminder' => 'getTopicReminder',
        'likedConsolidated' => 'getLikedConsolidated',
        'postApproved' => 'getPostApproved',
        'codeReviewCommitApproved' => 'getCodeReviewCommitApproved',
        'membershipRequestAccepted' => 'getMembershipRequestAccepted',
        'membershipRequestConsolidated' => 'getMembershipRequestConsolidated',
        'bookmarkReminder' => 'getBookmarkReminder',
        'reaction' => 'getReaction',
        'votesReleased' => 'getVotesReleased',
        'eventReminder' => 'getEventReminder',
        'eventInvitation' => 'getEventInvitation',
        'chatMention' => 'getChatMention',
        'chatMessage' => 'getChatMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mentioned'] = $data['mentioned'] ?? null;
        $this->container['replied'] = $data['replied'] ?? null;
        $this->container['quoted'] = $data['quoted'] ?? null;
        $this->container['edited'] = $data['edited'] ?? null;
        $this->container['liked'] = $data['liked'] ?? null;
        $this->container['privateMessage'] = $data['privateMessage'] ?? null;
        $this->container['invitedToPrivateMessage'] = $data['invitedToPrivateMessage'] ?? null;
        $this->container['inviteeAccepted'] = $data['inviteeAccepted'] ?? null;
        $this->container['posted'] = $data['posted'] ?? null;
        $this->container['movedPost'] = $data['movedPost'] ?? null;
        $this->container['linked'] = $data['linked'] ?? null;
        $this->container['grantedBadge'] = $data['grantedBadge'] ?? null;
        $this->container['invitedToTopic'] = $data['invitedToTopic'] ?? null;
        $this->container['custom'] = $data['custom'] ?? null;
        $this->container['groupMentioned'] = $data['groupMentioned'] ?? null;
        $this->container['groupMessageSummary'] = $data['groupMessageSummary'] ?? null;
        $this->container['watchingFirstPost'] = $data['watchingFirstPost'] ?? null;
        $this->container['topicReminder'] = $data['topicReminder'] ?? null;
        $this->container['likedConsolidated'] = $data['likedConsolidated'] ?? null;
        $this->container['postApproved'] = $data['postApproved'] ?? null;
        $this->container['codeReviewCommitApproved'] = $data['codeReviewCommitApproved'] ?? null;
        $this->container['membershipRequestAccepted'] = $data['membershipRequestAccepted'] ?? null;
        $this->container['membershipRequestConsolidated'] = $data['membershipRequestConsolidated'] ?? null;
        $this->container['bookmarkReminder'] = $data['bookmarkReminder'] ?? null;
        $this->container['reaction'] = $data['reaction'] ?? null;
        $this->container['votesReleased'] = $data['votesReleased'] ?? null;
        $this->container['eventReminder'] = $data['eventReminder'] ?? null;
        $this->container['eventInvitation'] = $data['eventInvitation'] ?? null;
        $this->container['chatMention'] = $data['chatMention'] ?? null;
        $this->container['chatMessage'] = $data['chatMessage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mentioned'] === null) {
            $invalidProperties[] = "'mentioned' can't be null";
        }
        if ($this->container['replied'] === null) {
            $invalidProperties[] = "'replied' can't be null";
        }
        if ($this->container['quoted'] === null) {
            $invalidProperties[] = "'quoted' can't be null";
        }
        if ($this->container['edited'] === null) {
            $invalidProperties[] = "'edited' can't be null";
        }
        if ($this->container['liked'] === null) {
            $invalidProperties[] = "'liked' can't be null";
        }
        if ($this->container['privateMessage'] === null) {
            $invalidProperties[] = "'privateMessage' can't be null";
        }
        if ($this->container['invitedToPrivateMessage'] === null) {
            $invalidProperties[] = "'invitedToPrivateMessage' can't be null";
        }
        if ($this->container['inviteeAccepted'] === null) {
            $invalidProperties[] = "'inviteeAccepted' can't be null";
        }
        if ($this->container['posted'] === null) {
            $invalidProperties[] = "'posted' can't be null";
        }
        if ($this->container['movedPost'] === null) {
            $invalidProperties[] = "'movedPost' can't be null";
        }
        if ($this->container['linked'] === null) {
            $invalidProperties[] = "'linked' can't be null";
        }
        if ($this->container['grantedBadge'] === null) {
            $invalidProperties[] = "'grantedBadge' can't be null";
        }
        if ($this->container['invitedToTopic'] === null) {
            $invalidProperties[] = "'invitedToTopic' can't be null";
        }
        if ($this->container['custom'] === null) {
            $invalidProperties[] = "'custom' can't be null";
        }
        if ($this->container['groupMentioned'] === null) {
            $invalidProperties[] = "'groupMentioned' can't be null";
        }
        if ($this->container['groupMessageSummary'] === null) {
            $invalidProperties[] = "'groupMessageSummary' can't be null";
        }
        if ($this->container['watchingFirstPost'] === null) {
            $invalidProperties[] = "'watchingFirstPost' can't be null";
        }
        if ($this->container['topicReminder'] === null) {
            $invalidProperties[] = "'topicReminder' can't be null";
        }
        if ($this->container['likedConsolidated'] === null) {
            $invalidProperties[] = "'likedConsolidated' can't be null";
        }
        if ($this->container['postApproved'] === null) {
            $invalidProperties[] = "'postApproved' can't be null";
        }
        if ($this->container['codeReviewCommitApproved'] === null) {
            $invalidProperties[] = "'codeReviewCommitApproved' can't be null";
        }
        if ($this->container['membershipRequestAccepted'] === null) {
            $invalidProperties[] = "'membershipRequestAccepted' can't be null";
        }
        if ($this->container['membershipRequestConsolidated'] === null) {
            $invalidProperties[] = "'membershipRequestConsolidated' can't be null";
        }
        if ($this->container['bookmarkReminder'] === null) {
            $invalidProperties[] = "'bookmarkReminder' can't be null";
        }
        if ($this->container['reaction'] === null) {
            $invalidProperties[] = "'reaction' can't be null";
        }
        if ($this->container['votesReleased'] === null) {
            $invalidProperties[] = "'votesReleased' can't be null";
        }
        if ($this->container['eventReminder'] === null) {
            $invalidProperties[] = "'eventReminder' can't be null";
        }
        if ($this->container['eventInvitation'] === null) {
            $invalidProperties[] = "'eventInvitation' can't be null";
        }
        if ($this->container['chatMention'] === null) {
            $invalidProperties[] = "'chatMention' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mentioned
     *
     * @return int
     */
    public function getMentioned()
    {
        return $this->container['mentioned'];
    }

    /**
     * Sets mentioned
     *
     * @param int $mentioned mentioned
     *
     * @return self
     */
    public function setMentioned($mentioned)
    {
        $this->container['mentioned'] = $mentioned;

        return $this;
    }

    /**
     * Gets replied
     *
     * @return int
     */
    public function getReplied()
    {
        return $this->container['replied'];
    }

    /**
     * Sets replied
     *
     * @param int $replied replied
     *
     * @return self
     */
    public function setReplied($replied)
    {
        $this->container['replied'] = $replied;

        return $this;
    }

    /**
     * Gets quoted
     *
     * @return int
     */
    public function getQuoted()
    {
        return $this->container['quoted'];
    }

    /**
     * Sets quoted
     *
     * @param int $quoted quoted
     *
     * @return self
     */
    public function setQuoted($quoted)
    {
        $this->container['quoted'] = $quoted;

        return $this;
    }

    /**
     * Gets edited
     *
     * @return int
     */
    public function getEdited()
    {
        return $this->container['edited'];
    }

    /**
     * Sets edited
     *
     * @param int $edited edited
     *
     * @return self
     */
    public function setEdited($edited)
    {
        $this->container['edited'] = $edited;

        return $this;
    }

    /**
     * Gets liked
     *
     * @return int
     */
    public function getLiked()
    {
        return $this->container['liked'];
    }

    /**
     * Sets liked
     *
     * @param int $liked liked
     *
     * @return self
     */
    public function setLiked($liked)
    {
        $this->container['liked'] = $liked;

        return $this;
    }

    /**
     * Gets privateMessage
     *
     * @return int
     */
    public function getPrivateMessage()
    {
        return $this->container['privateMessage'];
    }

    /**
     * Sets privateMessage
     *
     * @param int $privateMessage privateMessage
     *
     * @return self
     */
    public function setPrivateMessage($privateMessage)
    {
        $this->container['privateMessage'] = $privateMessage;

        return $this;
    }

    /**
     * Gets invitedToPrivateMessage
     *
     * @return int
     */
    public function getInvitedToPrivateMessage()
    {
        return $this->container['invitedToPrivateMessage'];
    }

    /**
     * Sets invitedToPrivateMessage
     *
     * @param int $invitedToPrivateMessage invitedToPrivateMessage
     *
     * @return self
     */
    public function setInvitedToPrivateMessage($invitedToPrivateMessage)
    {
        $this->container['invitedToPrivateMessage'] = $invitedToPrivateMessage;

        return $this;
    }

    /**
     * Gets inviteeAccepted
     *
     * @return int
     */
    public function getInviteeAccepted()
    {
        return $this->container['inviteeAccepted'];
    }

    /**
     * Sets inviteeAccepted
     *
     * @param int $inviteeAccepted inviteeAccepted
     *
     * @return self
     */
    public function setInviteeAccepted($inviteeAccepted)
    {
        $this->container['inviteeAccepted'] = $inviteeAccepted;

        return $this;
    }

    /**
     * Gets posted
     *
     * @return int
     */
    public function getPosted()
    {
        return $this->container['posted'];
    }

    /**
     * Sets posted
     *
     * @param int $posted posted
     *
     * @return self
     */
    public function setPosted($posted)
    {
        $this->container['posted'] = $posted;

        return $this;
    }

    /**
     * Gets movedPost
     *
     * @return int
     */
    public function getMovedPost()
    {
        return $this->container['movedPost'];
    }

    /**
     * Sets movedPost
     *
     * @param int $movedPost movedPost
     *
     * @return self
     */
    public function setMovedPost($movedPost)
    {
        $this->container['movedPost'] = $movedPost;

        return $this;
    }

    /**
     * Gets linked
     *
     * @return int
     */
    public function getLinked()
    {
        return $this->container['linked'];
    }

    /**
     * Sets linked
     *
     * @param int $linked linked
     *
     * @return self
     */
    public function setLinked($linked)
    {
        $this->container['linked'] = $linked;

        return $this;
    }

    /**
     * Gets grantedBadge
     *
     * @return int
     */
    public function getGrantedBadge()
    {
        return $this->container['grantedBadge'];
    }

    /**
     * Sets grantedBadge
     *
     * @param int $grantedBadge grantedBadge
     *
     * @return self
     */
    public function setGrantedBadge($grantedBadge)
    {
        $this->container['grantedBadge'] = $grantedBadge;

        return $this;
    }

    /**
     * Gets invitedToTopic
     *
     * @return int
     */
    public function getInvitedToTopic()
    {
        return $this->container['invitedToTopic'];
    }

    /**
     * Sets invitedToTopic
     *
     * @param int $invitedToTopic invitedToTopic
     *
     * @return self
     */
    public function setInvitedToTopic($invitedToTopic)
    {
        $this->container['invitedToTopic'] = $invitedToTopic;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return int
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param int $custom custom
     *
     * @return self
     */
    public function setCustom($custom)
    {
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets groupMentioned
     *
     * @return int
     */
    public function getGroupMentioned()
    {
        return $this->container['groupMentioned'];
    }

    /**
     * Sets groupMentioned
     *
     * @param int $groupMentioned groupMentioned
     *
     * @return self
     */
    public function setGroupMentioned($groupMentioned)
    {
        $this->container['groupMentioned'] = $groupMentioned;

        return $this;
    }

    /**
     * Gets groupMessageSummary
     *
     * @return int
     */
    public function getGroupMessageSummary()
    {
        return $this->container['groupMessageSummary'];
    }

    /**
     * Sets groupMessageSummary
     *
     * @param int $groupMessageSummary groupMessageSummary
     *
     * @return self
     */
    public function setGroupMessageSummary($groupMessageSummary)
    {
        $this->container['groupMessageSummary'] = $groupMessageSummary;

        return $this;
    }

    /**
     * Gets watchingFirstPost
     *
     * @return int
     */
    public function getWatchingFirstPost()
    {
        return $this->container['watchingFirstPost'];
    }

    /**
     * Sets watchingFirstPost
     *
     * @param int $watchingFirstPost watchingFirstPost
     *
     * @return self
     */
    public function setWatchingFirstPost($watchingFirstPost)
    {
        $this->container['watchingFirstPost'] = $watchingFirstPost;

        return $this;
    }

    /**
     * Gets topicReminder
     *
     * @return int
     */
    public function getTopicReminder()
    {
        return $this->container['topicReminder'];
    }

    /**
     * Sets topicReminder
     *
     * @param int $topicReminder topicReminder
     *
     * @return self
     */
    public function setTopicReminder($topicReminder)
    {
        $this->container['topicReminder'] = $topicReminder;

        return $this;
    }

    /**
     * Gets likedConsolidated
     *
     * @return int
     */
    public function getLikedConsolidated()
    {
        return $this->container['likedConsolidated'];
    }

    /**
     * Sets likedConsolidated
     *
     * @param int $likedConsolidated likedConsolidated
     *
     * @return self
     */
    public function setLikedConsolidated($likedConsolidated)
    {
        $this->container['likedConsolidated'] = $likedConsolidated;

        return $this;
    }

    /**
     * Gets postApproved
     *
     * @return int
     */
    public function getPostApproved()
    {
        return $this->container['postApproved'];
    }

    /**
     * Sets postApproved
     *
     * @param int $postApproved postApproved
     *
     * @return self
     */
    public function setPostApproved($postApproved)
    {
        $this->container['postApproved'] = $postApproved;

        return $this;
    }

    /**
     * Gets codeReviewCommitApproved
     *
     * @return int
     */
    public function getCodeReviewCommitApproved()
    {
        return $this->container['codeReviewCommitApproved'];
    }

    /**
     * Sets codeReviewCommitApproved
     *
     * @param int $codeReviewCommitApproved codeReviewCommitApproved
     *
     * @return self
     */
    public function setCodeReviewCommitApproved($codeReviewCommitApproved)
    {
        $this->container['codeReviewCommitApproved'] = $codeReviewCommitApproved;

        return $this;
    }

    /**
     * Gets membershipRequestAccepted
     *
     * @return int
     */
    public function getMembershipRequestAccepted()
    {
        return $this->container['membershipRequestAccepted'];
    }

    /**
     * Sets membershipRequestAccepted
     *
     * @param int $membershipRequestAccepted membershipRequestAccepted
     *
     * @return self
     */
    public function setMembershipRequestAccepted($membershipRequestAccepted)
    {
        $this->container['membershipRequestAccepted'] = $membershipRequestAccepted;

        return $this;
    }

    /**
     * Gets membershipRequestConsolidated
     *
     * @return int
     */
    public function getMembershipRequestConsolidated()
    {
        return $this->container['membershipRequestConsolidated'];
    }

    /**
     * Sets membershipRequestConsolidated
     *
     * @param int $membershipRequestConsolidated membershipRequestConsolidated
     *
     * @return self
     */
    public function setMembershipRequestConsolidated($membershipRequestConsolidated)
    {
        $this->container['membershipRequestConsolidated'] = $membershipRequestConsolidated;

        return $this;
    }

    /**
     * Gets bookmarkReminder
     *
     * @return int
     */
    public function getBookmarkReminder()
    {
        return $this->container['bookmarkReminder'];
    }

    /**
     * Sets bookmarkReminder
     *
     * @param int $bookmarkReminder bookmarkReminder
     *
     * @return self
     */
    public function setBookmarkReminder($bookmarkReminder)
    {
        $this->container['bookmarkReminder'] = $bookmarkReminder;

        return $this;
    }

    /**
     * Gets reaction
     *
     * @return int
     */
    public function getReaction()
    {
        return $this->container['reaction'];
    }

    /**
     * Sets reaction
     *
     * @param int $reaction reaction
     *
     * @return self
     */
    public function setReaction($reaction)
    {
        $this->container['reaction'] = $reaction;

        return $this;
    }

    /**
     * Gets votesReleased
     *
     * @return int
     */
    public function getVotesReleased()
    {
        return $this->container['votesReleased'];
    }

    /**
     * Sets votesReleased
     *
     * @param int $votesReleased votesReleased
     *
     * @return self
     */
    public function setVotesReleased($votesReleased)
    {
        $this->container['votesReleased'] = $votesReleased;

        return $this;
    }

    /**
     * Gets eventReminder
     *
     * @return int
     */
    public function getEventReminder()
    {
        return $this->container['eventReminder'];
    }

    /**
     * Sets eventReminder
     *
     * @param int $eventReminder eventReminder
     *
     * @return self
     */
    public function setEventReminder($eventReminder)
    {
        $this->container['eventReminder'] = $eventReminder;

        return $this;
    }

    /**
     * Gets eventInvitation
     *
     * @return int
     */
    public function getEventInvitation()
    {
        return $this->container['eventInvitation'];
    }

    /**
     * Sets eventInvitation
     *
     * @param int $eventInvitation eventInvitation
     *
     * @return self
     */
    public function setEventInvitation($eventInvitation)
    {
        $this->container['eventInvitation'] = $eventInvitation;

        return $this;
    }

    /**
     * Gets chatMention
     *
     * @return int
     */
    public function getChatMention()
    {
        return $this->container['chatMention'];
    }

    /**
     * Sets chatMention
     *
     * @param int $chatMention chatMention
     *
     * @return self
     */
    public function setChatMention($chatMention)
    {
        $this->container['chatMention'] = $chatMention;

        return $this;
    }

    /**
     * Gets chatMessage
     *
     * @return int|null
     */
    public function getChatMessage()
    {
        return $this->container['chatMessage'];
    }

    /**
     * Sets chatMessage
     *
     * @param int|null $chatMessage chatMessage
     *
     * @return self
     */
    public function setChatMessage($chatMessage)
    {
        $this->container['chatMessage'] = $chatMessage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


