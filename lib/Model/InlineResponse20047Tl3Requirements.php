<?php
/**
 * InlineResponse20047Tl3Requirements
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20047Tl3Requirements Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20047Tl3Requirements implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_47_tl3_requirements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timePeriod' => 'int',
        'requirementsMet' => 'bool',
        'requirementsLost' => 'bool',
        'trustLevelLocked' => 'bool',
        'onGracePeriod' => 'bool',
        'daysVisited' => 'int',
        'minDaysVisited' => 'int',
        'numTopicsRepliedTo' => 'int',
        'minTopicsRepliedTo' => 'int',
        'topicsViewed' => 'int',
        'minTopicsViewed' => 'int',
        'postsRead' => 'int',
        'minPostsRead' => 'int',
        'topicsViewedAllTime' => 'int',
        'minTopicsViewedAllTime' => 'int',
        'postsReadAllTime' => 'int',
        'minPostsReadAllTime' => 'int',
        'numFlaggedPosts' => 'int',
        'maxFlaggedPosts' => 'int',
        'numFlaggedByUsers' => 'int',
        'maxFlaggedByUsers' => 'int',
        'numLikesGiven' => 'int',
        'minLikesGiven' => 'int',
        'numLikesReceived' => 'int',
        'minLikesReceived' => 'int',
        'numLikesReceivedDays' => 'int',
        'minLikesReceivedDays' => 'int',
        'numLikesReceivedUsers' => 'int',
        'minLikesReceivedUsers' => 'int',
        'penaltyCounts' => '\InfinityFree\DiscourseApi\Model\InlineResponse20047Tl3RequirementsPenaltyCounts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timePeriod' => null,
        'requirementsMet' => null,
        'requirementsLost' => null,
        'trustLevelLocked' => null,
        'onGracePeriod' => null,
        'daysVisited' => null,
        'minDaysVisited' => null,
        'numTopicsRepliedTo' => null,
        'minTopicsRepliedTo' => null,
        'topicsViewed' => null,
        'minTopicsViewed' => null,
        'postsRead' => null,
        'minPostsRead' => null,
        'topicsViewedAllTime' => null,
        'minTopicsViewedAllTime' => null,
        'postsReadAllTime' => null,
        'minPostsReadAllTime' => null,
        'numFlaggedPosts' => null,
        'maxFlaggedPosts' => null,
        'numFlaggedByUsers' => null,
        'maxFlaggedByUsers' => null,
        'numLikesGiven' => null,
        'minLikesGiven' => null,
        'numLikesReceived' => null,
        'minLikesReceived' => null,
        'numLikesReceivedDays' => null,
        'minLikesReceivedDays' => null,
        'numLikesReceivedUsers' => null,
        'minLikesReceivedUsers' => null,
        'penaltyCounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timePeriod' => 'time_period',
        'requirementsMet' => 'requirements_met',
        'requirementsLost' => 'requirements_lost',
        'trustLevelLocked' => 'trust_level_locked',
        'onGracePeriod' => 'on_grace_period',
        'daysVisited' => 'days_visited',
        'minDaysVisited' => 'min_days_visited',
        'numTopicsRepliedTo' => 'num_topics_replied_to',
        'minTopicsRepliedTo' => 'min_topics_replied_to',
        'topicsViewed' => 'topics_viewed',
        'minTopicsViewed' => 'min_topics_viewed',
        'postsRead' => 'posts_read',
        'minPostsRead' => 'min_posts_read',
        'topicsViewedAllTime' => 'topics_viewed_all_time',
        'minTopicsViewedAllTime' => 'min_topics_viewed_all_time',
        'postsReadAllTime' => 'posts_read_all_time',
        'minPostsReadAllTime' => 'min_posts_read_all_time',
        'numFlaggedPosts' => 'num_flagged_posts',
        'maxFlaggedPosts' => 'max_flagged_posts',
        'numFlaggedByUsers' => 'num_flagged_by_users',
        'maxFlaggedByUsers' => 'max_flagged_by_users',
        'numLikesGiven' => 'num_likes_given',
        'minLikesGiven' => 'min_likes_given',
        'numLikesReceived' => 'num_likes_received',
        'minLikesReceived' => 'min_likes_received',
        'numLikesReceivedDays' => 'num_likes_received_days',
        'minLikesReceivedDays' => 'min_likes_received_days',
        'numLikesReceivedUsers' => 'num_likes_received_users',
        'minLikesReceivedUsers' => 'min_likes_received_users',
        'penaltyCounts' => 'penalty_counts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timePeriod' => 'setTimePeriod',
        'requirementsMet' => 'setRequirementsMet',
        'requirementsLost' => 'setRequirementsLost',
        'trustLevelLocked' => 'setTrustLevelLocked',
        'onGracePeriod' => 'setOnGracePeriod',
        'daysVisited' => 'setDaysVisited',
        'minDaysVisited' => 'setMinDaysVisited',
        'numTopicsRepliedTo' => 'setNumTopicsRepliedTo',
        'minTopicsRepliedTo' => 'setMinTopicsRepliedTo',
        'topicsViewed' => 'setTopicsViewed',
        'minTopicsViewed' => 'setMinTopicsViewed',
        'postsRead' => 'setPostsRead',
        'minPostsRead' => 'setMinPostsRead',
        'topicsViewedAllTime' => 'setTopicsViewedAllTime',
        'minTopicsViewedAllTime' => 'setMinTopicsViewedAllTime',
        'postsReadAllTime' => 'setPostsReadAllTime',
        'minPostsReadAllTime' => 'setMinPostsReadAllTime',
        'numFlaggedPosts' => 'setNumFlaggedPosts',
        'maxFlaggedPosts' => 'setMaxFlaggedPosts',
        'numFlaggedByUsers' => 'setNumFlaggedByUsers',
        'maxFlaggedByUsers' => 'setMaxFlaggedByUsers',
        'numLikesGiven' => 'setNumLikesGiven',
        'minLikesGiven' => 'setMinLikesGiven',
        'numLikesReceived' => 'setNumLikesReceived',
        'minLikesReceived' => 'setMinLikesReceived',
        'numLikesReceivedDays' => 'setNumLikesReceivedDays',
        'minLikesReceivedDays' => 'setMinLikesReceivedDays',
        'numLikesReceivedUsers' => 'setNumLikesReceivedUsers',
        'minLikesReceivedUsers' => 'setMinLikesReceivedUsers',
        'penaltyCounts' => 'setPenaltyCounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timePeriod' => 'getTimePeriod',
        'requirementsMet' => 'getRequirementsMet',
        'requirementsLost' => 'getRequirementsLost',
        'trustLevelLocked' => 'getTrustLevelLocked',
        'onGracePeriod' => 'getOnGracePeriod',
        'daysVisited' => 'getDaysVisited',
        'minDaysVisited' => 'getMinDaysVisited',
        'numTopicsRepliedTo' => 'getNumTopicsRepliedTo',
        'minTopicsRepliedTo' => 'getMinTopicsRepliedTo',
        'topicsViewed' => 'getTopicsViewed',
        'minTopicsViewed' => 'getMinTopicsViewed',
        'postsRead' => 'getPostsRead',
        'minPostsRead' => 'getMinPostsRead',
        'topicsViewedAllTime' => 'getTopicsViewedAllTime',
        'minTopicsViewedAllTime' => 'getMinTopicsViewedAllTime',
        'postsReadAllTime' => 'getPostsReadAllTime',
        'minPostsReadAllTime' => 'getMinPostsReadAllTime',
        'numFlaggedPosts' => 'getNumFlaggedPosts',
        'maxFlaggedPosts' => 'getMaxFlaggedPosts',
        'numFlaggedByUsers' => 'getNumFlaggedByUsers',
        'maxFlaggedByUsers' => 'getMaxFlaggedByUsers',
        'numLikesGiven' => 'getNumLikesGiven',
        'minLikesGiven' => 'getMinLikesGiven',
        'numLikesReceived' => 'getNumLikesReceived',
        'minLikesReceived' => 'getMinLikesReceived',
        'numLikesReceivedDays' => 'getNumLikesReceivedDays',
        'minLikesReceivedDays' => 'getMinLikesReceivedDays',
        'numLikesReceivedUsers' => 'getNumLikesReceivedUsers',
        'minLikesReceivedUsers' => 'getMinLikesReceivedUsers',
        'penaltyCounts' => 'getPenaltyCounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timePeriod'] = $data['timePeriod'] ?? null;
        $this->container['requirementsMet'] = $data['requirementsMet'] ?? null;
        $this->container['requirementsLost'] = $data['requirementsLost'] ?? null;
        $this->container['trustLevelLocked'] = $data['trustLevelLocked'] ?? null;
        $this->container['onGracePeriod'] = $data['onGracePeriod'] ?? null;
        $this->container['daysVisited'] = $data['daysVisited'] ?? null;
        $this->container['minDaysVisited'] = $data['minDaysVisited'] ?? null;
        $this->container['numTopicsRepliedTo'] = $data['numTopicsRepliedTo'] ?? null;
        $this->container['minTopicsRepliedTo'] = $data['minTopicsRepliedTo'] ?? null;
        $this->container['topicsViewed'] = $data['topicsViewed'] ?? null;
        $this->container['minTopicsViewed'] = $data['minTopicsViewed'] ?? null;
        $this->container['postsRead'] = $data['postsRead'] ?? null;
        $this->container['minPostsRead'] = $data['minPostsRead'] ?? null;
        $this->container['topicsViewedAllTime'] = $data['topicsViewedAllTime'] ?? null;
        $this->container['minTopicsViewedAllTime'] = $data['minTopicsViewedAllTime'] ?? null;
        $this->container['postsReadAllTime'] = $data['postsReadAllTime'] ?? null;
        $this->container['minPostsReadAllTime'] = $data['minPostsReadAllTime'] ?? null;
        $this->container['numFlaggedPosts'] = $data['numFlaggedPosts'] ?? null;
        $this->container['maxFlaggedPosts'] = $data['maxFlaggedPosts'] ?? null;
        $this->container['numFlaggedByUsers'] = $data['numFlaggedByUsers'] ?? null;
        $this->container['maxFlaggedByUsers'] = $data['maxFlaggedByUsers'] ?? null;
        $this->container['numLikesGiven'] = $data['numLikesGiven'] ?? null;
        $this->container['minLikesGiven'] = $data['minLikesGiven'] ?? null;
        $this->container['numLikesReceived'] = $data['numLikesReceived'] ?? null;
        $this->container['minLikesReceived'] = $data['minLikesReceived'] ?? null;
        $this->container['numLikesReceivedDays'] = $data['numLikesReceivedDays'] ?? null;
        $this->container['minLikesReceivedDays'] = $data['minLikesReceivedDays'] ?? null;
        $this->container['numLikesReceivedUsers'] = $data['numLikesReceivedUsers'] ?? null;
        $this->container['minLikesReceivedUsers'] = $data['minLikesReceivedUsers'] ?? null;
        $this->container['penaltyCounts'] = $data['penaltyCounts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timePeriod'] === null) {
            $invalidProperties[] = "'timePeriod' can't be null";
        }
        if ($this->container['requirementsMet'] === null) {
            $invalidProperties[] = "'requirementsMet' can't be null";
        }
        if ($this->container['requirementsLost'] === null) {
            $invalidProperties[] = "'requirementsLost' can't be null";
        }
        if ($this->container['trustLevelLocked'] === null) {
            $invalidProperties[] = "'trustLevelLocked' can't be null";
        }
        if ($this->container['onGracePeriod'] === null) {
            $invalidProperties[] = "'onGracePeriod' can't be null";
        }
        if ($this->container['daysVisited'] === null) {
            $invalidProperties[] = "'daysVisited' can't be null";
        }
        if ($this->container['minDaysVisited'] === null) {
            $invalidProperties[] = "'minDaysVisited' can't be null";
        }
        if ($this->container['numTopicsRepliedTo'] === null) {
            $invalidProperties[] = "'numTopicsRepliedTo' can't be null";
        }
        if ($this->container['minTopicsRepliedTo'] === null) {
            $invalidProperties[] = "'minTopicsRepliedTo' can't be null";
        }
        if ($this->container['topicsViewed'] === null) {
            $invalidProperties[] = "'topicsViewed' can't be null";
        }
        if ($this->container['minTopicsViewed'] === null) {
            $invalidProperties[] = "'minTopicsViewed' can't be null";
        }
        if ($this->container['postsRead'] === null) {
            $invalidProperties[] = "'postsRead' can't be null";
        }
        if ($this->container['minPostsRead'] === null) {
            $invalidProperties[] = "'minPostsRead' can't be null";
        }
        if ($this->container['topicsViewedAllTime'] === null) {
            $invalidProperties[] = "'topicsViewedAllTime' can't be null";
        }
        if ($this->container['minTopicsViewedAllTime'] === null) {
            $invalidProperties[] = "'minTopicsViewedAllTime' can't be null";
        }
        if ($this->container['postsReadAllTime'] === null) {
            $invalidProperties[] = "'postsReadAllTime' can't be null";
        }
        if ($this->container['minPostsReadAllTime'] === null) {
            $invalidProperties[] = "'minPostsReadAllTime' can't be null";
        }
        if ($this->container['numFlaggedPosts'] === null) {
            $invalidProperties[] = "'numFlaggedPosts' can't be null";
        }
        if ($this->container['maxFlaggedPosts'] === null) {
            $invalidProperties[] = "'maxFlaggedPosts' can't be null";
        }
        if ($this->container['numFlaggedByUsers'] === null) {
            $invalidProperties[] = "'numFlaggedByUsers' can't be null";
        }
        if ($this->container['maxFlaggedByUsers'] === null) {
            $invalidProperties[] = "'maxFlaggedByUsers' can't be null";
        }
        if ($this->container['numLikesGiven'] === null) {
            $invalidProperties[] = "'numLikesGiven' can't be null";
        }
        if ($this->container['minLikesGiven'] === null) {
            $invalidProperties[] = "'minLikesGiven' can't be null";
        }
        if ($this->container['numLikesReceived'] === null) {
            $invalidProperties[] = "'numLikesReceived' can't be null";
        }
        if ($this->container['minLikesReceived'] === null) {
            $invalidProperties[] = "'minLikesReceived' can't be null";
        }
        if ($this->container['numLikesReceivedDays'] === null) {
            $invalidProperties[] = "'numLikesReceivedDays' can't be null";
        }
        if ($this->container['minLikesReceivedDays'] === null) {
            $invalidProperties[] = "'minLikesReceivedDays' can't be null";
        }
        if ($this->container['numLikesReceivedUsers'] === null) {
            $invalidProperties[] = "'numLikesReceivedUsers' can't be null";
        }
        if ($this->container['minLikesReceivedUsers'] === null) {
            $invalidProperties[] = "'minLikesReceivedUsers' can't be null";
        }
        if ($this->container['penaltyCounts'] === null) {
            $invalidProperties[] = "'penaltyCounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timePeriod
     *
     * @return int
     */
    public function getTimePeriod()
    {
        return $this->container['timePeriod'];
    }

    /**
     * Sets timePeriod
     *
     * @param int $timePeriod timePeriod
     *
     * @return self
     */
    public function setTimePeriod($timePeriod)
    {
        $this->container['timePeriod'] = $timePeriod;

        return $this;
    }

    /**
     * Gets requirementsMet
     *
     * @return bool
     */
    public function getRequirementsMet()
    {
        return $this->container['requirementsMet'];
    }

    /**
     * Sets requirementsMet
     *
     * @param bool $requirementsMet requirementsMet
     *
     * @return self
     */
    public function setRequirementsMet($requirementsMet)
    {
        $this->container['requirementsMet'] = $requirementsMet;

        return $this;
    }

    /**
     * Gets requirementsLost
     *
     * @return bool
     */
    public function getRequirementsLost()
    {
        return $this->container['requirementsLost'];
    }

    /**
     * Sets requirementsLost
     *
     * @param bool $requirementsLost requirementsLost
     *
     * @return self
     */
    public function setRequirementsLost($requirementsLost)
    {
        $this->container['requirementsLost'] = $requirementsLost;

        return $this;
    }

    /**
     * Gets trustLevelLocked
     *
     * @return bool
     */
    public function getTrustLevelLocked()
    {
        return $this->container['trustLevelLocked'];
    }

    /**
     * Sets trustLevelLocked
     *
     * @param bool $trustLevelLocked trustLevelLocked
     *
     * @return self
     */
    public function setTrustLevelLocked($trustLevelLocked)
    {
        $this->container['trustLevelLocked'] = $trustLevelLocked;

        return $this;
    }

    /**
     * Gets onGracePeriod
     *
     * @return bool
     */
    public function getOnGracePeriod()
    {
        return $this->container['onGracePeriod'];
    }

    /**
     * Sets onGracePeriod
     *
     * @param bool $onGracePeriod onGracePeriod
     *
     * @return self
     */
    public function setOnGracePeriod($onGracePeriod)
    {
        $this->container['onGracePeriod'] = $onGracePeriod;

        return $this;
    }

    /**
     * Gets daysVisited
     *
     * @return int
     */
    public function getDaysVisited()
    {
        return $this->container['daysVisited'];
    }

    /**
     * Sets daysVisited
     *
     * @param int $daysVisited daysVisited
     *
     * @return self
     */
    public function setDaysVisited($daysVisited)
    {
        $this->container['daysVisited'] = $daysVisited;

        return $this;
    }

    /**
     * Gets minDaysVisited
     *
     * @return int
     */
    public function getMinDaysVisited()
    {
        return $this->container['minDaysVisited'];
    }

    /**
     * Sets minDaysVisited
     *
     * @param int $minDaysVisited minDaysVisited
     *
     * @return self
     */
    public function setMinDaysVisited($minDaysVisited)
    {
        $this->container['minDaysVisited'] = $minDaysVisited;

        return $this;
    }

    /**
     * Gets numTopicsRepliedTo
     *
     * @return int
     */
    public function getNumTopicsRepliedTo()
    {
        return $this->container['numTopicsRepliedTo'];
    }

    /**
     * Sets numTopicsRepliedTo
     *
     * @param int $numTopicsRepliedTo numTopicsRepliedTo
     *
     * @return self
     */
    public function setNumTopicsRepliedTo($numTopicsRepliedTo)
    {
        $this->container['numTopicsRepliedTo'] = $numTopicsRepliedTo;

        return $this;
    }

    /**
     * Gets minTopicsRepliedTo
     *
     * @return int
     */
    public function getMinTopicsRepliedTo()
    {
        return $this->container['minTopicsRepliedTo'];
    }

    /**
     * Sets minTopicsRepliedTo
     *
     * @param int $minTopicsRepliedTo minTopicsRepliedTo
     *
     * @return self
     */
    public function setMinTopicsRepliedTo($minTopicsRepliedTo)
    {
        $this->container['minTopicsRepliedTo'] = $minTopicsRepliedTo;

        return $this;
    }

    /**
     * Gets topicsViewed
     *
     * @return int
     */
    public function getTopicsViewed()
    {
        return $this->container['topicsViewed'];
    }

    /**
     * Sets topicsViewed
     *
     * @param int $topicsViewed topicsViewed
     *
     * @return self
     */
    public function setTopicsViewed($topicsViewed)
    {
        $this->container['topicsViewed'] = $topicsViewed;

        return $this;
    }

    /**
     * Gets minTopicsViewed
     *
     * @return int
     */
    public function getMinTopicsViewed()
    {
        return $this->container['minTopicsViewed'];
    }

    /**
     * Sets minTopicsViewed
     *
     * @param int $minTopicsViewed minTopicsViewed
     *
     * @return self
     */
    public function setMinTopicsViewed($minTopicsViewed)
    {
        $this->container['minTopicsViewed'] = $minTopicsViewed;

        return $this;
    }

    /**
     * Gets postsRead
     *
     * @return int
     */
    public function getPostsRead()
    {
        return $this->container['postsRead'];
    }

    /**
     * Sets postsRead
     *
     * @param int $postsRead postsRead
     *
     * @return self
     */
    public function setPostsRead($postsRead)
    {
        $this->container['postsRead'] = $postsRead;

        return $this;
    }

    /**
     * Gets minPostsRead
     *
     * @return int
     */
    public function getMinPostsRead()
    {
        return $this->container['minPostsRead'];
    }

    /**
     * Sets minPostsRead
     *
     * @param int $minPostsRead minPostsRead
     *
     * @return self
     */
    public function setMinPostsRead($minPostsRead)
    {
        $this->container['minPostsRead'] = $minPostsRead;

        return $this;
    }

    /**
     * Gets topicsViewedAllTime
     *
     * @return int
     */
    public function getTopicsViewedAllTime()
    {
        return $this->container['topicsViewedAllTime'];
    }

    /**
     * Sets topicsViewedAllTime
     *
     * @param int $topicsViewedAllTime topicsViewedAllTime
     *
     * @return self
     */
    public function setTopicsViewedAllTime($topicsViewedAllTime)
    {
        $this->container['topicsViewedAllTime'] = $topicsViewedAllTime;

        return $this;
    }

    /**
     * Gets minTopicsViewedAllTime
     *
     * @return int
     */
    public function getMinTopicsViewedAllTime()
    {
        return $this->container['minTopicsViewedAllTime'];
    }

    /**
     * Sets minTopicsViewedAllTime
     *
     * @param int $minTopicsViewedAllTime minTopicsViewedAllTime
     *
     * @return self
     */
    public function setMinTopicsViewedAllTime($minTopicsViewedAllTime)
    {
        $this->container['minTopicsViewedAllTime'] = $minTopicsViewedAllTime;

        return $this;
    }

    /**
     * Gets postsReadAllTime
     *
     * @return int
     */
    public function getPostsReadAllTime()
    {
        return $this->container['postsReadAllTime'];
    }

    /**
     * Sets postsReadAllTime
     *
     * @param int $postsReadAllTime postsReadAllTime
     *
     * @return self
     */
    public function setPostsReadAllTime($postsReadAllTime)
    {
        $this->container['postsReadAllTime'] = $postsReadAllTime;

        return $this;
    }

    /**
     * Gets minPostsReadAllTime
     *
     * @return int
     */
    public function getMinPostsReadAllTime()
    {
        return $this->container['minPostsReadAllTime'];
    }

    /**
     * Sets minPostsReadAllTime
     *
     * @param int $minPostsReadAllTime minPostsReadAllTime
     *
     * @return self
     */
    public function setMinPostsReadAllTime($minPostsReadAllTime)
    {
        $this->container['minPostsReadAllTime'] = $minPostsReadAllTime;

        return $this;
    }

    /**
     * Gets numFlaggedPosts
     *
     * @return int
     */
    public function getNumFlaggedPosts()
    {
        return $this->container['numFlaggedPosts'];
    }

    /**
     * Sets numFlaggedPosts
     *
     * @param int $numFlaggedPosts numFlaggedPosts
     *
     * @return self
     */
    public function setNumFlaggedPosts($numFlaggedPosts)
    {
        $this->container['numFlaggedPosts'] = $numFlaggedPosts;

        return $this;
    }

    /**
     * Gets maxFlaggedPosts
     *
     * @return int
     */
    public function getMaxFlaggedPosts()
    {
        return $this->container['maxFlaggedPosts'];
    }

    /**
     * Sets maxFlaggedPosts
     *
     * @param int $maxFlaggedPosts maxFlaggedPosts
     *
     * @return self
     */
    public function setMaxFlaggedPosts($maxFlaggedPosts)
    {
        $this->container['maxFlaggedPosts'] = $maxFlaggedPosts;

        return $this;
    }

    /**
     * Gets numFlaggedByUsers
     *
     * @return int
     */
    public function getNumFlaggedByUsers()
    {
        return $this->container['numFlaggedByUsers'];
    }

    /**
     * Sets numFlaggedByUsers
     *
     * @param int $numFlaggedByUsers numFlaggedByUsers
     *
     * @return self
     */
    public function setNumFlaggedByUsers($numFlaggedByUsers)
    {
        $this->container['numFlaggedByUsers'] = $numFlaggedByUsers;

        return $this;
    }

    /**
     * Gets maxFlaggedByUsers
     *
     * @return int
     */
    public function getMaxFlaggedByUsers()
    {
        return $this->container['maxFlaggedByUsers'];
    }

    /**
     * Sets maxFlaggedByUsers
     *
     * @param int $maxFlaggedByUsers maxFlaggedByUsers
     *
     * @return self
     */
    public function setMaxFlaggedByUsers($maxFlaggedByUsers)
    {
        $this->container['maxFlaggedByUsers'] = $maxFlaggedByUsers;

        return $this;
    }

    /**
     * Gets numLikesGiven
     *
     * @return int
     */
    public function getNumLikesGiven()
    {
        return $this->container['numLikesGiven'];
    }

    /**
     * Sets numLikesGiven
     *
     * @param int $numLikesGiven numLikesGiven
     *
     * @return self
     */
    public function setNumLikesGiven($numLikesGiven)
    {
        $this->container['numLikesGiven'] = $numLikesGiven;

        return $this;
    }

    /**
     * Gets minLikesGiven
     *
     * @return int
     */
    public function getMinLikesGiven()
    {
        return $this->container['minLikesGiven'];
    }

    /**
     * Sets minLikesGiven
     *
     * @param int $minLikesGiven minLikesGiven
     *
     * @return self
     */
    public function setMinLikesGiven($minLikesGiven)
    {
        $this->container['minLikesGiven'] = $minLikesGiven;

        return $this;
    }

    /**
     * Gets numLikesReceived
     *
     * @return int
     */
    public function getNumLikesReceived()
    {
        return $this->container['numLikesReceived'];
    }

    /**
     * Sets numLikesReceived
     *
     * @param int $numLikesReceived numLikesReceived
     *
     * @return self
     */
    public function setNumLikesReceived($numLikesReceived)
    {
        $this->container['numLikesReceived'] = $numLikesReceived;

        return $this;
    }

    /**
     * Gets minLikesReceived
     *
     * @return int
     */
    public function getMinLikesReceived()
    {
        return $this->container['minLikesReceived'];
    }

    /**
     * Sets minLikesReceived
     *
     * @param int $minLikesReceived minLikesReceived
     *
     * @return self
     */
    public function setMinLikesReceived($minLikesReceived)
    {
        $this->container['minLikesReceived'] = $minLikesReceived;

        return $this;
    }

    /**
     * Gets numLikesReceivedDays
     *
     * @return int
     */
    public function getNumLikesReceivedDays()
    {
        return $this->container['numLikesReceivedDays'];
    }

    /**
     * Sets numLikesReceivedDays
     *
     * @param int $numLikesReceivedDays numLikesReceivedDays
     *
     * @return self
     */
    public function setNumLikesReceivedDays($numLikesReceivedDays)
    {
        $this->container['numLikesReceivedDays'] = $numLikesReceivedDays;

        return $this;
    }

    /**
     * Gets minLikesReceivedDays
     *
     * @return int
     */
    public function getMinLikesReceivedDays()
    {
        return $this->container['minLikesReceivedDays'];
    }

    /**
     * Sets minLikesReceivedDays
     *
     * @param int $minLikesReceivedDays minLikesReceivedDays
     *
     * @return self
     */
    public function setMinLikesReceivedDays($minLikesReceivedDays)
    {
        $this->container['minLikesReceivedDays'] = $minLikesReceivedDays;

        return $this;
    }

    /**
     * Gets numLikesReceivedUsers
     *
     * @return int
     */
    public function getNumLikesReceivedUsers()
    {
        return $this->container['numLikesReceivedUsers'];
    }

    /**
     * Sets numLikesReceivedUsers
     *
     * @param int $numLikesReceivedUsers numLikesReceivedUsers
     *
     * @return self
     */
    public function setNumLikesReceivedUsers($numLikesReceivedUsers)
    {
        $this->container['numLikesReceivedUsers'] = $numLikesReceivedUsers;

        return $this;
    }

    /**
     * Gets minLikesReceivedUsers
     *
     * @return int
     */
    public function getMinLikesReceivedUsers()
    {
        return $this->container['minLikesReceivedUsers'];
    }

    /**
     * Sets minLikesReceivedUsers
     *
     * @param int $minLikesReceivedUsers minLikesReceivedUsers
     *
     * @return self
     */
    public function setMinLikesReceivedUsers($minLikesReceivedUsers)
    {
        $this->container['minLikesReceivedUsers'] = $minLikesReceivedUsers;

        return $this;
    }

    /**
     * Gets penaltyCounts
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20047Tl3RequirementsPenaltyCounts
     */
    public function getPenaltyCounts()
    {
        return $this->container['penaltyCounts'];
    }

    /**
     * Sets penaltyCounts
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20047Tl3RequirementsPenaltyCounts $penaltyCounts penaltyCounts
     *
     * @return self
     */
    public function setPenaltyCounts($penaltyCounts)
    {
        $this->container['penaltyCounts'] = $penaltyCounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


