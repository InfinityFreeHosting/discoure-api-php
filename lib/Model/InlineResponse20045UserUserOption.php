<?php
/**
 * InlineResponse20045UserUserOption
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20045UserUserOption Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20045UserUserOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_45_user_user_option';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'int',
        'mailingListMode' => 'bool',
        'mailingListModeFrequency' => 'int',
        'emailDigests' => 'bool',
        'emailLevel' => 'int',
        'emailMessagesLevel' => 'int',
        'externalLinksInNewTab' => 'bool',
        'colorSchemeId' => 'mixed',
        'darkSchemeId' => 'mixed',
        'dynamicFavicon' => 'bool',
        'enableQuoting' => 'bool',
        'enableDefer' => 'bool',
        'digestAfterMinutes' => 'int',
        'automaticallyUnpinTopics' => 'bool',
        'autoTrackTopicsAfterMsecs' => 'int',
        'notificationLevelWhenReplying' => 'int',
        'newTopicDurationMinutes' => 'int',
        'emailPreviousReplies' => 'int',
        'emailInReplyTo' => 'bool',
        'likeNotificationFrequency' => 'int',
        'includeTl0InDigests' => 'bool',
        'themeIds' => 'array',
        'themeKeySeq' => 'int',
        'allowPrivateMessages' => 'bool',
        'enableAllowedPmUsers' => 'bool',
        'homepageId' => 'mixed',
        'hideProfileAndPresence' => 'bool',
        'textSize' => 'string',
        'textSizeSeq' => 'int',
        'titleCountMode' => 'string',
        'timezone' => 'mixed',
        'skipNewUserTips' => 'bool',
        'defaultCalendar' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => null,
        'mailingListMode' => null,
        'mailingListModeFrequency' => null,
        'emailDigests' => null,
        'emailLevel' => null,
        'emailMessagesLevel' => null,
        'externalLinksInNewTab' => null,
        'colorSchemeId' => null,
        'darkSchemeId' => null,
        'dynamicFavicon' => null,
        'enableQuoting' => null,
        'enableDefer' => null,
        'digestAfterMinutes' => null,
        'automaticallyUnpinTopics' => null,
        'autoTrackTopicsAfterMsecs' => null,
        'notificationLevelWhenReplying' => null,
        'newTopicDurationMinutes' => null,
        'emailPreviousReplies' => null,
        'emailInReplyTo' => null,
        'likeNotificationFrequency' => null,
        'includeTl0InDigests' => null,
        'themeIds' => null,
        'themeKeySeq' => null,
        'allowPrivateMessages' => null,
        'enableAllowedPmUsers' => null,
        'homepageId' => null,
        'hideProfileAndPresence' => null,
        'textSize' => null,
        'textSizeSeq' => null,
        'titleCountMode' => null,
        'timezone' => null,
        'skipNewUserTips' => null,
        'defaultCalendar' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'user_id',
        'mailingListMode' => 'mailing_list_mode',
        'mailingListModeFrequency' => 'mailing_list_mode_frequency',
        'emailDigests' => 'email_digests',
        'emailLevel' => 'email_level',
        'emailMessagesLevel' => 'email_messages_level',
        'externalLinksInNewTab' => 'external_links_in_new_tab',
        'colorSchemeId' => 'color_scheme_id',
        'darkSchemeId' => 'dark_scheme_id',
        'dynamicFavicon' => 'dynamic_favicon',
        'enableQuoting' => 'enable_quoting',
        'enableDefer' => 'enable_defer',
        'digestAfterMinutes' => 'digest_after_minutes',
        'automaticallyUnpinTopics' => 'automatically_unpin_topics',
        'autoTrackTopicsAfterMsecs' => 'auto_track_topics_after_msecs',
        'notificationLevelWhenReplying' => 'notification_level_when_replying',
        'newTopicDurationMinutes' => 'new_topic_duration_minutes',
        'emailPreviousReplies' => 'email_previous_replies',
        'emailInReplyTo' => 'email_in_reply_to',
        'likeNotificationFrequency' => 'like_notification_frequency',
        'includeTl0InDigests' => 'include_tl0_in_digests',
        'themeIds' => 'theme_ids',
        'themeKeySeq' => 'theme_key_seq',
        'allowPrivateMessages' => 'allow_private_messages',
        'enableAllowedPmUsers' => 'enable_allowed_pm_users',
        'homepageId' => 'homepage_id',
        'hideProfileAndPresence' => 'hide_profile_and_presence',
        'textSize' => 'text_size',
        'textSizeSeq' => 'text_size_seq',
        'titleCountMode' => 'title_count_mode',
        'timezone' => 'timezone',
        'skipNewUserTips' => 'skip_new_user_tips',
        'defaultCalendar' => 'default_calendar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'mailingListMode' => 'setMailingListMode',
        'mailingListModeFrequency' => 'setMailingListModeFrequency',
        'emailDigests' => 'setEmailDigests',
        'emailLevel' => 'setEmailLevel',
        'emailMessagesLevel' => 'setEmailMessagesLevel',
        'externalLinksInNewTab' => 'setExternalLinksInNewTab',
        'colorSchemeId' => 'setColorSchemeId',
        'darkSchemeId' => 'setDarkSchemeId',
        'dynamicFavicon' => 'setDynamicFavicon',
        'enableQuoting' => 'setEnableQuoting',
        'enableDefer' => 'setEnableDefer',
        'digestAfterMinutes' => 'setDigestAfterMinutes',
        'automaticallyUnpinTopics' => 'setAutomaticallyUnpinTopics',
        'autoTrackTopicsAfterMsecs' => 'setAutoTrackTopicsAfterMsecs',
        'notificationLevelWhenReplying' => 'setNotificationLevelWhenReplying',
        'newTopicDurationMinutes' => 'setNewTopicDurationMinutes',
        'emailPreviousReplies' => 'setEmailPreviousReplies',
        'emailInReplyTo' => 'setEmailInReplyTo',
        'likeNotificationFrequency' => 'setLikeNotificationFrequency',
        'includeTl0InDigests' => 'setIncludeTl0InDigests',
        'themeIds' => 'setThemeIds',
        'themeKeySeq' => 'setThemeKeySeq',
        'allowPrivateMessages' => 'setAllowPrivateMessages',
        'enableAllowedPmUsers' => 'setEnableAllowedPmUsers',
        'homepageId' => 'setHomepageId',
        'hideProfileAndPresence' => 'setHideProfileAndPresence',
        'textSize' => 'setTextSize',
        'textSizeSeq' => 'setTextSizeSeq',
        'titleCountMode' => 'setTitleCountMode',
        'timezone' => 'setTimezone',
        'skipNewUserTips' => 'setSkipNewUserTips',
        'defaultCalendar' => 'setDefaultCalendar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'mailingListMode' => 'getMailingListMode',
        'mailingListModeFrequency' => 'getMailingListModeFrequency',
        'emailDigests' => 'getEmailDigests',
        'emailLevel' => 'getEmailLevel',
        'emailMessagesLevel' => 'getEmailMessagesLevel',
        'externalLinksInNewTab' => 'getExternalLinksInNewTab',
        'colorSchemeId' => 'getColorSchemeId',
        'darkSchemeId' => 'getDarkSchemeId',
        'dynamicFavicon' => 'getDynamicFavicon',
        'enableQuoting' => 'getEnableQuoting',
        'enableDefer' => 'getEnableDefer',
        'digestAfterMinutes' => 'getDigestAfterMinutes',
        'automaticallyUnpinTopics' => 'getAutomaticallyUnpinTopics',
        'autoTrackTopicsAfterMsecs' => 'getAutoTrackTopicsAfterMsecs',
        'notificationLevelWhenReplying' => 'getNotificationLevelWhenReplying',
        'newTopicDurationMinutes' => 'getNewTopicDurationMinutes',
        'emailPreviousReplies' => 'getEmailPreviousReplies',
        'emailInReplyTo' => 'getEmailInReplyTo',
        'likeNotificationFrequency' => 'getLikeNotificationFrequency',
        'includeTl0InDigests' => 'getIncludeTl0InDigests',
        'themeIds' => 'getThemeIds',
        'themeKeySeq' => 'getThemeKeySeq',
        'allowPrivateMessages' => 'getAllowPrivateMessages',
        'enableAllowedPmUsers' => 'getEnableAllowedPmUsers',
        'homepageId' => 'getHomepageId',
        'hideProfileAndPresence' => 'getHideProfileAndPresence',
        'textSize' => 'getTextSize',
        'textSizeSeq' => 'getTextSizeSeq',
        'titleCountMode' => 'getTitleCountMode',
        'timezone' => 'getTimezone',
        'skipNewUserTips' => 'getSkipNewUserTips',
        'defaultCalendar' => 'getDefaultCalendar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['mailingListMode'] = $data['mailingListMode'] ?? null;
        $this->container['mailingListModeFrequency'] = $data['mailingListModeFrequency'] ?? null;
        $this->container['emailDigests'] = $data['emailDigests'] ?? null;
        $this->container['emailLevel'] = $data['emailLevel'] ?? null;
        $this->container['emailMessagesLevel'] = $data['emailMessagesLevel'] ?? null;
        $this->container['externalLinksInNewTab'] = $data['externalLinksInNewTab'] ?? null;
        $this->container['colorSchemeId'] = $data['colorSchemeId'] ?? null;
        $this->container['darkSchemeId'] = $data['darkSchemeId'] ?? null;
        $this->container['dynamicFavicon'] = $data['dynamicFavicon'] ?? null;
        $this->container['enableQuoting'] = $data['enableQuoting'] ?? null;
        $this->container['enableDefer'] = $data['enableDefer'] ?? null;
        $this->container['digestAfterMinutes'] = $data['digestAfterMinutes'] ?? null;
        $this->container['automaticallyUnpinTopics'] = $data['automaticallyUnpinTopics'] ?? null;
        $this->container['autoTrackTopicsAfterMsecs'] = $data['autoTrackTopicsAfterMsecs'] ?? null;
        $this->container['notificationLevelWhenReplying'] = $data['notificationLevelWhenReplying'] ?? null;
        $this->container['newTopicDurationMinutes'] = $data['newTopicDurationMinutes'] ?? null;
        $this->container['emailPreviousReplies'] = $data['emailPreviousReplies'] ?? null;
        $this->container['emailInReplyTo'] = $data['emailInReplyTo'] ?? null;
        $this->container['likeNotificationFrequency'] = $data['likeNotificationFrequency'] ?? null;
        $this->container['includeTl0InDigests'] = $data['includeTl0InDigests'] ?? null;
        $this->container['themeIds'] = $data['themeIds'] ?? null;
        $this->container['themeKeySeq'] = $data['themeKeySeq'] ?? null;
        $this->container['allowPrivateMessages'] = $data['allowPrivateMessages'] ?? null;
        $this->container['enableAllowedPmUsers'] = $data['enableAllowedPmUsers'] ?? null;
        $this->container['homepageId'] = $data['homepageId'] ?? null;
        $this->container['hideProfileAndPresence'] = $data['hideProfileAndPresence'] ?? null;
        $this->container['textSize'] = $data['textSize'] ?? null;
        $this->container['textSizeSeq'] = $data['textSizeSeq'] ?? null;
        $this->container['titleCountMode'] = $data['titleCountMode'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['skipNewUserTips'] = $data['skipNewUserTips'] ?? null;
        $this->container['defaultCalendar'] = $data['defaultCalendar'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ($this->container['mailingListMode'] === null) {
            $invalidProperties[] = "'mailingListMode' can't be null";
        }
        if ($this->container['mailingListModeFrequency'] === null) {
            $invalidProperties[] = "'mailingListModeFrequency' can't be null";
        }
        if ($this->container['emailDigests'] === null) {
            $invalidProperties[] = "'emailDigests' can't be null";
        }
        if ($this->container['emailLevel'] === null) {
            $invalidProperties[] = "'emailLevel' can't be null";
        }
        if ($this->container['emailMessagesLevel'] === null) {
            $invalidProperties[] = "'emailMessagesLevel' can't be null";
        }
        if ($this->container['externalLinksInNewTab'] === null) {
            $invalidProperties[] = "'externalLinksInNewTab' can't be null";
        }
        if ($this->container['colorSchemeId'] === null) {
            $invalidProperties[] = "'colorSchemeId' can't be null";
        }
        if ($this->container['darkSchemeId'] === null) {
            $invalidProperties[] = "'darkSchemeId' can't be null";
        }
        if ($this->container['dynamicFavicon'] === null) {
            $invalidProperties[] = "'dynamicFavicon' can't be null";
        }
        if ($this->container['enableQuoting'] === null) {
            $invalidProperties[] = "'enableQuoting' can't be null";
        }
        if ($this->container['enableDefer'] === null) {
            $invalidProperties[] = "'enableDefer' can't be null";
        }
        if ($this->container['digestAfterMinutes'] === null) {
            $invalidProperties[] = "'digestAfterMinutes' can't be null";
        }
        if ($this->container['automaticallyUnpinTopics'] === null) {
            $invalidProperties[] = "'automaticallyUnpinTopics' can't be null";
        }
        if ($this->container['autoTrackTopicsAfterMsecs'] === null) {
            $invalidProperties[] = "'autoTrackTopicsAfterMsecs' can't be null";
        }
        if ($this->container['notificationLevelWhenReplying'] === null) {
            $invalidProperties[] = "'notificationLevelWhenReplying' can't be null";
        }
        if ($this->container['newTopicDurationMinutes'] === null) {
            $invalidProperties[] = "'newTopicDurationMinutes' can't be null";
        }
        if ($this->container['emailPreviousReplies'] === null) {
            $invalidProperties[] = "'emailPreviousReplies' can't be null";
        }
        if ($this->container['emailInReplyTo'] === null) {
            $invalidProperties[] = "'emailInReplyTo' can't be null";
        }
        if ($this->container['likeNotificationFrequency'] === null) {
            $invalidProperties[] = "'likeNotificationFrequency' can't be null";
        }
        if ($this->container['includeTl0InDigests'] === null) {
            $invalidProperties[] = "'includeTl0InDigests' can't be null";
        }
        if ($this->container['themeIds'] === null) {
            $invalidProperties[] = "'themeIds' can't be null";
        }
        if ($this->container['themeKeySeq'] === null) {
            $invalidProperties[] = "'themeKeySeq' can't be null";
        }
        if ($this->container['allowPrivateMessages'] === null) {
            $invalidProperties[] = "'allowPrivateMessages' can't be null";
        }
        if ($this->container['enableAllowedPmUsers'] === null) {
            $invalidProperties[] = "'enableAllowedPmUsers' can't be null";
        }
        if ($this->container['homepageId'] === null) {
            $invalidProperties[] = "'homepageId' can't be null";
        }
        if ($this->container['hideProfileAndPresence'] === null) {
            $invalidProperties[] = "'hideProfileAndPresence' can't be null";
        }
        if ($this->container['textSize'] === null) {
            $invalidProperties[] = "'textSize' can't be null";
        }
        if ($this->container['textSizeSeq'] === null) {
            $invalidProperties[] = "'textSizeSeq' can't be null";
        }
        if ($this->container['titleCountMode'] === null) {
            $invalidProperties[] = "'titleCountMode' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['skipNewUserTips'] === null) {
            $invalidProperties[] = "'skipNewUserTips' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets mailingListMode
     *
     * @return bool
     */
    public function getMailingListMode()
    {
        return $this->container['mailingListMode'];
    }

    /**
     * Sets mailingListMode
     *
     * @param bool $mailingListMode mailingListMode
     *
     * @return self
     */
    public function setMailingListMode($mailingListMode)
    {
        $this->container['mailingListMode'] = $mailingListMode;

        return $this;
    }

    /**
     * Gets mailingListModeFrequency
     *
     * @return int
     */
    public function getMailingListModeFrequency()
    {
        return $this->container['mailingListModeFrequency'];
    }

    /**
     * Sets mailingListModeFrequency
     *
     * @param int $mailingListModeFrequency mailingListModeFrequency
     *
     * @return self
     */
    public function setMailingListModeFrequency($mailingListModeFrequency)
    {
        $this->container['mailingListModeFrequency'] = $mailingListModeFrequency;

        return $this;
    }

    /**
     * Gets emailDigests
     *
     * @return bool
     */
    public function getEmailDigests()
    {
        return $this->container['emailDigests'];
    }

    /**
     * Sets emailDigests
     *
     * @param bool $emailDigests emailDigests
     *
     * @return self
     */
    public function setEmailDigests($emailDigests)
    {
        $this->container['emailDigests'] = $emailDigests;

        return $this;
    }

    /**
     * Gets emailLevel
     *
     * @return int
     */
    public function getEmailLevel()
    {
        return $this->container['emailLevel'];
    }

    /**
     * Sets emailLevel
     *
     * @param int $emailLevel emailLevel
     *
     * @return self
     */
    public function setEmailLevel($emailLevel)
    {
        $this->container['emailLevel'] = $emailLevel;

        return $this;
    }

    /**
     * Gets emailMessagesLevel
     *
     * @return int
     */
    public function getEmailMessagesLevel()
    {
        return $this->container['emailMessagesLevel'];
    }

    /**
     * Sets emailMessagesLevel
     *
     * @param int $emailMessagesLevel emailMessagesLevel
     *
     * @return self
     */
    public function setEmailMessagesLevel($emailMessagesLevel)
    {
        $this->container['emailMessagesLevel'] = $emailMessagesLevel;

        return $this;
    }

    /**
     * Gets externalLinksInNewTab
     *
     * @return bool
     */
    public function getExternalLinksInNewTab()
    {
        return $this->container['externalLinksInNewTab'];
    }

    /**
     * Sets externalLinksInNewTab
     *
     * @param bool $externalLinksInNewTab externalLinksInNewTab
     *
     * @return self
     */
    public function setExternalLinksInNewTab($externalLinksInNewTab)
    {
        $this->container['externalLinksInNewTab'] = $externalLinksInNewTab;

        return $this;
    }

    /**
     * Gets colorSchemeId
     *
     * @return mixed
     */
    public function getColorSchemeId()
    {
        return $this->container['colorSchemeId'];
    }

    /**
     * Sets colorSchemeId
     *
     * @param mixed $colorSchemeId colorSchemeId
     *
     * @return self
     */
    public function setColorSchemeId($colorSchemeId)
    {
        $this->container['colorSchemeId'] = $colorSchemeId;

        return $this;
    }

    /**
     * Gets darkSchemeId
     *
     * @return mixed
     */
    public function getDarkSchemeId()
    {
        return $this->container['darkSchemeId'];
    }

    /**
     * Sets darkSchemeId
     *
     * @param mixed $darkSchemeId darkSchemeId
     *
     * @return self
     */
    public function setDarkSchemeId($darkSchemeId)
    {
        $this->container['darkSchemeId'] = $darkSchemeId;

        return $this;
    }

    /**
     * Gets dynamicFavicon
     *
     * @return bool
     */
    public function getDynamicFavicon()
    {
        return $this->container['dynamicFavicon'];
    }

    /**
     * Sets dynamicFavicon
     *
     * @param bool $dynamicFavicon dynamicFavicon
     *
     * @return self
     */
    public function setDynamicFavicon($dynamicFavicon)
    {
        $this->container['dynamicFavicon'] = $dynamicFavicon;

        return $this;
    }

    /**
     * Gets enableQuoting
     *
     * @return bool
     */
    public function getEnableQuoting()
    {
        return $this->container['enableQuoting'];
    }

    /**
     * Sets enableQuoting
     *
     * @param bool $enableQuoting enableQuoting
     *
     * @return self
     */
    public function setEnableQuoting($enableQuoting)
    {
        $this->container['enableQuoting'] = $enableQuoting;

        return $this;
    }

    /**
     * Gets enableDefer
     *
     * @return bool
     */
    public function getEnableDefer()
    {
        return $this->container['enableDefer'];
    }

    /**
     * Sets enableDefer
     *
     * @param bool $enableDefer enableDefer
     *
     * @return self
     */
    public function setEnableDefer($enableDefer)
    {
        $this->container['enableDefer'] = $enableDefer;

        return $this;
    }

    /**
     * Gets digestAfterMinutes
     *
     * @return int
     */
    public function getDigestAfterMinutes()
    {
        return $this->container['digestAfterMinutes'];
    }

    /**
     * Sets digestAfterMinutes
     *
     * @param int $digestAfterMinutes digestAfterMinutes
     *
     * @return self
     */
    public function setDigestAfterMinutes($digestAfterMinutes)
    {
        $this->container['digestAfterMinutes'] = $digestAfterMinutes;

        return $this;
    }

    /**
     * Gets automaticallyUnpinTopics
     *
     * @return bool
     */
    public function getAutomaticallyUnpinTopics()
    {
        return $this->container['automaticallyUnpinTopics'];
    }

    /**
     * Sets automaticallyUnpinTopics
     *
     * @param bool $automaticallyUnpinTopics automaticallyUnpinTopics
     *
     * @return self
     */
    public function setAutomaticallyUnpinTopics($automaticallyUnpinTopics)
    {
        $this->container['automaticallyUnpinTopics'] = $automaticallyUnpinTopics;

        return $this;
    }

    /**
     * Gets autoTrackTopicsAfterMsecs
     *
     * @return int
     */
    public function getAutoTrackTopicsAfterMsecs()
    {
        return $this->container['autoTrackTopicsAfterMsecs'];
    }

    /**
     * Sets autoTrackTopicsAfterMsecs
     *
     * @param int $autoTrackTopicsAfterMsecs autoTrackTopicsAfterMsecs
     *
     * @return self
     */
    public function setAutoTrackTopicsAfterMsecs($autoTrackTopicsAfterMsecs)
    {
        $this->container['autoTrackTopicsAfterMsecs'] = $autoTrackTopicsAfterMsecs;

        return $this;
    }

    /**
     * Gets notificationLevelWhenReplying
     *
     * @return int
     */
    public function getNotificationLevelWhenReplying()
    {
        return $this->container['notificationLevelWhenReplying'];
    }

    /**
     * Sets notificationLevelWhenReplying
     *
     * @param int $notificationLevelWhenReplying notificationLevelWhenReplying
     *
     * @return self
     */
    public function setNotificationLevelWhenReplying($notificationLevelWhenReplying)
    {
        $this->container['notificationLevelWhenReplying'] = $notificationLevelWhenReplying;

        return $this;
    }

    /**
     * Gets newTopicDurationMinutes
     *
     * @return int
     */
    public function getNewTopicDurationMinutes()
    {
        return $this->container['newTopicDurationMinutes'];
    }

    /**
     * Sets newTopicDurationMinutes
     *
     * @param int $newTopicDurationMinutes newTopicDurationMinutes
     *
     * @return self
     */
    public function setNewTopicDurationMinutes($newTopicDurationMinutes)
    {
        $this->container['newTopicDurationMinutes'] = $newTopicDurationMinutes;

        return $this;
    }

    /**
     * Gets emailPreviousReplies
     *
     * @return int
     */
    public function getEmailPreviousReplies()
    {
        return $this->container['emailPreviousReplies'];
    }

    /**
     * Sets emailPreviousReplies
     *
     * @param int $emailPreviousReplies emailPreviousReplies
     *
     * @return self
     */
    public function setEmailPreviousReplies($emailPreviousReplies)
    {
        $this->container['emailPreviousReplies'] = $emailPreviousReplies;

        return $this;
    }

    /**
     * Gets emailInReplyTo
     *
     * @return bool
     */
    public function getEmailInReplyTo()
    {
        return $this->container['emailInReplyTo'];
    }

    /**
     * Sets emailInReplyTo
     *
     * @param bool $emailInReplyTo emailInReplyTo
     *
     * @return self
     */
    public function setEmailInReplyTo($emailInReplyTo)
    {
        $this->container['emailInReplyTo'] = $emailInReplyTo;

        return $this;
    }

    /**
     * Gets likeNotificationFrequency
     *
     * @return int
     */
    public function getLikeNotificationFrequency()
    {
        return $this->container['likeNotificationFrequency'];
    }

    /**
     * Sets likeNotificationFrequency
     *
     * @param int $likeNotificationFrequency likeNotificationFrequency
     *
     * @return self
     */
    public function setLikeNotificationFrequency($likeNotificationFrequency)
    {
        $this->container['likeNotificationFrequency'] = $likeNotificationFrequency;

        return $this;
    }

    /**
     * Gets includeTl0InDigests
     *
     * @return bool
     */
    public function getIncludeTl0InDigests()
    {
        return $this->container['includeTl0InDigests'];
    }

    /**
     * Sets includeTl0InDigests
     *
     * @param bool $includeTl0InDigests includeTl0InDigests
     *
     * @return self
     */
    public function setIncludeTl0InDigests($includeTl0InDigests)
    {
        $this->container['includeTl0InDigests'] = $includeTl0InDigests;

        return $this;
    }

    /**
     * Gets themeIds
     *
     * @return array
     */
    public function getThemeIds()
    {
        return $this->container['themeIds'];
    }

    /**
     * Sets themeIds
     *
     * @param array $themeIds themeIds
     *
     * @return self
     */
    public function setThemeIds($themeIds)
    {
        $this->container['themeIds'] = $themeIds;

        return $this;
    }

    /**
     * Gets themeKeySeq
     *
     * @return int
     */
    public function getThemeKeySeq()
    {
        return $this->container['themeKeySeq'];
    }

    /**
     * Sets themeKeySeq
     *
     * @param int $themeKeySeq themeKeySeq
     *
     * @return self
     */
    public function setThemeKeySeq($themeKeySeq)
    {
        $this->container['themeKeySeq'] = $themeKeySeq;

        return $this;
    }

    /**
     * Gets allowPrivateMessages
     *
     * @return bool
     */
    public function getAllowPrivateMessages()
    {
        return $this->container['allowPrivateMessages'];
    }

    /**
     * Sets allowPrivateMessages
     *
     * @param bool $allowPrivateMessages allowPrivateMessages
     *
     * @return self
     */
    public function setAllowPrivateMessages($allowPrivateMessages)
    {
        $this->container['allowPrivateMessages'] = $allowPrivateMessages;

        return $this;
    }

    /**
     * Gets enableAllowedPmUsers
     *
     * @return bool
     */
    public function getEnableAllowedPmUsers()
    {
        return $this->container['enableAllowedPmUsers'];
    }

    /**
     * Sets enableAllowedPmUsers
     *
     * @param bool $enableAllowedPmUsers enableAllowedPmUsers
     *
     * @return self
     */
    public function setEnableAllowedPmUsers($enableAllowedPmUsers)
    {
        $this->container['enableAllowedPmUsers'] = $enableAllowedPmUsers;

        return $this;
    }

    /**
     * Gets homepageId
     *
     * @return mixed
     */
    public function getHomepageId()
    {
        return $this->container['homepageId'];
    }

    /**
     * Sets homepageId
     *
     * @param mixed $homepageId homepageId
     *
     * @return self
     */
    public function setHomepageId($homepageId)
    {
        $this->container['homepageId'] = $homepageId;

        return $this;
    }

    /**
     * Gets hideProfileAndPresence
     *
     * @return bool
     */
    public function getHideProfileAndPresence()
    {
        return $this->container['hideProfileAndPresence'];
    }

    /**
     * Sets hideProfileAndPresence
     *
     * @param bool $hideProfileAndPresence hideProfileAndPresence
     *
     * @return self
     */
    public function setHideProfileAndPresence($hideProfileAndPresence)
    {
        $this->container['hideProfileAndPresence'] = $hideProfileAndPresence;

        return $this;
    }

    /**
     * Gets textSize
     *
     * @return string
     */
    public function getTextSize()
    {
        return $this->container['textSize'];
    }

    /**
     * Sets textSize
     *
     * @param string $textSize textSize
     *
     * @return self
     */
    public function setTextSize($textSize)
    {
        $this->container['textSize'] = $textSize;

        return $this;
    }

    /**
     * Gets textSizeSeq
     *
     * @return int
     */
    public function getTextSizeSeq()
    {
        return $this->container['textSizeSeq'];
    }

    /**
     * Sets textSizeSeq
     *
     * @param int $textSizeSeq textSizeSeq
     *
     * @return self
     */
    public function setTextSizeSeq($textSizeSeq)
    {
        $this->container['textSizeSeq'] = $textSizeSeq;

        return $this;
    }

    /**
     * Gets titleCountMode
     *
     * @return string
     */
    public function getTitleCountMode()
    {
        return $this->container['titleCountMode'];
    }

    /**
     * Sets titleCountMode
     *
     * @param string $titleCountMode titleCountMode
     *
     * @return self
     */
    public function setTitleCountMode($titleCountMode)
    {
        $this->container['titleCountMode'] = $titleCountMode;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return mixed
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param mixed $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets skipNewUserTips
     *
     * @return bool
     */
    public function getSkipNewUserTips()
    {
        return $this->container['skipNewUserTips'];
    }

    /**
     * Sets skipNewUserTips
     *
     * @param bool $skipNewUserTips skipNewUserTips
     *
     * @return self
     */
    public function setSkipNewUserTips($skipNewUserTips)
    {
        $this->container['skipNewUserTips'] = $skipNewUserTips;

        return $this;
    }

    /**
     * Gets defaultCalendar
     *
     * @return string|null
     */
    public function getDefaultCalendar()
    {
        return $this->container['defaultCalendar'];
    }

    /**
     * Sets defaultCalendar
     *
     * @param string|null $defaultCalendar defaultCalendar
     *
     * @return self
     */
    public function setDefaultCalendar($defaultCalendar)
    {
        $this->container['defaultCalendar'] = $defaultCalendar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


