<?php
/**
 * InlineResponse20027
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20027 Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20027 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_27';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'defaultArchetype' => 'string',
        'notificationTypes' => '\InfinityFree\DiscourseApi\Model\InlineResponse20027NotificationTypes',
        'postTypes' => '\InfinityFree\DiscourseApi\Model\InlineResponse20027PostTypes',
        'trustLevels' => '\InfinityFree\DiscourseApi\Model\InlineResponse20027TrustLevels',
        'groups' => 'array',
        'filters' => 'array',
        'periods' => 'array',
        'topMenuItems' => 'array',
        'anonymousTopMenuItems' => 'array',
        'uncategorizedCategoryId' => 'int',
        'userFieldMaxLength' => 'int',
        'postActionTypes' => 'array',
        'topicFlagTypes' => 'array',
        'canCreateTag' => 'bool',
        'canTagTopics' => 'bool',
        'canTagPms' => 'bool',
        'tagsFilterRegexp' => 'string',
        'topTags' => 'array',
        'wizardRequired' => 'bool',
        'topicFeaturedLinkAllowedCategoryIds' => 'array',
        'userThemes' => 'array',
        'userColorSchemes' => 'array',
        'defaultDarkColorScheme' => 'mixed',
        'censoredRegexp' => 'mixed',
        'customEmojiTranslation' => 'object',
        'watchedWordsReplace' => 'mixed',
        'watchedWordsLink' => 'mixed',
        'categories' => 'array',
        'archetypes' => 'array',
        'userFields' => 'array',
        'authProviders' => 'array'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'defaultArchetype' => null,
        'notificationTypes' => null,
        'postTypes' => null,
        'trustLevels' => null,
        'groups' => null,
        'filters' => null,
        'periods' => null,
        'topMenuItems' => null,
        'anonymousTopMenuItems' => null,
        'uncategorizedCategoryId' => null,
        'userFieldMaxLength' => null,
        'postActionTypes' => null,
        'topicFlagTypes' => null,
        'canCreateTag' => null,
        'canTagTopics' => null,
        'canTagPms' => null,
        'tagsFilterRegexp' => null,
        'topTags' => null,
        'wizardRequired' => null,
        'topicFeaturedLinkAllowedCategoryIds' => null,
        'userThemes' => null,
        'userColorSchemes' => null,
        'defaultDarkColorScheme' => null,
        'censoredRegexp' => null,
        'customEmojiTranslation' => null,
        'watchedWordsReplace' => null,
        'watchedWordsLink' => null,
        'categories' => null,
        'archetypes' => null,
        'userFields' => null,
        'authProviders' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'defaultArchetype' => 'default_archetype',
        'notificationTypes' => 'notification_types',
        'postTypes' => 'post_types',
        'trustLevels' => 'trust_levels',
        'groups' => 'groups',
        'filters' => 'filters',
        'periods' => 'periods',
        'topMenuItems' => 'top_menu_items',
        'anonymousTopMenuItems' => 'anonymous_top_menu_items',
        'uncategorizedCategoryId' => 'uncategorized_category_id',
        'userFieldMaxLength' => 'user_field_max_length',
        'postActionTypes' => 'post_action_types',
        'topicFlagTypes' => 'topic_flag_types',
        'canCreateTag' => 'can_create_tag',
        'canTagTopics' => 'can_tag_topics',
        'canTagPms' => 'can_tag_pms',
        'tagsFilterRegexp' => 'tags_filter_regexp',
        'topTags' => 'top_tags',
        'wizardRequired' => 'wizard_required',
        'topicFeaturedLinkAllowedCategoryIds' => 'topic_featured_link_allowed_category_ids',
        'userThemes' => 'user_themes',
        'userColorSchemes' => 'user_color_schemes',
        'defaultDarkColorScheme' => 'default_dark_color_scheme',
        'censoredRegexp' => 'censored_regexp',
        'customEmojiTranslation' => 'custom_emoji_translation',
        'watchedWordsReplace' => 'watched_words_replace',
        'watchedWordsLink' => 'watched_words_link',
        'categories' => 'categories',
        'archetypes' => 'archetypes',
        'userFields' => 'user_fields',
        'authProviders' => 'auth_providers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'defaultArchetype' => 'setDefaultArchetype',
        'notificationTypes' => 'setNotificationTypes',
        'postTypes' => 'setPostTypes',
        'trustLevels' => 'setTrustLevels',
        'groups' => 'setGroups',
        'filters' => 'setFilters',
        'periods' => 'setPeriods',
        'topMenuItems' => 'setTopMenuItems',
        'anonymousTopMenuItems' => 'setAnonymousTopMenuItems',
        'uncategorizedCategoryId' => 'setUncategorizedCategoryId',
        'userFieldMaxLength' => 'setUserFieldMaxLength',
        'postActionTypes' => 'setPostActionTypes',
        'topicFlagTypes' => 'setTopicFlagTypes',
        'canCreateTag' => 'setCanCreateTag',
        'canTagTopics' => 'setCanTagTopics',
        'canTagPms' => 'setCanTagPms',
        'tagsFilterRegexp' => 'setTagsFilterRegexp',
        'topTags' => 'setTopTags',
        'wizardRequired' => 'setWizardRequired',
        'topicFeaturedLinkAllowedCategoryIds' => 'setTopicFeaturedLinkAllowedCategoryIds',
        'userThemes' => 'setUserThemes',
        'userColorSchemes' => 'setUserColorSchemes',
        'defaultDarkColorScheme' => 'setDefaultDarkColorScheme',
        'censoredRegexp' => 'setCensoredRegexp',
        'customEmojiTranslation' => 'setCustomEmojiTranslation',
        'watchedWordsReplace' => 'setWatchedWordsReplace',
        'watchedWordsLink' => 'setWatchedWordsLink',
        'categories' => 'setCategories',
        'archetypes' => 'setArchetypes',
        'userFields' => 'setUserFields',
        'authProviders' => 'setAuthProviders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'defaultArchetype' => 'getDefaultArchetype',
        'notificationTypes' => 'getNotificationTypes',
        'postTypes' => 'getPostTypes',
        'trustLevels' => 'getTrustLevels',
        'groups' => 'getGroups',
        'filters' => 'getFilters',
        'periods' => 'getPeriods',
        'topMenuItems' => 'getTopMenuItems',
        'anonymousTopMenuItems' => 'getAnonymousTopMenuItems',
        'uncategorizedCategoryId' => 'getUncategorizedCategoryId',
        'userFieldMaxLength' => 'getUserFieldMaxLength',
        'postActionTypes' => 'getPostActionTypes',
        'topicFlagTypes' => 'getTopicFlagTypes',
        'canCreateTag' => 'getCanCreateTag',
        'canTagTopics' => 'getCanTagTopics',
        'canTagPms' => 'getCanTagPms',
        'tagsFilterRegexp' => 'getTagsFilterRegexp',
        'topTags' => 'getTopTags',
        'wizardRequired' => 'getWizardRequired',
        'topicFeaturedLinkAllowedCategoryIds' => 'getTopicFeaturedLinkAllowedCategoryIds',
        'userThemes' => 'getUserThemes',
        'userColorSchemes' => 'getUserColorSchemes',
        'defaultDarkColorScheme' => 'getDefaultDarkColorScheme',
        'censoredRegexp' => 'getCensoredRegexp',
        'customEmojiTranslation' => 'getCustomEmojiTranslation',
        'watchedWordsReplace' => 'getWatchedWordsReplace',
        'watchedWordsLink' => 'getWatchedWordsLink',
        'categories' => 'getCategories',
        'archetypes' => 'getArchetypes',
        'userFields' => 'getUserFields',
        'authProviders' => 'getAuthProviders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['defaultArchetype'] = $data['defaultArchetype'] ?? null;
        $this->container['notificationTypes'] = $data['notificationTypes'] ?? null;
        $this->container['postTypes'] = $data['postTypes'] ?? null;
        $this->container['trustLevels'] = $data['trustLevels'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
        $this->container['filters'] = $data['filters'] ?? null;
        $this->container['periods'] = $data['periods'] ?? null;
        $this->container['topMenuItems'] = $data['topMenuItems'] ?? null;
        $this->container['anonymousTopMenuItems'] = $data['anonymousTopMenuItems'] ?? null;
        $this->container['uncategorizedCategoryId'] = $data['uncategorizedCategoryId'] ?? null;
        $this->container['userFieldMaxLength'] = $data['userFieldMaxLength'] ?? null;
        $this->container['postActionTypes'] = $data['postActionTypes'] ?? null;
        $this->container['topicFlagTypes'] = $data['topicFlagTypes'] ?? null;
        $this->container['canCreateTag'] = $data['canCreateTag'] ?? null;
        $this->container['canTagTopics'] = $data['canTagTopics'] ?? null;
        $this->container['canTagPms'] = $data['canTagPms'] ?? null;
        $this->container['tagsFilterRegexp'] = $data['tagsFilterRegexp'] ?? null;
        $this->container['topTags'] = $data['topTags'] ?? null;
        $this->container['wizardRequired'] = $data['wizardRequired'] ?? null;
        $this->container['topicFeaturedLinkAllowedCategoryIds'] = $data['topicFeaturedLinkAllowedCategoryIds'] ?? null;
        $this->container['userThemes'] = $data['userThemes'] ?? null;
        $this->container['userColorSchemes'] = $data['userColorSchemes'] ?? null;
        $this->container['defaultDarkColorScheme'] = $data['defaultDarkColorScheme'] ?? null;
        $this->container['censoredRegexp'] = $data['censoredRegexp'] ?? null;
        $this->container['customEmojiTranslation'] = $data['customEmojiTranslation'] ?? null;
        $this->container['watchedWordsReplace'] = $data['watchedWordsReplace'] ?? null;
        $this->container['watchedWordsLink'] = $data['watchedWordsLink'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['archetypes'] = $data['archetypes'] ?? null;
        $this->container['userFields'] = $data['userFields'] ?? null;
        $this->container['authProviders'] = $data['authProviders'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['defaultArchetype'] === null) {
            $invalidProperties[] = "'defaultArchetype' can't be null";
        }
        if ($this->container['notificationTypes'] === null) {
            $invalidProperties[] = "'notificationTypes' can't be null";
        }
        if ($this->container['postTypes'] === null) {
            $invalidProperties[] = "'postTypes' can't be null";
        }
        if ($this->container['trustLevels'] === null) {
            $invalidProperties[] = "'trustLevels' can't be null";
        }
        if ($this->container['groups'] === null) {
            $invalidProperties[] = "'groups' can't be null";
        }
        if ($this->container['filters'] === null) {
            $invalidProperties[] = "'filters' can't be null";
        }
        if ($this->container['periods'] === null) {
            $invalidProperties[] = "'periods' can't be null";
        }
        if ($this->container['topMenuItems'] === null) {
            $invalidProperties[] = "'topMenuItems' can't be null";
        }
        if ($this->container['anonymousTopMenuItems'] === null) {
            $invalidProperties[] = "'anonymousTopMenuItems' can't be null";
        }
        if ($this->container['uncategorizedCategoryId'] === null) {
            $invalidProperties[] = "'uncategorizedCategoryId' can't be null";
        }
        if ($this->container['userFieldMaxLength'] === null) {
            $invalidProperties[] = "'userFieldMaxLength' can't be null";
        }
        if ($this->container['postActionTypes'] === null) {
            $invalidProperties[] = "'postActionTypes' can't be null";
        }
        if ($this->container['topicFlagTypes'] === null) {
            $invalidProperties[] = "'topicFlagTypes' can't be null";
        }
        if ($this->container['canCreateTag'] === null) {
            $invalidProperties[] = "'canCreateTag' can't be null";
        }
        if ($this->container['canTagTopics'] === null) {
            $invalidProperties[] = "'canTagTopics' can't be null";
        }
        if ($this->container['canTagPms'] === null) {
            $invalidProperties[] = "'canTagPms' can't be null";
        }
        if ($this->container['tagsFilterRegexp'] === null) {
            $invalidProperties[] = "'tagsFilterRegexp' can't be null";
        }
        if ($this->container['topTags'] === null) {
            $invalidProperties[] = "'topTags' can't be null";
        }
        if ($this->container['topicFeaturedLinkAllowedCategoryIds'] === null) {
            $invalidProperties[] = "'topicFeaturedLinkAllowedCategoryIds' can't be null";
        }
        if ($this->container['userThemes'] === null) {
            $invalidProperties[] = "'userThemes' can't be null";
        }
        if ($this->container['userColorSchemes'] === null) {
            $invalidProperties[] = "'userColorSchemes' can't be null";
        }
        if ($this->container['defaultDarkColorScheme'] === null) {
            $invalidProperties[] = "'defaultDarkColorScheme' can't be null";
        }
        if ($this->container['censoredRegexp'] === null) {
            $invalidProperties[] = "'censoredRegexp' can't be null";
        }
        if ($this->container['customEmojiTranslation'] === null) {
            $invalidProperties[] = "'customEmojiTranslation' can't be null";
        }
        if ($this->container['watchedWordsReplace'] === null) {
            $invalidProperties[] = "'watchedWordsReplace' can't be null";
        }
        if ($this->container['watchedWordsLink'] === null) {
            $invalidProperties[] = "'watchedWordsLink' can't be null";
        }
        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        if ($this->container['archetypes'] === null) {
            $invalidProperties[] = "'archetypes' can't be null";
        }
        if ($this->container['userFields'] === null) {
            $invalidProperties[] = "'userFields' can't be null";
        }
        if ($this->container['authProviders'] === null) {
            $invalidProperties[] = "'authProviders' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets defaultArchetype
     *
     * @return string
     */
    public function getDefaultArchetype()
    {
        return $this->container['defaultArchetype'];
    }

    /**
     * Sets defaultArchetype
     *
     * @param string $defaultArchetype defaultArchetype
     *
     * @return self
     */
    public function setDefaultArchetype($defaultArchetype)
    {
        $this->container['defaultArchetype'] = $defaultArchetype;

        return $this;
    }

    /**
     * Gets notificationTypes
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20027NotificationTypes
     */
    public function getNotificationTypes()
    {
        return $this->container['notificationTypes'];
    }

    /**
     * Sets notificationTypes
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20027NotificationTypes $notificationTypes notificationTypes
     *
     * @return self
     */
    public function setNotificationTypes($notificationTypes)
    {
        $this->container['notificationTypes'] = $notificationTypes;

        return $this;
    }

    /**
     * Gets postTypes
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20027PostTypes
     */
    public function getPostTypes()
    {
        return $this->container['postTypes'];
    }

    /**
     * Sets postTypes
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20027PostTypes $postTypes postTypes
     *
     * @return self
     */
    public function setPostTypes($postTypes)
    {
        $this->container['postTypes'] = $postTypes;

        return $this;
    }

    /**
     * Gets trustLevels
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20027TrustLevels
     */
    public function getTrustLevels()
    {
        return $this->container['trustLevels'];
    }

    /**
     * Sets trustLevels
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20027TrustLevels $trustLevels trustLevels
     *
     * @return self
     */
    public function setTrustLevels($trustLevels)
    {
        $this->container['trustLevels'] = $trustLevels;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return array
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param array $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return array
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param array $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return array
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param array $periods periods
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        $this->container['periods'] = $periods;

        return $this;
    }

    /**
     * Gets topMenuItems
     *
     * @return array
     */
    public function getTopMenuItems()
    {
        return $this->container['topMenuItems'];
    }

    /**
     * Sets topMenuItems
     *
     * @param array $topMenuItems topMenuItems
     *
     * @return self
     */
    public function setTopMenuItems($topMenuItems)
    {
        $this->container['topMenuItems'] = $topMenuItems;

        return $this;
    }

    /**
     * Gets anonymousTopMenuItems
     *
     * @return array
     */
    public function getAnonymousTopMenuItems()
    {
        return $this->container['anonymousTopMenuItems'];
    }

    /**
     * Sets anonymousTopMenuItems
     *
     * @param array $anonymousTopMenuItems anonymousTopMenuItems
     *
     * @return self
     */
    public function setAnonymousTopMenuItems($anonymousTopMenuItems)
    {
        $this->container['anonymousTopMenuItems'] = $anonymousTopMenuItems;

        return $this;
    }

    /**
     * Gets uncategorizedCategoryId
     *
     * @return int
     */
    public function getUncategorizedCategoryId()
    {
        return $this->container['uncategorizedCategoryId'];
    }

    /**
     * Sets uncategorizedCategoryId
     *
     * @param int $uncategorizedCategoryId uncategorizedCategoryId
     *
     * @return self
     */
    public function setUncategorizedCategoryId($uncategorizedCategoryId)
    {
        $this->container['uncategorizedCategoryId'] = $uncategorizedCategoryId;

        return $this;
    }

    /**
     * Gets userFieldMaxLength
     *
     * @return int
     */
    public function getUserFieldMaxLength()
    {
        return $this->container['userFieldMaxLength'];
    }

    /**
     * Sets userFieldMaxLength
     *
     * @param int $userFieldMaxLength userFieldMaxLength
     *
     * @return self
     */
    public function setUserFieldMaxLength($userFieldMaxLength)
    {
        $this->container['userFieldMaxLength'] = $userFieldMaxLength;

        return $this;
    }

    /**
     * Gets postActionTypes
     *
     * @return array
     */
    public function getPostActionTypes()
    {
        return $this->container['postActionTypes'];
    }

    /**
     * Sets postActionTypes
     *
     * @param array $postActionTypes postActionTypes
     *
     * @return self
     */
    public function setPostActionTypes($postActionTypes)
    {
        $this->container['postActionTypes'] = $postActionTypes;

        return $this;
    }

    /**
     * Gets topicFlagTypes
     *
     * @return array
     */
    public function getTopicFlagTypes()
    {
        return $this->container['topicFlagTypes'];
    }

    /**
     * Sets topicFlagTypes
     *
     * @param array $topicFlagTypes topicFlagTypes
     *
     * @return self
     */
    public function setTopicFlagTypes($topicFlagTypes)
    {
        $this->container['topicFlagTypes'] = $topicFlagTypes;

        return $this;
    }

    /**
     * Gets canCreateTag
     *
     * @return bool
     */
    public function getCanCreateTag()
    {
        return $this->container['canCreateTag'];
    }

    /**
     * Sets canCreateTag
     *
     * @param bool $canCreateTag canCreateTag
     *
     * @return self
     */
    public function setCanCreateTag($canCreateTag)
    {
        $this->container['canCreateTag'] = $canCreateTag;

        return $this;
    }

    /**
     * Gets canTagTopics
     *
     * @return bool
     */
    public function getCanTagTopics()
    {
        return $this->container['canTagTopics'];
    }

    /**
     * Sets canTagTopics
     *
     * @param bool $canTagTopics canTagTopics
     *
     * @return self
     */
    public function setCanTagTopics($canTagTopics)
    {
        $this->container['canTagTopics'] = $canTagTopics;

        return $this;
    }

    /**
     * Gets canTagPms
     *
     * @return bool
     */
    public function getCanTagPms()
    {
        return $this->container['canTagPms'];
    }

    /**
     * Sets canTagPms
     *
     * @param bool $canTagPms canTagPms
     *
     * @return self
     */
    public function setCanTagPms($canTagPms)
    {
        $this->container['canTagPms'] = $canTagPms;

        return $this;
    }

    /**
     * Gets tagsFilterRegexp
     *
     * @return string
     */
    public function getTagsFilterRegexp()
    {
        return $this->container['tagsFilterRegexp'];
    }

    /**
     * Sets tagsFilterRegexp
     *
     * @param string $tagsFilterRegexp tagsFilterRegexp
     *
     * @return self
     */
    public function setTagsFilterRegexp($tagsFilterRegexp)
    {
        $this->container['tagsFilterRegexp'] = $tagsFilterRegexp;

        return $this;
    }

    /**
     * Gets topTags
     *
     * @return array
     */
    public function getTopTags()
    {
        return $this->container['topTags'];
    }

    /**
     * Sets topTags
     *
     * @param array $topTags topTags
     *
     * @return self
     */
    public function setTopTags($topTags)
    {
        $this->container['topTags'] = $topTags;

        return $this;
    }

    /**
     * Gets wizardRequired
     *
     * @return bool|null
     */
    public function getWizardRequired()
    {
        return $this->container['wizardRequired'];
    }

    /**
     * Sets wizardRequired
     *
     * @param bool|null $wizardRequired wizardRequired
     *
     * @return self
     */
    public function setWizardRequired($wizardRequired)
    {
        $this->container['wizardRequired'] = $wizardRequired;

        return $this;
    }

    /**
     * Gets topicFeaturedLinkAllowedCategoryIds
     *
     * @return array
     */
    public function getTopicFeaturedLinkAllowedCategoryIds()
    {
        return $this->container['topicFeaturedLinkAllowedCategoryIds'];
    }

    /**
     * Sets topicFeaturedLinkAllowedCategoryIds
     *
     * @param array $topicFeaturedLinkAllowedCategoryIds topicFeaturedLinkAllowedCategoryIds
     *
     * @return self
     */
    public function setTopicFeaturedLinkAllowedCategoryIds($topicFeaturedLinkAllowedCategoryIds)
    {
        $this->container['topicFeaturedLinkAllowedCategoryIds'] = $topicFeaturedLinkAllowedCategoryIds;

        return $this;
    }

    /**
     * Gets userThemes
     *
     * @return array
     */
    public function getUserThemes()
    {
        return $this->container['userThemes'];
    }

    /**
     * Sets userThemes
     *
     * @param array $userThemes userThemes
     *
     * @return self
     */
    public function setUserThemes($userThemes)
    {
        $this->container['userThemes'] = $userThemes;

        return $this;
    }

    /**
     * Gets userColorSchemes
     *
     * @return array
     */
    public function getUserColorSchemes()
    {
        return $this->container['userColorSchemes'];
    }

    /**
     * Sets userColorSchemes
     *
     * @param array $userColorSchemes userColorSchemes
     *
     * @return self
     */
    public function setUserColorSchemes($userColorSchemes)
    {
        $this->container['userColorSchemes'] = $userColorSchemes;

        return $this;
    }

    /**
     * Gets defaultDarkColorScheme
     *
     * @return mixed
     */
    public function getDefaultDarkColorScheme()
    {
        return $this->container['defaultDarkColorScheme'];
    }

    /**
     * Sets defaultDarkColorScheme
     *
     * @param mixed $defaultDarkColorScheme defaultDarkColorScheme
     *
     * @return self
     */
    public function setDefaultDarkColorScheme($defaultDarkColorScheme)
    {
        $this->container['defaultDarkColorScheme'] = $defaultDarkColorScheme;

        return $this;
    }

    /**
     * Gets censoredRegexp
     *
     * @return mixed
     */
    public function getCensoredRegexp()
    {
        return $this->container['censoredRegexp'];
    }

    /**
     * Sets censoredRegexp
     *
     * @param mixed $censoredRegexp censoredRegexp
     *
     * @return self
     */
    public function setCensoredRegexp($censoredRegexp)
    {
        $this->container['censoredRegexp'] = $censoredRegexp;

        return $this;
    }

    /**
     * Gets customEmojiTranslation
     *
     * @return object
     */
    public function getCustomEmojiTranslation()
    {
        return $this->container['customEmojiTranslation'];
    }

    /**
     * Sets customEmojiTranslation
     *
     * @param object $customEmojiTranslation customEmojiTranslation
     *
     * @return self
     */
    public function setCustomEmojiTranslation($customEmojiTranslation)
    {
        $this->container['customEmojiTranslation'] = $customEmojiTranslation;

        return $this;
    }

    /**
     * Gets watchedWordsReplace
     *
     * @return mixed
     */
    public function getWatchedWordsReplace()
    {
        return $this->container['watchedWordsReplace'];
    }

    /**
     * Sets watchedWordsReplace
     *
     * @param mixed $watchedWordsReplace watchedWordsReplace
     *
     * @return self
     */
    public function setWatchedWordsReplace($watchedWordsReplace)
    {
        $this->container['watchedWordsReplace'] = $watchedWordsReplace;

        return $this;
    }

    /**
     * Gets watchedWordsLink
     *
     * @return mixed
     */
    public function getWatchedWordsLink()
    {
        return $this->container['watchedWordsLink'];
    }

    /**
     * Sets watchedWordsLink
     *
     * @param mixed $watchedWordsLink watchedWordsLink
     *
     * @return self
     */
    public function setWatchedWordsLink($watchedWordsLink)
    {
        $this->container['watchedWordsLink'] = $watchedWordsLink;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return array
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param array $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets archetypes
     *
     * @return array
     */
    public function getArchetypes()
    {
        return $this->container['archetypes'];
    }

    /**
     * Sets archetypes
     *
     * @param array $archetypes archetypes
     *
     * @return self
     */
    public function setArchetypes($archetypes)
    {
        $this->container['archetypes'] = $archetypes;

        return $this;
    }

    /**
     * Gets userFields
     *
     * @return array
     */
    public function getUserFields()
    {
        return $this->container['userFields'];
    }

    /**
     * Sets userFields
     *
     * @param array $userFields userFields
     *
     * @return self
     */
    public function setUserFields($userFields)
    {
        $this->container['userFields'] = $userFields;

        return $this;
    }

    /**
     * Gets authProviders
     *
     * @return array
     */
    public function getAuthProviders()
    {
        return $this->container['authProviders'];
    }

    /**
     * Sets authProviders
     *
     * @param array $authProviders authProviders
     *
     * @return self
     */
    public function setAuthProviders($authProviders)
    {
        $this->container['authProviders'] = $authProviders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


