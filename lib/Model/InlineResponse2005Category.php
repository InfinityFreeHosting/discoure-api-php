<?php
/**
 * InlineResponse2005Category
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse2005Category Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2005Category implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_5_category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'color' => 'string',
        'textColor' => 'string',
        'slug' => 'string',
        'topicCount' => 'int',
        'postCount' => 'int',
        'position' => 'int',
        'description' => 'mixed',
        'descriptionText' => 'mixed',
        'descriptionExcerpt' => 'mixed',
        'topicUrl' => 'mixed',
        'readRestricted' => 'bool',
        'permission' => 'mixed',
        'notificationLevel' => 'int',
        'canEdit' => 'bool',
        'topicTemplate' => 'mixed',
        'hasChildren' => 'mixed',
        'sortOrder' => 'mixed',
        'sortAscending' => 'mixed',
        'showSubcategoryList' => 'bool',
        'numFeaturedTopics' => 'int',
        'defaultView' => 'mixed',
        'subcategoryListStyle' => 'string',
        'defaultTopPeriod' => 'string',
        'defaultListFilter' => 'string',
        'minimumRequiredTags' => 'int',
        'navigateToFirstPostAfterRead' => 'bool',
        'customFields' => 'object',
        'minTagsFromRequiredGroup' => 'int',
        'allowedTags' => 'array',
        'allowedTagGroups' => 'array',
        'allowGlobalTags' => 'bool',
        'requiredTagGroupName' => 'mixed',
        'readOnlyBanner' => 'mixed',
        'availableGroups' => 'array',
        'autoCloseHours' => 'mixed',
        'autoCloseBasedOnLastPost' => 'bool',
        'allowUnlimitedOwnerEditsOnFirstPost' => 'bool',
        'defaultSlowModeSeconds' => 'mixed',
        'groupPermissions' => 'array',
        'emailIn' => 'mixed',
        'emailInAllowStrangers' => 'bool',
        'mailinglistMirror' => 'bool',
        'allTopicsWiki' => 'bool',
        'canDelete' => 'bool',
        'allowBadges' => 'bool',
        'topicFeaturedLinkAllowed' => 'bool',
        'searchPriority' => 'int',
        'uploadedLogo' => 'mixed',
        'uploadedBackground' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'color' => null,
        'textColor' => null,
        'slug' => null,
        'topicCount' => null,
        'postCount' => null,
        'position' => null,
        'description' => null,
        'descriptionText' => null,
        'descriptionExcerpt' => null,
        'topicUrl' => null,
        'readRestricted' => null,
        'permission' => null,
        'notificationLevel' => null,
        'canEdit' => null,
        'topicTemplate' => null,
        'hasChildren' => null,
        'sortOrder' => null,
        'sortAscending' => null,
        'showSubcategoryList' => null,
        'numFeaturedTopics' => null,
        'defaultView' => null,
        'subcategoryListStyle' => null,
        'defaultTopPeriod' => null,
        'defaultListFilter' => null,
        'minimumRequiredTags' => null,
        'navigateToFirstPostAfterRead' => null,
        'customFields' => null,
        'minTagsFromRequiredGroup' => null,
        'allowedTags' => null,
        'allowedTagGroups' => null,
        'allowGlobalTags' => null,
        'requiredTagGroupName' => null,
        'readOnlyBanner' => null,
        'availableGroups' => null,
        'autoCloseHours' => null,
        'autoCloseBasedOnLastPost' => null,
        'allowUnlimitedOwnerEditsOnFirstPost' => null,
        'defaultSlowModeSeconds' => null,
        'groupPermissions' => null,
        'emailIn' => null,
        'emailInAllowStrangers' => null,
        'mailinglistMirror' => null,
        'allTopicsWiki' => null,
        'canDelete' => null,
        'allowBadges' => null,
        'topicFeaturedLinkAllowed' => null,
        'searchPriority' => null,
        'uploadedLogo' => null,
        'uploadedBackground' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'color' => 'color',
        'textColor' => 'text_color',
        'slug' => 'slug',
        'topicCount' => 'topic_count',
        'postCount' => 'post_count',
        'position' => 'position',
        'description' => 'description',
        'descriptionText' => 'description_text',
        'descriptionExcerpt' => 'description_excerpt',
        'topicUrl' => 'topic_url',
        'readRestricted' => 'read_restricted',
        'permission' => 'permission',
        'notificationLevel' => 'notification_level',
        'canEdit' => 'can_edit',
        'topicTemplate' => 'topic_template',
        'hasChildren' => 'has_children',
        'sortOrder' => 'sort_order',
        'sortAscending' => 'sort_ascending',
        'showSubcategoryList' => 'show_subcategory_list',
        'numFeaturedTopics' => 'num_featured_topics',
        'defaultView' => 'default_view',
        'subcategoryListStyle' => 'subcategory_list_style',
        'defaultTopPeriod' => 'default_top_period',
        'defaultListFilter' => 'default_list_filter',
        'minimumRequiredTags' => 'minimum_required_tags',
        'navigateToFirstPostAfterRead' => 'navigate_to_first_post_after_read',
        'customFields' => 'custom_fields',
        'minTagsFromRequiredGroup' => 'min_tags_from_required_group',
        'allowedTags' => 'allowed_tags',
        'allowedTagGroups' => 'allowed_tag_groups',
        'allowGlobalTags' => 'allow_global_tags',
        'requiredTagGroupName' => 'required_tag_group_name',
        'readOnlyBanner' => 'read_only_banner',
        'availableGroups' => 'available_groups',
        'autoCloseHours' => 'auto_close_hours',
        'autoCloseBasedOnLastPost' => 'auto_close_based_on_last_post',
        'allowUnlimitedOwnerEditsOnFirstPost' => 'allow_unlimited_owner_edits_on_first_post',
        'defaultSlowModeSeconds' => 'default_slow_mode_seconds',
        'groupPermissions' => 'group_permissions',
        'emailIn' => 'email_in',
        'emailInAllowStrangers' => 'email_in_allow_strangers',
        'mailinglistMirror' => 'mailinglist_mirror',
        'allTopicsWiki' => 'all_topics_wiki',
        'canDelete' => 'can_delete',
        'allowBadges' => 'allow_badges',
        'topicFeaturedLinkAllowed' => 'topic_featured_link_allowed',
        'searchPriority' => 'search_priority',
        'uploadedLogo' => 'uploaded_logo',
        'uploadedBackground' => 'uploaded_background'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'color' => 'setColor',
        'textColor' => 'setTextColor',
        'slug' => 'setSlug',
        'topicCount' => 'setTopicCount',
        'postCount' => 'setPostCount',
        'position' => 'setPosition',
        'description' => 'setDescription',
        'descriptionText' => 'setDescriptionText',
        'descriptionExcerpt' => 'setDescriptionExcerpt',
        'topicUrl' => 'setTopicUrl',
        'readRestricted' => 'setReadRestricted',
        'permission' => 'setPermission',
        'notificationLevel' => 'setNotificationLevel',
        'canEdit' => 'setCanEdit',
        'topicTemplate' => 'setTopicTemplate',
        'hasChildren' => 'setHasChildren',
        'sortOrder' => 'setSortOrder',
        'sortAscending' => 'setSortAscending',
        'showSubcategoryList' => 'setShowSubcategoryList',
        'numFeaturedTopics' => 'setNumFeaturedTopics',
        'defaultView' => 'setDefaultView',
        'subcategoryListStyle' => 'setSubcategoryListStyle',
        'defaultTopPeriod' => 'setDefaultTopPeriod',
        'defaultListFilter' => 'setDefaultListFilter',
        'minimumRequiredTags' => 'setMinimumRequiredTags',
        'navigateToFirstPostAfterRead' => 'setNavigateToFirstPostAfterRead',
        'customFields' => 'setCustomFields',
        'minTagsFromRequiredGroup' => 'setMinTagsFromRequiredGroup',
        'allowedTags' => 'setAllowedTags',
        'allowedTagGroups' => 'setAllowedTagGroups',
        'allowGlobalTags' => 'setAllowGlobalTags',
        'requiredTagGroupName' => 'setRequiredTagGroupName',
        'readOnlyBanner' => 'setReadOnlyBanner',
        'availableGroups' => 'setAvailableGroups',
        'autoCloseHours' => 'setAutoCloseHours',
        'autoCloseBasedOnLastPost' => 'setAutoCloseBasedOnLastPost',
        'allowUnlimitedOwnerEditsOnFirstPost' => 'setAllowUnlimitedOwnerEditsOnFirstPost',
        'defaultSlowModeSeconds' => 'setDefaultSlowModeSeconds',
        'groupPermissions' => 'setGroupPermissions',
        'emailIn' => 'setEmailIn',
        'emailInAllowStrangers' => 'setEmailInAllowStrangers',
        'mailinglistMirror' => 'setMailinglistMirror',
        'allTopicsWiki' => 'setAllTopicsWiki',
        'canDelete' => 'setCanDelete',
        'allowBadges' => 'setAllowBadges',
        'topicFeaturedLinkAllowed' => 'setTopicFeaturedLinkAllowed',
        'searchPriority' => 'setSearchPriority',
        'uploadedLogo' => 'setUploadedLogo',
        'uploadedBackground' => 'setUploadedBackground'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'color' => 'getColor',
        'textColor' => 'getTextColor',
        'slug' => 'getSlug',
        'topicCount' => 'getTopicCount',
        'postCount' => 'getPostCount',
        'position' => 'getPosition',
        'description' => 'getDescription',
        'descriptionText' => 'getDescriptionText',
        'descriptionExcerpt' => 'getDescriptionExcerpt',
        'topicUrl' => 'getTopicUrl',
        'readRestricted' => 'getReadRestricted',
        'permission' => 'getPermission',
        'notificationLevel' => 'getNotificationLevel',
        'canEdit' => 'getCanEdit',
        'topicTemplate' => 'getTopicTemplate',
        'hasChildren' => 'getHasChildren',
        'sortOrder' => 'getSortOrder',
        'sortAscending' => 'getSortAscending',
        'showSubcategoryList' => 'getShowSubcategoryList',
        'numFeaturedTopics' => 'getNumFeaturedTopics',
        'defaultView' => 'getDefaultView',
        'subcategoryListStyle' => 'getSubcategoryListStyle',
        'defaultTopPeriod' => 'getDefaultTopPeriod',
        'defaultListFilter' => 'getDefaultListFilter',
        'minimumRequiredTags' => 'getMinimumRequiredTags',
        'navigateToFirstPostAfterRead' => 'getNavigateToFirstPostAfterRead',
        'customFields' => 'getCustomFields',
        'minTagsFromRequiredGroup' => 'getMinTagsFromRequiredGroup',
        'allowedTags' => 'getAllowedTags',
        'allowedTagGroups' => 'getAllowedTagGroups',
        'allowGlobalTags' => 'getAllowGlobalTags',
        'requiredTagGroupName' => 'getRequiredTagGroupName',
        'readOnlyBanner' => 'getReadOnlyBanner',
        'availableGroups' => 'getAvailableGroups',
        'autoCloseHours' => 'getAutoCloseHours',
        'autoCloseBasedOnLastPost' => 'getAutoCloseBasedOnLastPost',
        'allowUnlimitedOwnerEditsOnFirstPost' => 'getAllowUnlimitedOwnerEditsOnFirstPost',
        'defaultSlowModeSeconds' => 'getDefaultSlowModeSeconds',
        'groupPermissions' => 'getGroupPermissions',
        'emailIn' => 'getEmailIn',
        'emailInAllowStrangers' => 'getEmailInAllowStrangers',
        'mailinglistMirror' => 'getMailinglistMirror',
        'allTopicsWiki' => 'getAllTopicsWiki',
        'canDelete' => 'getCanDelete',
        'allowBadges' => 'getAllowBadges',
        'topicFeaturedLinkAllowed' => 'getTopicFeaturedLinkAllowed',
        'searchPriority' => 'getSearchPriority',
        'uploadedLogo' => 'getUploadedLogo',
        'uploadedBackground' => 'getUploadedBackground'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['textColor'] = $data['textColor'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['topicCount'] = $data['topicCount'] ?? null;
        $this->container['postCount'] = $data['postCount'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['descriptionText'] = $data['descriptionText'] ?? null;
        $this->container['descriptionExcerpt'] = $data['descriptionExcerpt'] ?? null;
        $this->container['topicUrl'] = $data['topicUrl'] ?? null;
        $this->container['readRestricted'] = $data['readRestricted'] ?? null;
        $this->container['permission'] = $data['permission'] ?? null;
        $this->container['notificationLevel'] = $data['notificationLevel'] ?? null;
        $this->container['canEdit'] = $data['canEdit'] ?? null;
        $this->container['topicTemplate'] = $data['topicTemplate'] ?? null;
        $this->container['hasChildren'] = $data['hasChildren'] ?? null;
        $this->container['sortOrder'] = $data['sortOrder'] ?? null;
        $this->container['sortAscending'] = $data['sortAscending'] ?? null;
        $this->container['showSubcategoryList'] = $data['showSubcategoryList'] ?? null;
        $this->container['numFeaturedTopics'] = $data['numFeaturedTopics'] ?? null;
        $this->container['defaultView'] = $data['defaultView'] ?? null;
        $this->container['subcategoryListStyle'] = $data['subcategoryListStyle'] ?? null;
        $this->container['defaultTopPeriod'] = $data['defaultTopPeriod'] ?? null;
        $this->container['defaultListFilter'] = $data['defaultListFilter'] ?? null;
        $this->container['minimumRequiredTags'] = $data['minimumRequiredTags'] ?? null;
        $this->container['navigateToFirstPostAfterRead'] = $data['navigateToFirstPostAfterRead'] ?? null;
        $this->container['customFields'] = $data['customFields'] ?? null;
        $this->container['minTagsFromRequiredGroup'] = $data['minTagsFromRequiredGroup'] ?? null;
        $this->container['allowedTags'] = $data['allowedTags'] ?? null;
        $this->container['allowedTagGroups'] = $data['allowedTagGroups'] ?? null;
        $this->container['allowGlobalTags'] = $data['allowGlobalTags'] ?? null;
        $this->container['requiredTagGroupName'] = $data['requiredTagGroupName'] ?? null;
        $this->container['readOnlyBanner'] = $data['readOnlyBanner'] ?? null;
        $this->container['availableGroups'] = $data['availableGroups'] ?? null;
        $this->container['autoCloseHours'] = $data['autoCloseHours'] ?? null;
        $this->container['autoCloseBasedOnLastPost'] = $data['autoCloseBasedOnLastPost'] ?? null;
        $this->container['allowUnlimitedOwnerEditsOnFirstPost'] = $data['allowUnlimitedOwnerEditsOnFirstPost'] ?? null;
        $this->container['defaultSlowModeSeconds'] = $data['defaultSlowModeSeconds'] ?? null;
        $this->container['groupPermissions'] = $data['groupPermissions'] ?? null;
        $this->container['emailIn'] = $data['emailIn'] ?? null;
        $this->container['emailInAllowStrangers'] = $data['emailInAllowStrangers'] ?? null;
        $this->container['mailinglistMirror'] = $data['mailinglistMirror'] ?? null;
        $this->container['allTopicsWiki'] = $data['allTopicsWiki'] ?? null;
        $this->container['canDelete'] = $data['canDelete'] ?? null;
        $this->container['allowBadges'] = $data['allowBadges'] ?? null;
        $this->container['topicFeaturedLinkAllowed'] = $data['topicFeaturedLinkAllowed'] ?? null;
        $this->container['searchPriority'] = $data['searchPriority'] ?? null;
        $this->container['uploadedLogo'] = $data['uploadedLogo'] ?? null;
        $this->container['uploadedBackground'] = $data['uploadedBackground'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['textColor'] === null) {
            $invalidProperties[] = "'textColor' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['topicCount'] === null) {
            $invalidProperties[] = "'topicCount' can't be null";
        }
        if ($this->container['postCount'] === null) {
            $invalidProperties[] = "'postCount' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['descriptionText'] === null) {
            $invalidProperties[] = "'descriptionText' can't be null";
        }
        if ($this->container['descriptionExcerpt'] === null) {
            $invalidProperties[] = "'descriptionExcerpt' can't be null";
        }
        if ($this->container['topicUrl'] === null) {
            $invalidProperties[] = "'topicUrl' can't be null";
        }
        if ($this->container['readRestricted'] === null) {
            $invalidProperties[] = "'readRestricted' can't be null";
        }
        if ($this->container['permission'] === null) {
            $invalidProperties[] = "'permission' can't be null";
        }
        if ($this->container['notificationLevel'] === null) {
            $invalidProperties[] = "'notificationLevel' can't be null";
        }
        if ($this->container['canEdit'] === null) {
            $invalidProperties[] = "'canEdit' can't be null";
        }
        if ($this->container['topicTemplate'] === null) {
            $invalidProperties[] = "'topicTemplate' can't be null";
        }
        if ($this->container['hasChildren'] === null) {
            $invalidProperties[] = "'hasChildren' can't be null";
        }
        if ($this->container['sortOrder'] === null) {
            $invalidProperties[] = "'sortOrder' can't be null";
        }
        if ($this->container['sortAscending'] === null) {
            $invalidProperties[] = "'sortAscending' can't be null";
        }
        if ($this->container['showSubcategoryList'] === null) {
            $invalidProperties[] = "'showSubcategoryList' can't be null";
        }
        if ($this->container['numFeaturedTopics'] === null) {
            $invalidProperties[] = "'numFeaturedTopics' can't be null";
        }
        if ($this->container['defaultView'] === null) {
            $invalidProperties[] = "'defaultView' can't be null";
        }
        if ($this->container['subcategoryListStyle'] === null) {
            $invalidProperties[] = "'subcategoryListStyle' can't be null";
        }
        if ($this->container['defaultTopPeriod'] === null) {
            $invalidProperties[] = "'defaultTopPeriod' can't be null";
        }
        if ($this->container['defaultListFilter'] === null) {
            $invalidProperties[] = "'defaultListFilter' can't be null";
        }
        if ($this->container['minimumRequiredTags'] === null) {
            $invalidProperties[] = "'minimumRequiredTags' can't be null";
        }
        if ($this->container['navigateToFirstPostAfterRead'] === null) {
            $invalidProperties[] = "'navigateToFirstPostAfterRead' can't be null";
        }
        if ($this->container['customFields'] === null) {
            $invalidProperties[] = "'customFields' can't be null";
        }
        if ($this->container['minTagsFromRequiredGroup'] === null) {
            $invalidProperties[] = "'minTagsFromRequiredGroup' can't be null";
        }
        if ($this->container['requiredTagGroupName'] === null) {
            $invalidProperties[] = "'requiredTagGroupName' can't be null";
        }
        if ($this->container['readOnlyBanner'] === null) {
            $invalidProperties[] = "'readOnlyBanner' can't be null";
        }
        if ($this->container['availableGroups'] === null) {
            $invalidProperties[] = "'availableGroups' can't be null";
        }
        if ($this->container['autoCloseHours'] === null) {
            $invalidProperties[] = "'autoCloseHours' can't be null";
        }
        if ($this->container['autoCloseBasedOnLastPost'] === null) {
            $invalidProperties[] = "'autoCloseBasedOnLastPost' can't be null";
        }
        if ($this->container['allowUnlimitedOwnerEditsOnFirstPost'] === null) {
            $invalidProperties[] = "'allowUnlimitedOwnerEditsOnFirstPost' can't be null";
        }
        if ($this->container['defaultSlowModeSeconds'] === null) {
            $invalidProperties[] = "'defaultSlowModeSeconds' can't be null";
        }
        if ($this->container['groupPermissions'] === null) {
            $invalidProperties[] = "'groupPermissions' can't be null";
        }
        if ($this->container['emailIn'] === null) {
            $invalidProperties[] = "'emailIn' can't be null";
        }
        if ($this->container['emailInAllowStrangers'] === null) {
            $invalidProperties[] = "'emailInAllowStrangers' can't be null";
        }
        if ($this->container['mailinglistMirror'] === null) {
            $invalidProperties[] = "'mailinglistMirror' can't be null";
        }
        if ($this->container['allTopicsWiki'] === null) {
            $invalidProperties[] = "'allTopicsWiki' can't be null";
        }
        if ($this->container['canDelete'] === null) {
            $invalidProperties[] = "'canDelete' can't be null";
        }
        if ($this->container['allowBadges'] === null) {
            $invalidProperties[] = "'allowBadges' can't be null";
        }
        if ($this->container['topicFeaturedLinkAllowed'] === null) {
            $invalidProperties[] = "'topicFeaturedLinkAllowed' can't be null";
        }
        if ($this->container['searchPriority'] === null) {
            $invalidProperties[] = "'searchPriority' can't be null";
        }
        if ($this->container['uploadedLogo'] === null) {
            $invalidProperties[] = "'uploadedLogo' can't be null";
        }
        if ($this->container['uploadedBackground'] === null) {
            $invalidProperties[] = "'uploadedBackground' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets textColor
     *
     * @return string
     */
    public function getTextColor()
    {
        return $this->container['textColor'];
    }

    /**
     * Sets textColor
     *
     * @param string $textColor textColor
     *
     * @return self
     */
    public function setTextColor($textColor)
    {
        $this->container['textColor'] = $textColor;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets topicCount
     *
     * @return int
     */
    public function getTopicCount()
    {
        return $this->container['topicCount'];
    }

    /**
     * Sets topicCount
     *
     * @param int $topicCount topicCount
     *
     * @return self
     */
    public function setTopicCount($topicCount)
    {
        $this->container['topicCount'] = $topicCount;

        return $this;
    }

    /**
     * Gets postCount
     *
     * @return int
     */
    public function getPostCount()
    {
        return $this->container['postCount'];
    }

    /**
     * Sets postCount
     *
     * @param int $postCount postCount
     *
     * @return self
     */
    public function setPostCount($postCount)
    {
        $this->container['postCount'] = $postCount;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionText
     *
     * @return mixed
     */
    public function getDescriptionText()
    {
        return $this->container['descriptionText'];
    }

    /**
     * Sets descriptionText
     *
     * @param mixed $descriptionText descriptionText
     *
     * @return self
     */
    public function setDescriptionText($descriptionText)
    {
        $this->container['descriptionText'] = $descriptionText;

        return $this;
    }

    /**
     * Gets descriptionExcerpt
     *
     * @return mixed
     */
    public function getDescriptionExcerpt()
    {
        return $this->container['descriptionExcerpt'];
    }

    /**
     * Sets descriptionExcerpt
     *
     * @param mixed $descriptionExcerpt descriptionExcerpt
     *
     * @return self
     */
    public function setDescriptionExcerpt($descriptionExcerpt)
    {
        $this->container['descriptionExcerpt'] = $descriptionExcerpt;

        return $this;
    }

    /**
     * Gets topicUrl
     *
     * @return mixed
     */
    public function getTopicUrl()
    {
        return $this->container['topicUrl'];
    }

    /**
     * Sets topicUrl
     *
     * @param mixed $topicUrl topicUrl
     *
     * @return self
     */
    public function setTopicUrl($topicUrl)
    {
        $this->container['topicUrl'] = $topicUrl;

        return $this;
    }

    /**
     * Gets readRestricted
     *
     * @return bool
     */
    public function getReadRestricted()
    {
        return $this->container['readRestricted'];
    }

    /**
     * Sets readRestricted
     *
     * @param bool $readRestricted readRestricted
     *
     * @return self
     */
    public function setReadRestricted($readRestricted)
    {
        $this->container['readRestricted'] = $readRestricted;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return mixed
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     *
     * @param mixed $permission permission
     *
     * @return self
     */
    public function setPermission($permission)
    {
        $this->container['permission'] = $permission;

        return $this;
    }

    /**
     * Gets notificationLevel
     *
     * @return int
     */
    public function getNotificationLevel()
    {
        return $this->container['notificationLevel'];
    }

    /**
     * Sets notificationLevel
     *
     * @param int $notificationLevel notificationLevel
     *
     * @return self
     */
    public function setNotificationLevel($notificationLevel)
    {
        $this->container['notificationLevel'] = $notificationLevel;

        return $this;
    }

    /**
     * Gets canEdit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['canEdit'];
    }

    /**
     * Sets canEdit
     *
     * @param bool $canEdit canEdit
     *
     * @return self
     */
    public function setCanEdit($canEdit)
    {
        $this->container['canEdit'] = $canEdit;

        return $this;
    }

    /**
     * Gets topicTemplate
     *
     * @return mixed
     */
    public function getTopicTemplate()
    {
        return $this->container['topicTemplate'];
    }

    /**
     * Sets topicTemplate
     *
     * @param mixed $topicTemplate topicTemplate
     *
     * @return self
     */
    public function setTopicTemplate($topicTemplate)
    {
        $this->container['topicTemplate'] = $topicTemplate;

        return $this;
    }

    /**
     * Gets hasChildren
     *
     * @return mixed
     */
    public function getHasChildren()
    {
        return $this->container['hasChildren'];
    }

    /**
     * Sets hasChildren
     *
     * @param mixed $hasChildren hasChildren
     *
     * @return self
     */
    public function setHasChildren($hasChildren)
    {
        $this->container['hasChildren'] = $hasChildren;

        return $this;
    }

    /**
     * Gets sortOrder
     *
     * @return mixed
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     *
     * @param mixed $sortOrder sortOrder
     *
     * @return self
     */
    public function setSortOrder($sortOrder)
    {
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets sortAscending
     *
     * @return mixed
     */
    public function getSortAscending()
    {
        return $this->container['sortAscending'];
    }

    /**
     * Sets sortAscending
     *
     * @param mixed $sortAscending sortAscending
     *
     * @return self
     */
    public function setSortAscending($sortAscending)
    {
        $this->container['sortAscending'] = $sortAscending;

        return $this;
    }

    /**
     * Gets showSubcategoryList
     *
     * @return bool
     */
    public function getShowSubcategoryList()
    {
        return $this->container['showSubcategoryList'];
    }

    /**
     * Sets showSubcategoryList
     *
     * @param bool $showSubcategoryList showSubcategoryList
     *
     * @return self
     */
    public function setShowSubcategoryList($showSubcategoryList)
    {
        $this->container['showSubcategoryList'] = $showSubcategoryList;

        return $this;
    }

    /**
     * Gets numFeaturedTopics
     *
     * @return int
     */
    public function getNumFeaturedTopics()
    {
        return $this->container['numFeaturedTopics'];
    }

    /**
     * Sets numFeaturedTopics
     *
     * @param int $numFeaturedTopics numFeaturedTopics
     *
     * @return self
     */
    public function setNumFeaturedTopics($numFeaturedTopics)
    {
        $this->container['numFeaturedTopics'] = $numFeaturedTopics;

        return $this;
    }

    /**
     * Gets defaultView
     *
     * @return mixed
     */
    public function getDefaultView()
    {
        return $this->container['defaultView'];
    }

    /**
     * Sets defaultView
     *
     * @param mixed $defaultView defaultView
     *
     * @return self
     */
    public function setDefaultView($defaultView)
    {
        $this->container['defaultView'] = $defaultView;

        return $this;
    }

    /**
     * Gets subcategoryListStyle
     *
     * @return string
     */
    public function getSubcategoryListStyle()
    {
        return $this->container['subcategoryListStyle'];
    }

    /**
     * Sets subcategoryListStyle
     *
     * @param string $subcategoryListStyle subcategoryListStyle
     *
     * @return self
     */
    public function setSubcategoryListStyle($subcategoryListStyle)
    {
        $this->container['subcategoryListStyle'] = $subcategoryListStyle;

        return $this;
    }

    /**
     * Gets defaultTopPeriod
     *
     * @return string
     */
    public function getDefaultTopPeriod()
    {
        return $this->container['defaultTopPeriod'];
    }

    /**
     * Sets defaultTopPeriod
     *
     * @param string $defaultTopPeriod defaultTopPeriod
     *
     * @return self
     */
    public function setDefaultTopPeriod($defaultTopPeriod)
    {
        $this->container['defaultTopPeriod'] = $defaultTopPeriod;

        return $this;
    }

    /**
     * Gets defaultListFilter
     *
     * @return string
     */
    public function getDefaultListFilter()
    {
        return $this->container['defaultListFilter'];
    }

    /**
     * Sets defaultListFilter
     *
     * @param string $defaultListFilter defaultListFilter
     *
     * @return self
     */
    public function setDefaultListFilter($defaultListFilter)
    {
        $this->container['defaultListFilter'] = $defaultListFilter;

        return $this;
    }

    /**
     * Gets minimumRequiredTags
     *
     * @return int
     */
    public function getMinimumRequiredTags()
    {
        return $this->container['minimumRequiredTags'];
    }

    /**
     * Sets minimumRequiredTags
     *
     * @param int $minimumRequiredTags minimumRequiredTags
     *
     * @return self
     */
    public function setMinimumRequiredTags($minimumRequiredTags)
    {
        $this->container['minimumRequiredTags'] = $minimumRequiredTags;

        return $this;
    }

    /**
     * Gets navigateToFirstPostAfterRead
     *
     * @return bool
     */
    public function getNavigateToFirstPostAfterRead()
    {
        return $this->container['navigateToFirstPostAfterRead'];
    }

    /**
     * Sets navigateToFirstPostAfterRead
     *
     * @param bool $navigateToFirstPostAfterRead navigateToFirstPostAfterRead
     *
     * @return self
     */
    public function setNavigateToFirstPostAfterRead($navigateToFirstPostAfterRead)
    {
        $this->container['navigateToFirstPostAfterRead'] = $navigateToFirstPostAfterRead;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param object $customFields customFields
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets minTagsFromRequiredGroup
     *
     * @return int
     */
    public function getMinTagsFromRequiredGroup()
    {
        return $this->container['minTagsFromRequiredGroup'];
    }

    /**
     * Sets minTagsFromRequiredGroup
     *
     * @param int $minTagsFromRequiredGroup minTagsFromRequiredGroup
     *
     * @return self
     */
    public function setMinTagsFromRequiredGroup($minTagsFromRequiredGroup)
    {
        $this->container['minTagsFromRequiredGroup'] = $minTagsFromRequiredGroup;

        return $this;
    }

    /**
     * Gets allowedTags
     *
     * @return array|null
     */
    public function getAllowedTags()
    {
        return $this->container['allowedTags'];
    }

    /**
     * Sets allowedTags
     *
     * @param array|null $allowedTags allowedTags
     *
     * @return self
     */
    public function setAllowedTags($allowedTags)
    {
        $this->container['allowedTags'] = $allowedTags;

        return $this;
    }

    /**
     * Gets allowedTagGroups
     *
     * @return array|null
     */
    public function getAllowedTagGroups()
    {
        return $this->container['allowedTagGroups'];
    }

    /**
     * Sets allowedTagGroups
     *
     * @param array|null $allowedTagGroups allowedTagGroups
     *
     * @return self
     */
    public function setAllowedTagGroups($allowedTagGroups)
    {
        $this->container['allowedTagGroups'] = $allowedTagGroups;

        return $this;
    }

    /**
     * Gets allowGlobalTags
     *
     * @return bool|null
     */
    public function getAllowGlobalTags()
    {
        return $this->container['allowGlobalTags'];
    }

    /**
     * Sets allowGlobalTags
     *
     * @param bool|null $allowGlobalTags allowGlobalTags
     *
     * @return self
     */
    public function setAllowGlobalTags($allowGlobalTags)
    {
        $this->container['allowGlobalTags'] = $allowGlobalTags;

        return $this;
    }

    /**
     * Gets requiredTagGroupName
     *
     * @return mixed
     */
    public function getRequiredTagGroupName()
    {
        return $this->container['requiredTagGroupName'];
    }

    /**
     * Sets requiredTagGroupName
     *
     * @param mixed $requiredTagGroupName requiredTagGroupName
     *
     * @return self
     */
    public function setRequiredTagGroupName($requiredTagGroupName)
    {
        $this->container['requiredTagGroupName'] = $requiredTagGroupName;

        return $this;
    }

    /**
     * Gets readOnlyBanner
     *
     * @return mixed
     */
    public function getReadOnlyBanner()
    {
        return $this->container['readOnlyBanner'];
    }

    /**
     * Sets readOnlyBanner
     *
     * @param mixed $readOnlyBanner readOnlyBanner
     *
     * @return self
     */
    public function setReadOnlyBanner($readOnlyBanner)
    {
        $this->container['readOnlyBanner'] = $readOnlyBanner;

        return $this;
    }

    /**
     * Gets availableGroups
     *
     * @return array
     */
    public function getAvailableGroups()
    {
        return $this->container['availableGroups'];
    }

    /**
     * Sets availableGroups
     *
     * @param array $availableGroups availableGroups
     *
     * @return self
     */
    public function setAvailableGroups($availableGroups)
    {
        $this->container['availableGroups'] = $availableGroups;

        return $this;
    }

    /**
     * Gets autoCloseHours
     *
     * @return mixed
     */
    public function getAutoCloseHours()
    {
        return $this->container['autoCloseHours'];
    }

    /**
     * Sets autoCloseHours
     *
     * @param mixed $autoCloseHours autoCloseHours
     *
     * @return self
     */
    public function setAutoCloseHours($autoCloseHours)
    {
        $this->container['autoCloseHours'] = $autoCloseHours;

        return $this;
    }

    /**
     * Gets autoCloseBasedOnLastPost
     *
     * @return bool
     */
    public function getAutoCloseBasedOnLastPost()
    {
        return $this->container['autoCloseBasedOnLastPost'];
    }

    /**
     * Sets autoCloseBasedOnLastPost
     *
     * @param bool $autoCloseBasedOnLastPost autoCloseBasedOnLastPost
     *
     * @return self
     */
    public function setAutoCloseBasedOnLastPost($autoCloseBasedOnLastPost)
    {
        $this->container['autoCloseBasedOnLastPost'] = $autoCloseBasedOnLastPost;

        return $this;
    }

    /**
     * Gets allowUnlimitedOwnerEditsOnFirstPost
     *
     * @return bool
     */
    public function getAllowUnlimitedOwnerEditsOnFirstPost()
    {
        return $this->container['allowUnlimitedOwnerEditsOnFirstPost'];
    }

    /**
     * Sets allowUnlimitedOwnerEditsOnFirstPost
     *
     * @param bool $allowUnlimitedOwnerEditsOnFirstPost allowUnlimitedOwnerEditsOnFirstPost
     *
     * @return self
     */
    public function setAllowUnlimitedOwnerEditsOnFirstPost($allowUnlimitedOwnerEditsOnFirstPost)
    {
        $this->container['allowUnlimitedOwnerEditsOnFirstPost'] = $allowUnlimitedOwnerEditsOnFirstPost;

        return $this;
    }

    /**
     * Gets defaultSlowModeSeconds
     *
     * @return mixed
     */
    public function getDefaultSlowModeSeconds()
    {
        return $this->container['defaultSlowModeSeconds'];
    }

    /**
     * Sets defaultSlowModeSeconds
     *
     * @param mixed $defaultSlowModeSeconds defaultSlowModeSeconds
     *
     * @return self
     */
    public function setDefaultSlowModeSeconds($defaultSlowModeSeconds)
    {
        $this->container['defaultSlowModeSeconds'] = $defaultSlowModeSeconds;

        return $this;
    }

    /**
     * Gets groupPermissions
     *
     * @return array
     */
    public function getGroupPermissions()
    {
        return $this->container['groupPermissions'];
    }

    /**
     * Sets groupPermissions
     *
     * @param array $groupPermissions groupPermissions
     *
     * @return self
     */
    public function setGroupPermissions($groupPermissions)
    {
        $this->container['groupPermissions'] = $groupPermissions;

        return $this;
    }

    /**
     * Gets emailIn
     *
     * @return mixed
     */
    public function getEmailIn()
    {
        return $this->container['emailIn'];
    }

    /**
     * Sets emailIn
     *
     * @param mixed $emailIn emailIn
     *
     * @return self
     */
    public function setEmailIn($emailIn)
    {
        $this->container['emailIn'] = $emailIn;

        return $this;
    }

    /**
     * Gets emailInAllowStrangers
     *
     * @return bool
     */
    public function getEmailInAllowStrangers()
    {
        return $this->container['emailInAllowStrangers'];
    }

    /**
     * Sets emailInAllowStrangers
     *
     * @param bool $emailInAllowStrangers emailInAllowStrangers
     *
     * @return self
     */
    public function setEmailInAllowStrangers($emailInAllowStrangers)
    {
        $this->container['emailInAllowStrangers'] = $emailInAllowStrangers;

        return $this;
    }

    /**
     * Gets mailinglistMirror
     *
     * @return bool
     */
    public function getMailinglistMirror()
    {
        return $this->container['mailinglistMirror'];
    }

    /**
     * Sets mailinglistMirror
     *
     * @param bool $mailinglistMirror mailinglistMirror
     *
     * @return self
     */
    public function setMailinglistMirror($mailinglistMirror)
    {
        $this->container['mailinglistMirror'] = $mailinglistMirror;

        return $this;
    }

    /**
     * Gets allTopicsWiki
     *
     * @return bool
     */
    public function getAllTopicsWiki()
    {
        return $this->container['allTopicsWiki'];
    }

    /**
     * Sets allTopicsWiki
     *
     * @param bool $allTopicsWiki allTopicsWiki
     *
     * @return self
     */
    public function setAllTopicsWiki($allTopicsWiki)
    {
        $this->container['allTopicsWiki'] = $allTopicsWiki;

        return $this;
    }

    /**
     * Gets canDelete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['canDelete'];
    }

    /**
     * Sets canDelete
     *
     * @param bool $canDelete canDelete
     *
     * @return self
     */
    public function setCanDelete($canDelete)
    {
        $this->container['canDelete'] = $canDelete;

        return $this;
    }

    /**
     * Gets allowBadges
     *
     * @return bool
     */
    public function getAllowBadges()
    {
        return $this->container['allowBadges'];
    }

    /**
     * Sets allowBadges
     *
     * @param bool $allowBadges allowBadges
     *
     * @return self
     */
    public function setAllowBadges($allowBadges)
    {
        $this->container['allowBadges'] = $allowBadges;

        return $this;
    }

    /**
     * Gets topicFeaturedLinkAllowed
     *
     * @return bool
     */
    public function getTopicFeaturedLinkAllowed()
    {
        return $this->container['topicFeaturedLinkAllowed'];
    }

    /**
     * Sets topicFeaturedLinkAllowed
     *
     * @param bool $topicFeaturedLinkAllowed topicFeaturedLinkAllowed
     *
     * @return self
     */
    public function setTopicFeaturedLinkAllowed($topicFeaturedLinkAllowed)
    {
        $this->container['topicFeaturedLinkAllowed'] = $topicFeaturedLinkAllowed;

        return $this;
    }

    /**
     * Gets searchPriority
     *
     * @return int
     */
    public function getSearchPriority()
    {
        return $this->container['searchPriority'];
    }

    /**
     * Sets searchPriority
     *
     * @param int $searchPriority searchPriority
     *
     * @return self
     */
    public function setSearchPriority($searchPriority)
    {
        $this->container['searchPriority'] = $searchPriority;

        return $this;
    }

    /**
     * Gets uploadedLogo
     *
     * @return mixed
     */
    public function getUploadedLogo()
    {
        return $this->container['uploadedLogo'];
    }

    /**
     * Sets uploadedLogo
     *
     * @param mixed $uploadedLogo uploadedLogo
     *
     * @return self
     */
    public function setUploadedLogo($uploadedLogo)
    {
        $this->container['uploadedLogo'] = $uploadedLogo;

        return $this;
    }

    /**
     * Gets uploadedBackground
     *
     * @return mixed
     */
    public function getUploadedBackground()
    {
        return $this->container['uploadedBackground'];
    }

    /**
     * Sets uploadedBackground
     *
     * @param mixed $uploadedBackground uploadedBackground
     *
     * @return self
     */
    public function setUploadedBackground($uploadedBackground)
    {
        $this->container['uploadedBackground'] = $uploadedBackground;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


