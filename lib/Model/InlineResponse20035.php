<?php
/**
 * InlineResponse20035
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20035 Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20035 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_35';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'postStream' => '\InfinityFree\DiscourseApi\Model\InlineResponse20035PostStream',
        'timelineLookup' => 'mixed[]',
        'suggestedTopics' => '\InfinityFree\DiscourseApi\Model\InlineResponse20035SuggestedTopics[]',
        'id' => 'int',
        'title' => 'string',
        'fancyTitle' => 'string',
        'postsCount' => 'int',
        'createdAt' => 'string',
        'views' => 'int',
        'replyCount' => 'int',
        'likeCount' => 'int',
        'lastPostedAt' => 'mixed',
        'visible' => 'bool',
        'closed' => 'bool',
        'archived' => 'bool',
        'hasSummary' => 'bool',
        'archetype' => 'string',
        'slug' => 'string',
        'categoryId' => 'int',
        'wordCount' => 'mixed',
        'deletedAt' => 'mixed',
        'userId' => 'int',
        'featuredLink' => 'mixed',
        'pinnedGlobally' => 'bool',
        'pinnedAt' => 'mixed',
        'pinnedUntil' => 'mixed',
        'imageUrl' => 'mixed',
        'draft' => 'mixed',
        'draftKey' => 'string',
        'draftSequence' => 'int',
        'unpinned' => 'mixed',
        'pinned' => 'bool',
        'currentPostNumber' => 'int',
        'highestPostNumber' => 'mixed',
        'deletedBy' => 'mixed',
        'hasDeleted' => 'bool',
        'actionsSummary' => '\InfinityFree\DiscourseApi\Model\InlineResponse20035ActionsSummary[]',
        'chunkSize' => 'int',
        'bookmarked' => 'bool',
        'topicTimer' => 'mixed',
        'messageBusLastId' => 'int',
        'participantCount' => 'int',
        'showReadIndicator' => 'bool',
        'thumbnails' => 'mixed',
        'details' => '\InfinityFree\DiscourseApi\Model\InlineResponse20035Details'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'postStream' => null,
        'timelineLookup' => null,
        'suggestedTopics' => null,
        'id' => null,
        'title' => null,
        'fancyTitle' => null,
        'postsCount' => null,
        'createdAt' => null,
        'views' => null,
        'replyCount' => null,
        'likeCount' => null,
        'lastPostedAt' => null,
        'visible' => null,
        'closed' => null,
        'archived' => null,
        'hasSummary' => null,
        'archetype' => null,
        'slug' => null,
        'categoryId' => null,
        'wordCount' => null,
        'deletedAt' => null,
        'userId' => null,
        'featuredLink' => null,
        'pinnedGlobally' => null,
        'pinnedAt' => null,
        'pinnedUntil' => null,
        'imageUrl' => null,
        'draft' => null,
        'draftKey' => null,
        'draftSequence' => null,
        'unpinned' => null,
        'pinned' => null,
        'currentPostNumber' => null,
        'highestPostNumber' => null,
        'deletedBy' => null,
        'hasDeleted' => null,
        'actionsSummary' => null,
        'chunkSize' => null,
        'bookmarked' => null,
        'topicTimer' => null,
        'messageBusLastId' => null,
        'participantCount' => null,
        'showReadIndicator' => null,
        'thumbnails' => null,
        'details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'postStream' => 'post_stream',
        'timelineLookup' => 'timeline_lookup',
        'suggestedTopics' => 'suggested_topics',
        'id' => 'id',
        'title' => 'title',
        'fancyTitle' => 'fancy_title',
        'postsCount' => 'posts_count',
        'createdAt' => 'created_at',
        'views' => 'views',
        'replyCount' => 'reply_count',
        'likeCount' => 'like_count',
        'lastPostedAt' => 'last_posted_at',
        'visible' => 'visible',
        'closed' => 'closed',
        'archived' => 'archived',
        'hasSummary' => 'has_summary',
        'archetype' => 'archetype',
        'slug' => 'slug',
        'categoryId' => 'category_id',
        'wordCount' => 'word_count',
        'deletedAt' => 'deleted_at',
        'userId' => 'user_id',
        'featuredLink' => 'featured_link',
        'pinnedGlobally' => 'pinned_globally',
        'pinnedAt' => 'pinned_at',
        'pinnedUntil' => 'pinned_until',
        'imageUrl' => 'image_url',
        'draft' => 'draft',
        'draftKey' => 'draft_key',
        'draftSequence' => 'draft_sequence',
        'unpinned' => 'unpinned',
        'pinned' => 'pinned',
        'currentPostNumber' => 'current_post_number',
        'highestPostNumber' => 'highest_post_number',
        'deletedBy' => 'deleted_by',
        'hasDeleted' => 'has_deleted',
        'actionsSummary' => 'actions_summary',
        'chunkSize' => 'chunk_size',
        'bookmarked' => 'bookmarked',
        'topicTimer' => 'topic_timer',
        'messageBusLastId' => 'message_bus_last_id',
        'participantCount' => 'participant_count',
        'showReadIndicator' => 'show_read_indicator',
        'thumbnails' => 'thumbnails',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'postStream' => 'setPostStream',
        'timelineLookup' => 'setTimelineLookup',
        'suggestedTopics' => 'setSuggestedTopics',
        'id' => 'setId',
        'title' => 'setTitle',
        'fancyTitle' => 'setFancyTitle',
        'postsCount' => 'setPostsCount',
        'createdAt' => 'setCreatedAt',
        'views' => 'setViews',
        'replyCount' => 'setReplyCount',
        'likeCount' => 'setLikeCount',
        'lastPostedAt' => 'setLastPostedAt',
        'visible' => 'setVisible',
        'closed' => 'setClosed',
        'archived' => 'setArchived',
        'hasSummary' => 'setHasSummary',
        'archetype' => 'setArchetype',
        'slug' => 'setSlug',
        'categoryId' => 'setCategoryId',
        'wordCount' => 'setWordCount',
        'deletedAt' => 'setDeletedAt',
        'userId' => 'setUserId',
        'featuredLink' => 'setFeaturedLink',
        'pinnedGlobally' => 'setPinnedGlobally',
        'pinnedAt' => 'setPinnedAt',
        'pinnedUntil' => 'setPinnedUntil',
        'imageUrl' => 'setImageUrl',
        'draft' => 'setDraft',
        'draftKey' => 'setDraftKey',
        'draftSequence' => 'setDraftSequence',
        'unpinned' => 'setUnpinned',
        'pinned' => 'setPinned',
        'currentPostNumber' => 'setCurrentPostNumber',
        'highestPostNumber' => 'setHighestPostNumber',
        'deletedBy' => 'setDeletedBy',
        'hasDeleted' => 'setHasDeleted',
        'actionsSummary' => 'setActionsSummary',
        'chunkSize' => 'setChunkSize',
        'bookmarked' => 'setBookmarked',
        'topicTimer' => 'setTopicTimer',
        'messageBusLastId' => 'setMessageBusLastId',
        'participantCount' => 'setParticipantCount',
        'showReadIndicator' => 'setShowReadIndicator',
        'thumbnails' => 'setThumbnails',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'postStream' => 'getPostStream',
        'timelineLookup' => 'getTimelineLookup',
        'suggestedTopics' => 'getSuggestedTopics',
        'id' => 'getId',
        'title' => 'getTitle',
        'fancyTitle' => 'getFancyTitle',
        'postsCount' => 'getPostsCount',
        'createdAt' => 'getCreatedAt',
        'views' => 'getViews',
        'replyCount' => 'getReplyCount',
        'likeCount' => 'getLikeCount',
        'lastPostedAt' => 'getLastPostedAt',
        'visible' => 'getVisible',
        'closed' => 'getClosed',
        'archived' => 'getArchived',
        'hasSummary' => 'getHasSummary',
        'archetype' => 'getArchetype',
        'slug' => 'getSlug',
        'categoryId' => 'getCategoryId',
        'wordCount' => 'getWordCount',
        'deletedAt' => 'getDeletedAt',
        'userId' => 'getUserId',
        'featuredLink' => 'getFeaturedLink',
        'pinnedGlobally' => 'getPinnedGlobally',
        'pinnedAt' => 'getPinnedAt',
        'pinnedUntil' => 'getPinnedUntil',
        'imageUrl' => 'getImageUrl',
        'draft' => 'getDraft',
        'draftKey' => 'getDraftKey',
        'draftSequence' => 'getDraftSequence',
        'unpinned' => 'getUnpinned',
        'pinned' => 'getPinned',
        'currentPostNumber' => 'getCurrentPostNumber',
        'highestPostNumber' => 'getHighestPostNumber',
        'deletedBy' => 'getDeletedBy',
        'hasDeleted' => 'getHasDeleted',
        'actionsSummary' => 'getActionsSummary',
        'chunkSize' => 'getChunkSize',
        'bookmarked' => 'getBookmarked',
        'topicTimer' => 'getTopicTimer',
        'messageBusLastId' => 'getMessageBusLastId',
        'participantCount' => 'getParticipantCount',
        'showReadIndicator' => 'getShowReadIndicator',
        'thumbnails' => 'getThumbnails',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['postStream'] = $data['postStream'] ?? null;
        $this->container['timelineLookup'] = $data['timelineLookup'] ?? null;
        $this->container['suggestedTopics'] = $data['suggestedTopics'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['fancyTitle'] = $data['fancyTitle'] ?? null;
        $this->container['postsCount'] = $data['postsCount'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['views'] = $data['views'] ?? null;
        $this->container['replyCount'] = $data['replyCount'] ?? null;
        $this->container['likeCount'] = $data['likeCount'] ?? null;
        $this->container['lastPostedAt'] = $data['lastPostedAt'] ?? null;
        $this->container['visible'] = $data['visible'] ?? null;
        $this->container['closed'] = $data['closed'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['hasSummary'] = $data['hasSummary'] ?? null;
        $this->container['archetype'] = $data['archetype'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['categoryId'] = $data['categoryId'] ?? null;
        $this->container['wordCount'] = $data['wordCount'] ?? null;
        $this->container['deletedAt'] = $data['deletedAt'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['featuredLink'] = $data['featuredLink'] ?? null;
        $this->container['pinnedGlobally'] = $data['pinnedGlobally'] ?? null;
        $this->container['pinnedAt'] = $data['pinnedAt'] ?? null;
        $this->container['pinnedUntil'] = $data['pinnedUntil'] ?? null;
        $this->container['imageUrl'] = $data['imageUrl'] ?? null;
        $this->container['draft'] = $data['draft'] ?? null;
        $this->container['draftKey'] = $data['draftKey'] ?? null;
        $this->container['draftSequence'] = $data['draftSequence'] ?? null;
        $this->container['unpinned'] = $data['unpinned'] ?? null;
        $this->container['pinned'] = $data['pinned'] ?? null;
        $this->container['currentPostNumber'] = $data['currentPostNumber'] ?? null;
        $this->container['highestPostNumber'] = $data['highestPostNumber'] ?? null;
        $this->container['deletedBy'] = $data['deletedBy'] ?? null;
        $this->container['hasDeleted'] = $data['hasDeleted'] ?? null;
        $this->container['actionsSummary'] = $data['actionsSummary'] ?? null;
        $this->container['chunkSize'] = $data['chunkSize'] ?? null;
        $this->container['bookmarked'] = $data['bookmarked'] ?? null;
        $this->container['topicTimer'] = $data['topicTimer'] ?? null;
        $this->container['messageBusLastId'] = $data['messageBusLastId'] ?? null;
        $this->container['participantCount'] = $data['participantCount'] ?? null;
        $this->container['showReadIndicator'] = $data['showReadIndicator'] ?? null;
        $this->container['thumbnails'] = $data['thumbnails'] ?? null;
        $this->container['details'] = $data['details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets postStream
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20035PostStream|null
     */
    public function getPostStream()
    {
        return $this->container['postStream'];
    }

    /**
     * Sets postStream
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20035PostStream|null $postStream postStream
     *
     * @return self
     */
    public function setPostStream($postStream)
    {
        $this->container['postStream'] = $postStream;

        return $this;
    }

    /**
     * Gets timelineLookup
     *
     * @return mixed[]|null
     */
    public function getTimelineLookup()
    {
        return $this->container['timelineLookup'];
    }

    /**
     * Sets timelineLookup
     *
     * @param mixed[]|null $timelineLookup timelineLookup
     *
     * @return self
     */
    public function setTimelineLookup($timelineLookup)
    {
        $this->container['timelineLookup'] = $timelineLookup;

        return $this;
    }

    /**
     * Gets suggestedTopics
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20035SuggestedTopics[]|null
     */
    public function getSuggestedTopics()
    {
        return $this->container['suggestedTopics'];
    }

    /**
     * Sets suggestedTopics
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20035SuggestedTopics[]|null $suggestedTopics suggestedTopics
     *
     * @return self
     */
    public function setSuggestedTopics($suggestedTopics)
    {
        $this->container['suggestedTopics'] = $suggestedTopics;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets fancyTitle
     *
     * @return string|null
     */
    public function getFancyTitle()
    {
        return $this->container['fancyTitle'];
    }

    /**
     * Sets fancyTitle
     *
     * @param string|null $fancyTitle fancyTitle
     *
     * @return self
     */
    public function setFancyTitle($fancyTitle)
    {
        $this->container['fancyTitle'] = $fancyTitle;

        return $this;
    }

    /**
     * Gets postsCount
     *
     * @return int|null
     */
    public function getPostsCount()
    {
        return $this->container['postsCount'];
    }

    /**
     * Sets postsCount
     *
     * @param int|null $postsCount postsCount
     *
     * @return self
     */
    public function setPostsCount($postsCount)
    {
        $this->container['postsCount'] = $postsCount;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets views
     *
     * @return int|null
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param int|null $views views
     *
     * @return self
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets replyCount
     *
     * @return int|null
     */
    public function getReplyCount()
    {
        return $this->container['replyCount'];
    }

    /**
     * Sets replyCount
     *
     * @param int|null $replyCount replyCount
     *
     * @return self
     */
    public function setReplyCount($replyCount)
    {
        $this->container['replyCount'] = $replyCount;

        return $this;
    }

    /**
     * Gets likeCount
     *
     * @return int|null
     */
    public function getLikeCount()
    {
        return $this->container['likeCount'];
    }

    /**
     * Sets likeCount
     *
     * @param int|null $likeCount likeCount
     *
     * @return self
     */
    public function setLikeCount($likeCount)
    {
        $this->container['likeCount'] = $likeCount;

        return $this;
    }

    /**
     * Gets lastPostedAt
     *
     * @return mixed|null
     */
    public function getLastPostedAt()
    {
        return $this->container['lastPostedAt'];
    }

    /**
     * Sets lastPostedAt
     *
     * @param mixed|null $lastPostedAt lastPostedAt
     *
     * @return self
     */
    public function setLastPostedAt($lastPostedAt)
    {
        $this->container['lastPostedAt'] = $lastPostedAt;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool|null
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool|null $closed closed
     *
     * @return self
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets hasSummary
     *
     * @return bool|null
     */
    public function getHasSummary()
    {
        return $this->container['hasSummary'];
    }

    /**
     * Sets hasSummary
     *
     * @param bool|null $hasSummary hasSummary
     *
     * @return self
     */
    public function setHasSummary($hasSummary)
    {
        $this->container['hasSummary'] = $hasSummary;

        return $this;
    }

    /**
     * Gets archetype
     *
     * @return string|null
     */
    public function getArchetype()
    {
        return $this->container['archetype'];
    }

    /**
     * Sets archetype
     *
     * @param string|null $archetype archetype
     *
     * @return self
     */
    public function setArchetype($archetype)
    {
        $this->container['archetype'] = $archetype;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets categoryId
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param int|null $categoryId categoryId
     *
     * @return self
     */
    public function setCategoryId($categoryId)
    {
        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets wordCount
     *
     * @return mixed|null
     */
    public function getWordCount()
    {
        return $this->container['wordCount'];
    }

    /**
     * Sets wordCount
     *
     * @param mixed|null $wordCount wordCount
     *
     * @return self
     */
    public function setWordCount($wordCount)
    {
        $this->container['wordCount'] = $wordCount;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return mixed|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param mixed|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets featuredLink
     *
     * @return mixed|null
     */
    public function getFeaturedLink()
    {
        return $this->container['featuredLink'];
    }

    /**
     * Sets featuredLink
     *
     * @param mixed|null $featuredLink featuredLink
     *
     * @return self
     */
    public function setFeaturedLink($featuredLink)
    {
        $this->container['featuredLink'] = $featuredLink;

        return $this;
    }

    /**
     * Gets pinnedGlobally
     *
     * @return bool|null
     */
    public function getPinnedGlobally()
    {
        return $this->container['pinnedGlobally'];
    }

    /**
     * Sets pinnedGlobally
     *
     * @param bool|null $pinnedGlobally pinnedGlobally
     *
     * @return self
     */
    public function setPinnedGlobally($pinnedGlobally)
    {
        $this->container['pinnedGlobally'] = $pinnedGlobally;

        return $this;
    }

    /**
     * Gets pinnedAt
     *
     * @return mixed|null
     */
    public function getPinnedAt()
    {
        return $this->container['pinnedAt'];
    }

    /**
     * Sets pinnedAt
     *
     * @param mixed|null $pinnedAt pinnedAt
     *
     * @return self
     */
    public function setPinnedAt($pinnedAt)
    {
        $this->container['pinnedAt'] = $pinnedAt;

        return $this;
    }

    /**
     * Gets pinnedUntil
     *
     * @return mixed|null
     */
    public function getPinnedUntil()
    {
        return $this->container['pinnedUntil'];
    }

    /**
     * Sets pinnedUntil
     *
     * @param mixed|null $pinnedUntil pinnedUntil
     *
     * @return self
     */
    public function setPinnedUntil($pinnedUntil)
    {
        $this->container['pinnedUntil'] = $pinnedUntil;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return mixed|null
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param mixed|null $imageUrl imageUrl
     *
     * @return self
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return mixed|null
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param mixed|null $draft draft
     *
     * @return self
     */
    public function setDraft($draft)
    {
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets draftKey
     *
     * @return string|null
     */
    public function getDraftKey()
    {
        return $this->container['draftKey'];
    }

    /**
     * Sets draftKey
     *
     * @param string|null $draftKey draftKey
     *
     * @return self
     */
    public function setDraftKey($draftKey)
    {
        $this->container['draftKey'] = $draftKey;

        return $this;
    }

    /**
     * Gets draftSequence
     *
     * @return int|null
     */
    public function getDraftSequence()
    {
        return $this->container['draftSequence'];
    }

    /**
     * Sets draftSequence
     *
     * @param int|null $draftSequence draftSequence
     *
     * @return self
     */
    public function setDraftSequence($draftSequence)
    {
        $this->container['draftSequence'] = $draftSequence;

        return $this;
    }

    /**
     * Gets unpinned
     *
     * @return mixed|null
     */
    public function getUnpinned()
    {
        return $this->container['unpinned'];
    }

    /**
     * Sets unpinned
     *
     * @param mixed|null $unpinned unpinned
     *
     * @return self
     */
    public function setUnpinned($unpinned)
    {
        $this->container['unpinned'] = $unpinned;

        return $this;
    }

    /**
     * Gets pinned
     *
     * @return bool|null
     */
    public function getPinned()
    {
        return $this->container['pinned'];
    }

    /**
     * Sets pinned
     *
     * @param bool|null $pinned pinned
     *
     * @return self
     */
    public function setPinned($pinned)
    {
        $this->container['pinned'] = $pinned;

        return $this;
    }

    /**
     * Gets currentPostNumber
     *
     * @return int|null
     */
    public function getCurrentPostNumber()
    {
        return $this->container['currentPostNumber'];
    }

    /**
     * Sets currentPostNumber
     *
     * @param int|null $currentPostNumber currentPostNumber
     *
     * @return self
     */
    public function setCurrentPostNumber($currentPostNumber)
    {
        $this->container['currentPostNumber'] = $currentPostNumber;

        return $this;
    }

    /**
     * Gets highestPostNumber
     *
     * @return mixed|null
     */
    public function getHighestPostNumber()
    {
        return $this->container['highestPostNumber'];
    }

    /**
     * Sets highestPostNumber
     *
     * @param mixed|null $highestPostNumber highestPostNumber
     *
     * @return self
     */
    public function setHighestPostNumber($highestPostNumber)
    {
        $this->container['highestPostNumber'] = $highestPostNumber;

        return $this;
    }

    /**
     * Gets deletedBy
     *
     * @return mixed|null
     */
    public function getDeletedBy()
    {
        return $this->container['deletedBy'];
    }

    /**
     * Sets deletedBy
     *
     * @param mixed|null $deletedBy deletedBy
     *
     * @return self
     */
    public function setDeletedBy($deletedBy)
    {
        $this->container['deletedBy'] = $deletedBy;

        return $this;
    }

    /**
     * Gets hasDeleted
     *
     * @return bool|null
     */
    public function getHasDeleted()
    {
        return $this->container['hasDeleted'];
    }

    /**
     * Sets hasDeleted
     *
     * @param bool|null $hasDeleted hasDeleted
     *
     * @return self
     */
    public function setHasDeleted($hasDeleted)
    {
        $this->container['hasDeleted'] = $hasDeleted;

        return $this;
    }

    /**
     * Gets actionsSummary
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20035ActionsSummary[]|null
     */
    public function getActionsSummary()
    {
        return $this->container['actionsSummary'];
    }

    /**
     * Sets actionsSummary
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20035ActionsSummary[]|null $actionsSummary actionsSummary
     *
     * @return self
     */
    public function setActionsSummary($actionsSummary)
    {
        $this->container['actionsSummary'] = $actionsSummary;

        return $this;
    }

    /**
     * Gets chunkSize
     *
     * @return int|null
     */
    public function getChunkSize()
    {
        return $this->container['chunkSize'];
    }

    /**
     * Sets chunkSize
     *
     * @param int|null $chunkSize chunkSize
     *
     * @return self
     */
    public function setChunkSize($chunkSize)
    {
        $this->container['chunkSize'] = $chunkSize;

        return $this;
    }

    /**
     * Gets bookmarked
     *
     * @return bool|null
     */
    public function getBookmarked()
    {
        return $this->container['bookmarked'];
    }

    /**
     * Sets bookmarked
     *
     * @param bool|null $bookmarked bookmarked
     *
     * @return self
     */
    public function setBookmarked($bookmarked)
    {
        $this->container['bookmarked'] = $bookmarked;

        return $this;
    }

    /**
     * Gets topicTimer
     *
     * @return mixed|null
     */
    public function getTopicTimer()
    {
        return $this->container['topicTimer'];
    }

    /**
     * Sets topicTimer
     *
     * @param mixed|null $topicTimer topicTimer
     *
     * @return self
     */
    public function setTopicTimer($topicTimer)
    {
        $this->container['topicTimer'] = $topicTimer;

        return $this;
    }

    /**
     * Gets messageBusLastId
     *
     * @return int|null
     */
    public function getMessageBusLastId()
    {
        return $this->container['messageBusLastId'];
    }

    /**
     * Sets messageBusLastId
     *
     * @param int|null $messageBusLastId messageBusLastId
     *
     * @return self
     */
    public function setMessageBusLastId($messageBusLastId)
    {
        $this->container['messageBusLastId'] = $messageBusLastId;

        return $this;
    }

    /**
     * Gets participantCount
     *
     * @return int|null
     */
    public function getParticipantCount()
    {
        return $this->container['participantCount'];
    }

    /**
     * Sets participantCount
     *
     * @param int|null $participantCount participantCount
     *
     * @return self
     */
    public function setParticipantCount($participantCount)
    {
        $this->container['participantCount'] = $participantCount;

        return $this;
    }

    /**
     * Gets showReadIndicator
     *
     * @return bool|null
     */
    public function getShowReadIndicator()
    {
        return $this->container['showReadIndicator'];
    }

    /**
     * Sets showReadIndicator
     *
     * @param bool|null $showReadIndicator showReadIndicator
     *
     * @return self
     */
    public function setShowReadIndicator($showReadIndicator)
    {
        $this->container['showReadIndicator'] = $showReadIndicator;

        return $this;
    }

    /**
     * Gets thumbnails
     *
     * @return mixed|null
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param mixed|null $thumbnails thumbnails
     *
     * @return self
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20035Details|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20035Details|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


