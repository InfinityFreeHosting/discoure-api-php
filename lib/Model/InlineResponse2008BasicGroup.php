<?php
/**
 * InlineResponse2008BasicGroup
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse2008BasicGroup Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2008BasicGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_8_basic_group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'automatic' => 'bool',
        'name' => 'string',
        'userCount' => 'int',
        'mentionableLevel' => 'int',
        'messageableLevel' => 'int',
        'visibilityLevel' => 'int',
        'automaticMembershipEmailDomains' => 'mixed',
        'automaticMembershipRetroactive' => 'bool',
        'primaryGroup' => 'bool',
        'title' => 'mixed',
        'grantTrustLevel' => 'mixed',
        'incomingEmail' => 'mixed',
        'hasMessages' => 'bool',
        'flairUrl' => 'mixed',
        'flairBgColor' => 'mixed',
        'flairColor' => 'mixed',
        'bioRaw' => 'mixed',
        'bioCooked' => 'mixed',
        'bioExcerpt' => 'mixed',
        'publicAdmission' => 'bool',
        'publicExit' => 'bool',
        'allowMembershipRequests' => 'bool',
        'fullName' => 'mixed',
        'defaultNotificationLevel' => 'int',
        'membershipRequestTemplate' => 'mixed',
        'membershipVisibilityLevel' => 'int',
        'canSeeMembers' => 'bool',
        'publishReadState' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'automatic' => null,
        'name' => null,
        'userCount' => null,
        'mentionableLevel' => null,
        'messageableLevel' => null,
        'visibilityLevel' => null,
        'automaticMembershipEmailDomains' => null,
        'automaticMembershipRetroactive' => null,
        'primaryGroup' => null,
        'title' => null,
        'grantTrustLevel' => null,
        'incomingEmail' => null,
        'hasMessages' => null,
        'flairUrl' => null,
        'flairBgColor' => null,
        'flairColor' => null,
        'bioRaw' => null,
        'bioCooked' => null,
        'bioExcerpt' => null,
        'publicAdmission' => null,
        'publicExit' => null,
        'allowMembershipRequests' => null,
        'fullName' => null,
        'defaultNotificationLevel' => null,
        'membershipRequestTemplate' => null,
        'membershipVisibilityLevel' => null,
        'canSeeMembers' => null,
        'publishReadState' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'automatic' => 'automatic',
        'name' => 'name',
        'userCount' => 'user_count',
        'mentionableLevel' => 'mentionable_level',
        'messageableLevel' => 'messageable_level',
        'visibilityLevel' => 'visibility_level',
        'automaticMembershipEmailDomains' => 'automatic_membership_email_domains',
        'automaticMembershipRetroactive' => 'automatic_membership_retroactive',
        'primaryGroup' => 'primary_group',
        'title' => 'title',
        'grantTrustLevel' => 'grant_trust_level',
        'incomingEmail' => 'incoming_email',
        'hasMessages' => 'has_messages',
        'flairUrl' => 'flair_url',
        'flairBgColor' => 'flair_bg_color',
        'flairColor' => 'flair_color',
        'bioRaw' => 'bio_raw',
        'bioCooked' => 'bio_cooked',
        'bioExcerpt' => 'bio_excerpt',
        'publicAdmission' => 'public_admission',
        'publicExit' => 'public_exit',
        'allowMembershipRequests' => 'allow_membership_requests',
        'fullName' => 'full_name',
        'defaultNotificationLevel' => 'default_notification_level',
        'membershipRequestTemplate' => 'membership_request_template',
        'membershipVisibilityLevel' => 'membership_visibility_level',
        'canSeeMembers' => 'can_see_members',
        'publishReadState' => 'publish_read_state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'automatic' => 'setAutomatic',
        'name' => 'setName',
        'userCount' => 'setUserCount',
        'mentionableLevel' => 'setMentionableLevel',
        'messageableLevel' => 'setMessageableLevel',
        'visibilityLevel' => 'setVisibilityLevel',
        'automaticMembershipEmailDomains' => 'setAutomaticMembershipEmailDomains',
        'automaticMembershipRetroactive' => 'setAutomaticMembershipRetroactive',
        'primaryGroup' => 'setPrimaryGroup',
        'title' => 'setTitle',
        'grantTrustLevel' => 'setGrantTrustLevel',
        'incomingEmail' => 'setIncomingEmail',
        'hasMessages' => 'setHasMessages',
        'flairUrl' => 'setFlairUrl',
        'flairBgColor' => 'setFlairBgColor',
        'flairColor' => 'setFlairColor',
        'bioRaw' => 'setBioRaw',
        'bioCooked' => 'setBioCooked',
        'bioExcerpt' => 'setBioExcerpt',
        'publicAdmission' => 'setPublicAdmission',
        'publicExit' => 'setPublicExit',
        'allowMembershipRequests' => 'setAllowMembershipRequests',
        'fullName' => 'setFullName',
        'defaultNotificationLevel' => 'setDefaultNotificationLevel',
        'membershipRequestTemplate' => 'setMembershipRequestTemplate',
        'membershipVisibilityLevel' => 'setMembershipVisibilityLevel',
        'canSeeMembers' => 'setCanSeeMembers',
        'publishReadState' => 'setPublishReadState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'automatic' => 'getAutomatic',
        'name' => 'getName',
        'userCount' => 'getUserCount',
        'mentionableLevel' => 'getMentionableLevel',
        'messageableLevel' => 'getMessageableLevel',
        'visibilityLevel' => 'getVisibilityLevel',
        'automaticMembershipEmailDomains' => 'getAutomaticMembershipEmailDomains',
        'automaticMembershipRetroactive' => 'getAutomaticMembershipRetroactive',
        'primaryGroup' => 'getPrimaryGroup',
        'title' => 'getTitle',
        'grantTrustLevel' => 'getGrantTrustLevel',
        'incomingEmail' => 'getIncomingEmail',
        'hasMessages' => 'getHasMessages',
        'flairUrl' => 'getFlairUrl',
        'flairBgColor' => 'getFlairBgColor',
        'flairColor' => 'getFlairColor',
        'bioRaw' => 'getBioRaw',
        'bioCooked' => 'getBioCooked',
        'bioExcerpt' => 'getBioExcerpt',
        'publicAdmission' => 'getPublicAdmission',
        'publicExit' => 'getPublicExit',
        'allowMembershipRequests' => 'getAllowMembershipRequests',
        'fullName' => 'getFullName',
        'defaultNotificationLevel' => 'getDefaultNotificationLevel',
        'membershipRequestTemplate' => 'getMembershipRequestTemplate',
        'membershipVisibilityLevel' => 'getMembershipVisibilityLevel',
        'canSeeMembers' => 'getCanSeeMembers',
        'publishReadState' => 'getPublishReadState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['automatic'] = $data['automatic'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['userCount'] = $data['userCount'] ?? null;
        $this->container['mentionableLevel'] = $data['mentionableLevel'] ?? null;
        $this->container['messageableLevel'] = $data['messageableLevel'] ?? null;
        $this->container['visibilityLevel'] = $data['visibilityLevel'] ?? null;
        $this->container['automaticMembershipEmailDomains'] = $data['automaticMembershipEmailDomains'] ?? null;
        $this->container['automaticMembershipRetroactive'] = $data['automaticMembershipRetroactive'] ?? null;
        $this->container['primaryGroup'] = $data['primaryGroup'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['grantTrustLevel'] = $data['grantTrustLevel'] ?? null;
        $this->container['incomingEmail'] = $data['incomingEmail'] ?? null;
        $this->container['hasMessages'] = $data['hasMessages'] ?? null;
        $this->container['flairUrl'] = $data['flairUrl'] ?? null;
        $this->container['flairBgColor'] = $data['flairBgColor'] ?? null;
        $this->container['flairColor'] = $data['flairColor'] ?? null;
        $this->container['bioRaw'] = $data['bioRaw'] ?? null;
        $this->container['bioCooked'] = $data['bioCooked'] ?? null;
        $this->container['bioExcerpt'] = $data['bioExcerpt'] ?? null;
        $this->container['publicAdmission'] = $data['publicAdmission'] ?? null;
        $this->container['publicExit'] = $data['publicExit'] ?? null;
        $this->container['allowMembershipRequests'] = $data['allowMembershipRequests'] ?? null;
        $this->container['fullName'] = $data['fullName'] ?? null;
        $this->container['defaultNotificationLevel'] = $data['defaultNotificationLevel'] ?? null;
        $this->container['membershipRequestTemplate'] = $data['membershipRequestTemplate'] ?? null;
        $this->container['membershipVisibilityLevel'] = $data['membershipVisibilityLevel'] ?? null;
        $this->container['canSeeMembers'] = $data['canSeeMembers'] ?? null;
        $this->container['publishReadState'] = $data['publishReadState'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets automatic
     *
     * @return bool|null
     */
    public function getAutomatic()
    {
        return $this->container['automatic'];
    }

    /**
     * Sets automatic
     *
     * @param bool|null $automatic automatic
     *
     * @return self
     */
    public function setAutomatic($automatic)
    {
        $this->container['automatic'] = $automatic;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int|null
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int|null $userCount userCount
     *
     * @return self
     */
    public function setUserCount($userCount)
    {
        $this->container['userCount'] = $userCount;

        return $this;
    }

    /**
     * Gets mentionableLevel
     *
     * @return int|null
     */
    public function getMentionableLevel()
    {
        return $this->container['mentionableLevel'];
    }

    /**
     * Sets mentionableLevel
     *
     * @param int|null $mentionableLevel mentionableLevel
     *
     * @return self
     */
    public function setMentionableLevel($mentionableLevel)
    {
        $this->container['mentionableLevel'] = $mentionableLevel;

        return $this;
    }

    /**
     * Gets messageableLevel
     *
     * @return int|null
     */
    public function getMessageableLevel()
    {
        return $this->container['messageableLevel'];
    }

    /**
     * Sets messageableLevel
     *
     * @param int|null $messageableLevel messageableLevel
     *
     * @return self
     */
    public function setMessageableLevel($messageableLevel)
    {
        $this->container['messageableLevel'] = $messageableLevel;

        return $this;
    }

    /**
     * Gets visibilityLevel
     *
     * @return int|null
     */
    public function getVisibilityLevel()
    {
        return $this->container['visibilityLevel'];
    }

    /**
     * Sets visibilityLevel
     *
     * @param int|null $visibilityLevel visibilityLevel
     *
     * @return self
     */
    public function setVisibilityLevel($visibilityLevel)
    {
        $this->container['visibilityLevel'] = $visibilityLevel;

        return $this;
    }

    /**
     * Gets automaticMembershipEmailDomains
     *
     * @return mixed|null
     */
    public function getAutomaticMembershipEmailDomains()
    {
        return $this->container['automaticMembershipEmailDomains'];
    }

    /**
     * Sets automaticMembershipEmailDomains
     *
     * @param mixed|null $automaticMembershipEmailDomains automaticMembershipEmailDomains
     *
     * @return self
     */
    public function setAutomaticMembershipEmailDomains($automaticMembershipEmailDomains)
    {
        $this->container['automaticMembershipEmailDomains'] = $automaticMembershipEmailDomains;

        return $this;
    }

    /**
     * Gets automaticMembershipRetroactive
     *
     * @return bool|null
     */
    public function getAutomaticMembershipRetroactive()
    {
        return $this->container['automaticMembershipRetroactive'];
    }

    /**
     * Sets automaticMembershipRetroactive
     *
     * @param bool|null $automaticMembershipRetroactive automaticMembershipRetroactive
     *
     * @return self
     */
    public function setAutomaticMembershipRetroactive($automaticMembershipRetroactive)
    {
        $this->container['automaticMembershipRetroactive'] = $automaticMembershipRetroactive;

        return $this;
    }

    /**
     * Gets primaryGroup
     *
     * @return bool|null
     */
    public function getPrimaryGroup()
    {
        return $this->container['primaryGroup'];
    }

    /**
     * Sets primaryGroup
     *
     * @param bool|null $primaryGroup primaryGroup
     *
     * @return self
     */
    public function setPrimaryGroup($primaryGroup)
    {
        $this->container['primaryGroup'] = $primaryGroup;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets grantTrustLevel
     *
     * @return mixed|null
     */
    public function getGrantTrustLevel()
    {
        return $this->container['grantTrustLevel'];
    }

    /**
     * Sets grantTrustLevel
     *
     * @param mixed|null $grantTrustLevel grantTrustLevel
     *
     * @return self
     */
    public function setGrantTrustLevel($grantTrustLevel)
    {
        $this->container['grantTrustLevel'] = $grantTrustLevel;

        return $this;
    }

    /**
     * Gets incomingEmail
     *
     * @return mixed|null
     */
    public function getIncomingEmail()
    {
        return $this->container['incomingEmail'];
    }

    /**
     * Sets incomingEmail
     *
     * @param mixed|null $incomingEmail incomingEmail
     *
     * @return self
     */
    public function setIncomingEmail($incomingEmail)
    {
        $this->container['incomingEmail'] = $incomingEmail;

        return $this;
    }

    /**
     * Gets hasMessages
     *
     * @return bool|null
     */
    public function getHasMessages()
    {
        return $this->container['hasMessages'];
    }

    /**
     * Sets hasMessages
     *
     * @param bool|null $hasMessages hasMessages
     *
     * @return self
     */
    public function setHasMessages($hasMessages)
    {
        $this->container['hasMessages'] = $hasMessages;

        return $this;
    }

    /**
     * Gets flairUrl
     *
     * @return mixed|null
     */
    public function getFlairUrl()
    {
        return $this->container['flairUrl'];
    }

    /**
     * Sets flairUrl
     *
     * @param mixed|null $flairUrl flairUrl
     *
     * @return self
     */
    public function setFlairUrl($flairUrl)
    {
        $this->container['flairUrl'] = $flairUrl;

        return $this;
    }

    /**
     * Gets flairBgColor
     *
     * @return mixed|null
     */
    public function getFlairBgColor()
    {
        return $this->container['flairBgColor'];
    }

    /**
     * Sets flairBgColor
     *
     * @param mixed|null $flairBgColor flairBgColor
     *
     * @return self
     */
    public function setFlairBgColor($flairBgColor)
    {
        $this->container['flairBgColor'] = $flairBgColor;

        return $this;
    }

    /**
     * Gets flairColor
     *
     * @return mixed|null
     */
    public function getFlairColor()
    {
        return $this->container['flairColor'];
    }

    /**
     * Sets flairColor
     *
     * @param mixed|null $flairColor flairColor
     *
     * @return self
     */
    public function setFlairColor($flairColor)
    {
        $this->container['flairColor'] = $flairColor;

        return $this;
    }

    /**
     * Gets bioRaw
     *
     * @return mixed|null
     */
    public function getBioRaw()
    {
        return $this->container['bioRaw'];
    }

    /**
     * Sets bioRaw
     *
     * @param mixed|null $bioRaw bioRaw
     *
     * @return self
     */
    public function setBioRaw($bioRaw)
    {
        $this->container['bioRaw'] = $bioRaw;

        return $this;
    }

    /**
     * Gets bioCooked
     *
     * @return mixed|null
     */
    public function getBioCooked()
    {
        return $this->container['bioCooked'];
    }

    /**
     * Sets bioCooked
     *
     * @param mixed|null $bioCooked bioCooked
     *
     * @return self
     */
    public function setBioCooked($bioCooked)
    {
        $this->container['bioCooked'] = $bioCooked;

        return $this;
    }

    /**
     * Gets bioExcerpt
     *
     * @return mixed|null
     */
    public function getBioExcerpt()
    {
        return $this->container['bioExcerpt'];
    }

    /**
     * Sets bioExcerpt
     *
     * @param mixed|null $bioExcerpt bioExcerpt
     *
     * @return self
     */
    public function setBioExcerpt($bioExcerpt)
    {
        $this->container['bioExcerpt'] = $bioExcerpt;

        return $this;
    }

    /**
     * Gets publicAdmission
     *
     * @return bool|null
     */
    public function getPublicAdmission()
    {
        return $this->container['publicAdmission'];
    }

    /**
     * Sets publicAdmission
     *
     * @param bool|null $publicAdmission publicAdmission
     *
     * @return self
     */
    public function setPublicAdmission($publicAdmission)
    {
        $this->container['publicAdmission'] = $publicAdmission;

        return $this;
    }

    /**
     * Gets publicExit
     *
     * @return bool|null
     */
    public function getPublicExit()
    {
        return $this->container['publicExit'];
    }

    /**
     * Sets publicExit
     *
     * @param bool|null $publicExit publicExit
     *
     * @return self
     */
    public function setPublicExit($publicExit)
    {
        $this->container['publicExit'] = $publicExit;

        return $this;
    }

    /**
     * Gets allowMembershipRequests
     *
     * @return bool|null
     */
    public function getAllowMembershipRequests()
    {
        return $this->container['allowMembershipRequests'];
    }

    /**
     * Sets allowMembershipRequests
     *
     * @param bool|null $allowMembershipRequests allowMembershipRequests
     *
     * @return self
     */
    public function setAllowMembershipRequests($allowMembershipRequests)
    {
        $this->container['allowMembershipRequests'] = $allowMembershipRequests;

        return $this;
    }

    /**
     * Gets fullName
     *
     * @return mixed|null
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param mixed|null $fullName fullName
     *
     * @return self
     */
    public function setFullName($fullName)
    {
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets defaultNotificationLevel
     *
     * @return int|null
     */
    public function getDefaultNotificationLevel()
    {
        return $this->container['defaultNotificationLevel'];
    }

    /**
     * Sets defaultNotificationLevel
     *
     * @param int|null $defaultNotificationLevel defaultNotificationLevel
     *
     * @return self
     */
    public function setDefaultNotificationLevel($defaultNotificationLevel)
    {
        $this->container['defaultNotificationLevel'] = $defaultNotificationLevel;

        return $this;
    }

    /**
     * Gets membershipRequestTemplate
     *
     * @return mixed|null
     */
    public function getMembershipRequestTemplate()
    {
        return $this->container['membershipRequestTemplate'];
    }

    /**
     * Sets membershipRequestTemplate
     *
     * @param mixed|null $membershipRequestTemplate membershipRequestTemplate
     *
     * @return self
     */
    public function setMembershipRequestTemplate($membershipRequestTemplate)
    {
        $this->container['membershipRequestTemplate'] = $membershipRequestTemplate;

        return $this;
    }

    /**
     * Gets membershipVisibilityLevel
     *
     * @return int|null
     */
    public function getMembershipVisibilityLevel()
    {
        return $this->container['membershipVisibilityLevel'];
    }

    /**
     * Sets membershipVisibilityLevel
     *
     * @param int|null $membershipVisibilityLevel membershipVisibilityLevel
     *
     * @return self
     */
    public function setMembershipVisibilityLevel($membershipVisibilityLevel)
    {
        $this->container['membershipVisibilityLevel'] = $membershipVisibilityLevel;

        return $this;
    }

    /**
     * Gets canSeeMembers
     *
     * @return bool|null
     */
    public function getCanSeeMembers()
    {
        return $this->container['canSeeMembers'];
    }

    /**
     * Sets canSeeMembers
     *
     * @param bool|null $canSeeMembers canSeeMembers
     *
     * @return self
     */
    public function setCanSeeMembers($canSeeMembers)
    {
        $this->container['canSeeMembers'] = $canSeeMembers;

        return $this;
    }

    /**
     * Gets publishReadState
     *
     * @return bool|null
     */
    public function getPublishReadState()
    {
        return $this->container['publishReadState'];
    }

    /**
     * Sets publishReadState
     *
     * @param bool|null $publishReadState publishReadState
     *
     * @return self
     */
    public function setPublishReadState($publishReadState)
    {
        $this->container['publishReadState'] = $publishReadState;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


