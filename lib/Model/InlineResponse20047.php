<?php
/**
 * InlineResponse20047
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20047 Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20047 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_47';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'username' => 'string',
        'name' => 'mixed',
        'avatarTemplate' => 'string',
        'email' => 'string',
        'secondaryEmails' => 'array',
        'active' => 'bool',
        'admin' => 'bool',
        'moderator' => 'bool',
        'lastSeenAt' => 'mixed',
        'lastEmailedAt' => 'mixed',
        'createdAt' => 'string',
        'lastSeenAge' => 'mixed',
        'lastEmailedAge' => 'mixed',
        'createdAtAge' => 'mixed',
        'trustLevel' => 'int',
        'manualLockedTrustLevel' => 'mixed',
        'flagLevel' => 'int',
        'title' => 'mixed',
        'timeRead' => 'int',
        'staged' => 'bool',
        'daysVisited' => 'int',
        'postsReadCount' => 'int',
        'topicsEntered' => 'int',
        'postCount' => 'int',
        'associatedAccounts' => 'array',
        'canSendActivationEmail' => 'bool',
        'canActivate' => 'bool',
        'canDeactivate' => 'bool',
        'ipAddress' => 'string',
        'registrationIpAddress' => 'mixed',
        'canGrantAdmin' => 'bool',
        'canRevokeAdmin' => 'bool',
        'canGrantModeration' => 'bool',
        'canRevokeModeration' => 'bool',
        'canImpersonate' => 'bool',
        'likeCount' => 'int',
        'likeGivenCount' => 'int',
        'topicCount' => 'int',
        'flagsGivenCount' => 'int',
        'flagsReceivedCount' => 'int',
        'privateTopicsCount' => 'int',
        'canDeleteAllPosts' => 'bool',
        'canBeDeleted' => 'bool',
        'canBeAnonymized' => 'bool',
        'canBeMerged' => 'bool',
        'fullSuspendReason' => 'mixed',
        'silenceReason' => 'mixed',
        'postEditsCount' => 'mixed',
        'primaryGroupId' => 'mixed',
        'badgeCount' => 'int',
        'warningsReceivedCount' => 'int',
        'bounceScore' => 'mixed',
        'resetBounceScoreAfter' => 'mixed',
        'canViewActionLogs' => 'bool',
        'canDisableSecondFactor' => 'bool',
        'canDeleteSsoRecord' => 'bool',
        'apiKeyCount' => 'int',
        'singleSignOnRecord' => 'mixed',
        'approvedBy' => '\InfinityFree\DiscourseApi\Model\InlineResponse20047ApprovedBy',
        'suspendedBy' => 'mixed',
        'silencedBy' => 'mixed',
        'penaltyCounts' => '\InfinityFree\DiscourseApi\Model\InlineResponse20047PenaltyCounts',
        'nextPenalty' => 'string',
        'tl3Requirements' => '\InfinityFree\DiscourseApi\Model\InlineResponse20047Tl3Requirements',
        'groups' => 'array'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'username' => null,
        'name' => null,
        'avatarTemplate' => null,
        'email' => null,
        'secondaryEmails' => null,
        'active' => null,
        'admin' => null,
        'moderator' => null,
        'lastSeenAt' => null,
        'lastEmailedAt' => null,
        'createdAt' => null,
        'lastSeenAge' => null,
        'lastEmailedAge' => null,
        'createdAtAge' => null,
        'trustLevel' => null,
        'manualLockedTrustLevel' => null,
        'flagLevel' => null,
        'title' => null,
        'timeRead' => null,
        'staged' => null,
        'daysVisited' => null,
        'postsReadCount' => null,
        'topicsEntered' => null,
        'postCount' => null,
        'associatedAccounts' => null,
        'canSendActivationEmail' => null,
        'canActivate' => null,
        'canDeactivate' => null,
        'ipAddress' => null,
        'registrationIpAddress' => null,
        'canGrantAdmin' => null,
        'canRevokeAdmin' => null,
        'canGrantModeration' => null,
        'canRevokeModeration' => null,
        'canImpersonate' => null,
        'likeCount' => null,
        'likeGivenCount' => null,
        'topicCount' => null,
        'flagsGivenCount' => null,
        'flagsReceivedCount' => null,
        'privateTopicsCount' => null,
        'canDeleteAllPosts' => null,
        'canBeDeleted' => null,
        'canBeAnonymized' => null,
        'canBeMerged' => null,
        'fullSuspendReason' => null,
        'silenceReason' => null,
        'postEditsCount' => null,
        'primaryGroupId' => null,
        'badgeCount' => null,
        'warningsReceivedCount' => null,
        'bounceScore' => null,
        'resetBounceScoreAfter' => null,
        'canViewActionLogs' => null,
        'canDisableSecondFactor' => null,
        'canDeleteSsoRecord' => null,
        'apiKeyCount' => null,
        'singleSignOnRecord' => null,
        'approvedBy' => null,
        'suspendedBy' => null,
        'silencedBy' => null,
        'penaltyCounts' => null,
        'nextPenalty' => null,
        'tl3Requirements' => null,
        'groups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'name' => 'name',
        'avatarTemplate' => 'avatar_template',
        'email' => 'email',
        'secondaryEmails' => 'secondary_emails',
        'active' => 'active',
        'admin' => 'admin',
        'moderator' => 'moderator',
        'lastSeenAt' => 'last_seen_at',
        'lastEmailedAt' => 'last_emailed_at',
        'createdAt' => 'created_at',
        'lastSeenAge' => 'last_seen_age',
        'lastEmailedAge' => 'last_emailed_age',
        'createdAtAge' => 'created_at_age',
        'trustLevel' => 'trust_level',
        'manualLockedTrustLevel' => 'manual_locked_trust_level',
        'flagLevel' => 'flag_level',
        'title' => 'title',
        'timeRead' => 'time_read',
        'staged' => 'staged',
        'daysVisited' => 'days_visited',
        'postsReadCount' => 'posts_read_count',
        'topicsEntered' => 'topics_entered',
        'postCount' => 'post_count',
        'associatedAccounts' => 'associated_accounts',
        'canSendActivationEmail' => 'can_send_activation_email',
        'canActivate' => 'can_activate',
        'canDeactivate' => 'can_deactivate',
        'ipAddress' => 'ip_address',
        'registrationIpAddress' => 'registration_ip_address',
        'canGrantAdmin' => 'can_grant_admin',
        'canRevokeAdmin' => 'can_revoke_admin',
        'canGrantModeration' => 'can_grant_moderation',
        'canRevokeModeration' => 'can_revoke_moderation',
        'canImpersonate' => 'can_impersonate',
        'likeCount' => 'like_count',
        'likeGivenCount' => 'like_given_count',
        'topicCount' => 'topic_count',
        'flagsGivenCount' => 'flags_given_count',
        'flagsReceivedCount' => 'flags_received_count',
        'privateTopicsCount' => 'private_topics_count',
        'canDeleteAllPosts' => 'can_delete_all_posts',
        'canBeDeleted' => 'can_be_deleted',
        'canBeAnonymized' => 'can_be_anonymized',
        'canBeMerged' => 'can_be_merged',
        'fullSuspendReason' => 'full_suspend_reason',
        'silenceReason' => 'silence_reason',
        'postEditsCount' => 'post_edits_count',
        'primaryGroupId' => 'primary_group_id',
        'badgeCount' => 'badge_count',
        'warningsReceivedCount' => 'warnings_received_count',
        'bounceScore' => 'bounce_score',
        'resetBounceScoreAfter' => 'reset_bounce_score_after',
        'canViewActionLogs' => 'can_view_action_logs',
        'canDisableSecondFactor' => 'can_disable_second_factor',
        'canDeleteSsoRecord' => 'can_delete_sso_record',
        'apiKeyCount' => 'api_key_count',
        'singleSignOnRecord' => 'single_sign_on_record',
        'approvedBy' => 'approved_by',
        'suspendedBy' => 'suspended_by',
        'silencedBy' => 'silenced_by',
        'penaltyCounts' => 'penalty_counts',
        'nextPenalty' => 'next_penalty',
        'tl3Requirements' => 'tl3_requirements',
        'groups' => 'groups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'name' => 'setName',
        'avatarTemplate' => 'setAvatarTemplate',
        'email' => 'setEmail',
        'secondaryEmails' => 'setSecondaryEmails',
        'active' => 'setActive',
        'admin' => 'setAdmin',
        'moderator' => 'setModerator',
        'lastSeenAt' => 'setLastSeenAt',
        'lastEmailedAt' => 'setLastEmailedAt',
        'createdAt' => 'setCreatedAt',
        'lastSeenAge' => 'setLastSeenAge',
        'lastEmailedAge' => 'setLastEmailedAge',
        'createdAtAge' => 'setCreatedAtAge',
        'trustLevel' => 'setTrustLevel',
        'manualLockedTrustLevel' => 'setManualLockedTrustLevel',
        'flagLevel' => 'setFlagLevel',
        'title' => 'setTitle',
        'timeRead' => 'setTimeRead',
        'staged' => 'setStaged',
        'daysVisited' => 'setDaysVisited',
        'postsReadCount' => 'setPostsReadCount',
        'topicsEntered' => 'setTopicsEntered',
        'postCount' => 'setPostCount',
        'associatedAccounts' => 'setAssociatedAccounts',
        'canSendActivationEmail' => 'setCanSendActivationEmail',
        'canActivate' => 'setCanActivate',
        'canDeactivate' => 'setCanDeactivate',
        'ipAddress' => 'setIpAddress',
        'registrationIpAddress' => 'setRegistrationIpAddress',
        'canGrantAdmin' => 'setCanGrantAdmin',
        'canRevokeAdmin' => 'setCanRevokeAdmin',
        'canGrantModeration' => 'setCanGrantModeration',
        'canRevokeModeration' => 'setCanRevokeModeration',
        'canImpersonate' => 'setCanImpersonate',
        'likeCount' => 'setLikeCount',
        'likeGivenCount' => 'setLikeGivenCount',
        'topicCount' => 'setTopicCount',
        'flagsGivenCount' => 'setFlagsGivenCount',
        'flagsReceivedCount' => 'setFlagsReceivedCount',
        'privateTopicsCount' => 'setPrivateTopicsCount',
        'canDeleteAllPosts' => 'setCanDeleteAllPosts',
        'canBeDeleted' => 'setCanBeDeleted',
        'canBeAnonymized' => 'setCanBeAnonymized',
        'canBeMerged' => 'setCanBeMerged',
        'fullSuspendReason' => 'setFullSuspendReason',
        'silenceReason' => 'setSilenceReason',
        'postEditsCount' => 'setPostEditsCount',
        'primaryGroupId' => 'setPrimaryGroupId',
        'badgeCount' => 'setBadgeCount',
        'warningsReceivedCount' => 'setWarningsReceivedCount',
        'bounceScore' => 'setBounceScore',
        'resetBounceScoreAfter' => 'setResetBounceScoreAfter',
        'canViewActionLogs' => 'setCanViewActionLogs',
        'canDisableSecondFactor' => 'setCanDisableSecondFactor',
        'canDeleteSsoRecord' => 'setCanDeleteSsoRecord',
        'apiKeyCount' => 'setApiKeyCount',
        'singleSignOnRecord' => 'setSingleSignOnRecord',
        'approvedBy' => 'setApprovedBy',
        'suspendedBy' => 'setSuspendedBy',
        'silencedBy' => 'setSilencedBy',
        'penaltyCounts' => 'setPenaltyCounts',
        'nextPenalty' => 'setNextPenalty',
        'tl3Requirements' => 'setTl3Requirements',
        'groups' => 'setGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'name' => 'getName',
        'avatarTemplate' => 'getAvatarTemplate',
        'email' => 'getEmail',
        'secondaryEmails' => 'getSecondaryEmails',
        'active' => 'getActive',
        'admin' => 'getAdmin',
        'moderator' => 'getModerator',
        'lastSeenAt' => 'getLastSeenAt',
        'lastEmailedAt' => 'getLastEmailedAt',
        'createdAt' => 'getCreatedAt',
        'lastSeenAge' => 'getLastSeenAge',
        'lastEmailedAge' => 'getLastEmailedAge',
        'createdAtAge' => 'getCreatedAtAge',
        'trustLevel' => 'getTrustLevel',
        'manualLockedTrustLevel' => 'getManualLockedTrustLevel',
        'flagLevel' => 'getFlagLevel',
        'title' => 'getTitle',
        'timeRead' => 'getTimeRead',
        'staged' => 'getStaged',
        'daysVisited' => 'getDaysVisited',
        'postsReadCount' => 'getPostsReadCount',
        'topicsEntered' => 'getTopicsEntered',
        'postCount' => 'getPostCount',
        'associatedAccounts' => 'getAssociatedAccounts',
        'canSendActivationEmail' => 'getCanSendActivationEmail',
        'canActivate' => 'getCanActivate',
        'canDeactivate' => 'getCanDeactivate',
        'ipAddress' => 'getIpAddress',
        'registrationIpAddress' => 'getRegistrationIpAddress',
        'canGrantAdmin' => 'getCanGrantAdmin',
        'canRevokeAdmin' => 'getCanRevokeAdmin',
        'canGrantModeration' => 'getCanGrantModeration',
        'canRevokeModeration' => 'getCanRevokeModeration',
        'canImpersonate' => 'getCanImpersonate',
        'likeCount' => 'getLikeCount',
        'likeGivenCount' => 'getLikeGivenCount',
        'topicCount' => 'getTopicCount',
        'flagsGivenCount' => 'getFlagsGivenCount',
        'flagsReceivedCount' => 'getFlagsReceivedCount',
        'privateTopicsCount' => 'getPrivateTopicsCount',
        'canDeleteAllPosts' => 'getCanDeleteAllPosts',
        'canBeDeleted' => 'getCanBeDeleted',
        'canBeAnonymized' => 'getCanBeAnonymized',
        'canBeMerged' => 'getCanBeMerged',
        'fullSuspendReason' => 'getFullSuspendReason',
        'silenceReason' => 'getSilenceReason',
        'postEditsCount' => 'getPostEditsCount',
        'primaryGroupId' => 'getPrimaryGroupId',
        'badgeCount' => 'getBadgeCount',
        'warningsReceivedCount' => 'getWarningsReceivedCount',
        'bounceScore' => 'getBounceScore',
        'resetBounceScoreAfter' => 'getResetBounceScoreAfter',
        'canViewActionLogs' => 'getCanViewActionLogs',
        'canDisableSecondFactor' => 'getCanDisableSecondFactor',
        'canDeleteSsoRecord' => 'getCanDeleteSsoRecord',
        'apiKeyCount' => 'getApiKeyCount',
        'singleSignOnRecord' => 'getSingleSignOnRecord',
        'approvedBy' => 'getApprovedBy',
        'suspendedBy' => 'getSuspendedBy',
        'silencedBy' => 'getSilencedBy',
        'penaltyCounts' => 'getPenaltyCounts',
        'nextPenalty' => 'getNextPenalty',
        'tl3Requirements' => 'getTl3Requirements',
        'groups' => 'getGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['avatarTemplate'] = $data['avatarTemplate'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['secondaryEmails'] = $data['secondaryEmails'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['moderator'] = $data['moderator'] ?? null;
        $this->container['lastSeenAt'] = $data['lastSeenAt'] ?? null;
        $this->container['lastEmailedAt'] = $data['lastEmailedAt'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['lastSeenAge'] = $data['lastSeenAge'] ?? null;
        $this->container['lastEmailedAge'] = $data['lastEmailedAge'] ?? null;
        $this->container['createdAtAge'] = $data['createdAtAge'] ?? null;
        $this->container['trustLevel'] = $data['trustLevel'] ?? null;
        $this->container['manualLockedTrustLevel'] = $data['manualLockedTrustLevel'] ?? null;
        $this->container['flagLevel'] = $data['flagLevel'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['timeRead'] = $data['timeRead'] ?? null;
        $this->container['staged'] = $data['staged'] ?? null;
        $this->container['daysVisited'] = $data['daysVisited'] ?? null;
        $this->container['postsReadCount'] = $data['postsReadCount'] ?? null;
        $this->container['topicsEntered'] = $data['topicsEntered'] ?? null;
        $this->container['postCount'] = $data['postCount'] ?? null;
        $this->container['associatedAccounts'] = $data['associatedAccounts'] ?? null;
        $this->container['canSendActivationEmail'] = $data['canSendActivationEmail'] ?? null;
        $this->container['canActivate'] = $data['canActivate'] ?? null;
        $this->container['canDeactivate'] = $data['canDeactivate'] ?? null;
        $this->container['ipAddress'] = $data['ipAddress'] ?? null;
        $this->container['registrationIpAddress'] = $data['registrationIpAddress'] ?? null;
        $this->container['canGrantAdmin'] = $data['canGrantAdmin'] ?? null;
        $this->container['canRevokeAdmin'] = $data['canRevokeAdmin'] ?? null;
        $this->container['canGrantModeration'] = $data['canGrantModeration'] ?? null;
        $this->container['canRevokeModeration'] = $data['canRevokeModeration'] ?? null;
        $this->container['canImpersonate'] = $data['canImpersonate'] ?? null;
        $this->container['likeCount'] = $data['likeCount'] ?? null;
        $this->container['likeGivenCount'] = $data['likeGivenCount'] ?? null;
        $this->container['topicCount'] = $data['topicCount'] ?? null;
        $this->container['flagsGivenCount'] = $data['flagsGivenCount'] ?? null;
        $this->container['flagsReceivedCount'] = $data['flagsReceivedCount'] ?? null;
        $this->container['privateTopicsCount'] = $data['privateTopicsCount'] ?? null;
        $this->container['canDeleteAllPosts'] = $data['canDeleteAllPosts'] ?? null;
        $this->container['canBeDeleted'] = $data['canBeDeleted'] ?? null;
        $this->container['canBeAnonymized'] = $data['canBeAnonymized'] ?? null;
        $this->container['canBeMerged'] = $data['canBeMerged'] ?? null;
        $this->container['fullSuspendReason'] = $data['fullSuspendReason'] ?? null;
        $this->container['silenceReason'] = $data['silenceReason'] ?? null;
        $this->container['postEditsCount'] = $data['postEditsCount'] ?? null;
        $this->container['primaryGroupId'] = $data['primaryGroupId'] ?? null;
        $this->container['badgeCount'] = $data['badgeCount'] ?? null;
        $this->container['warningsReceivedCount'] = $data['warningsReceivedCount'] ?? null;
        $this->container['bounceScore'] = $data['bounceScore'] ?? null;
        $this->container['resetBounceScoreAfter'] = $data['resetBounceScoreAfter'] ?? null;
        $this->container['canViewActionLogs'] = $data['canViewActionLogs'] ?? null;
        $this->container['canDisableSecondFactor'] = $data['canDisableSecondFactor'] ?? null;
        $this->container['canDeleteSsoRecord'] = $data['canDeleteSsoRecord'] ?? null;
        $this->container['apiKeyCount'] = $data['apiKeyCount'] ?? null;
        $this->container['singleSignOnRecord'] = $data['singleSignOnRecord'] ?? null;
        $this->container['approvedBy'] = $data['approvedBy'] ?? null;
        $this->container['suspendedBy'] = $data['suspendedBy'] ?? null;
        $this->container['silencedBy'] = $data['silencedBy'] ?? null;
        $this->container['penaltyCounts'] = $data['penaltyCounts'] ?? null;
        $this->container['nextPenalty'] = $data['nextPenalty'] ?? null;
        $this->container['tl3Requirements'] = $data['tl3Requirements'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['avatarTemplate'] === null) {
            $invalidProperties[] = "'avatarTemplate' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['admin'] === null) {
            $invalidProperties[] = "'admin' can't be null";
        }
        if ($this->container['moderator'] === null) {
            $invalidProperties[] = "'moderator' can't be null";
        }
        if ($this->container['lastSeenAt'] === null) {
            $invalidProperties[] = "'lastSeenAt' can't be null";
        }
        if ($this->container['lastEmailedAt'] === null) {
            $invalidProperties[] = "'lastEmailedAt' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['lastSeenAge'] === null) {
            $invalidProperties[] = "'lastSeenAge' can't be null";
        }
        if ($this->container['lastEmailedAge'] === null) {
            $invalidProperties[] = "'lastEmailedAge' can't be null";
        }
        if ($this->container['createdAtAge'] === null) {
            $invalidProperties[] = "'createdAtAge' can't be null";
        }
        if ($this->container['trustLevel'] === null) {
            $invalidProperties[] = "'trustLevel' can't be null";
        }
        if ($this->container['manualLockedTrustLevel'] === null) {
            $invalidProperties[] = "'manualLockedTrustLevel' can't be null";
        }
        if ($this->container['flagLevel'] === null) {
            $invalidProperties[] = "'flagLevel' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['timeRead'] === null) {
            $invalidProperties[] = "'timeRead' can't be null";
        }
        if ($this->container['staged'] === null) {
            $invalidProperties[] = "'staged' can't be null";
        }
        if ($this->container['daysVisited'] === null) {
            $invalidProperties[] = "'daysVisited' can't be null";
        }
        if ($this->container['postsReadCount'] === null) {
            $invalidProperties[] = "'postsReadCount' can't be null";
        }
        if ($this->container['topicsEntered'] === null) {
            $invalidProperties[] = "'topicsEntered' can't be null";
        }
        if ($this->container['postCount'] === null) {
            $invalidProperties[] = "'postCount' can't be null";
        }
        if ($this->container['canSendActivationEmail'] === null) {
            $invalidProperties[] = "'canSendActivationEmail' can't be null";
        }
        if ($this->container['canActivate'] === null) {
            $invalidProperties[] = "'canActivate' can't be null";
        }
        if ($this->container['canDeactivate'] === null) {
            $invalidProperties[] = "'canDeactivate' can't be null";
        }
        if ($this->container['ipAddress'] === null) {
            $invalidProperties[] = "'ipAddress' can't be null";
        }
        if ($this->container['registrationIpAddress'] === null) {
            $invalidProperties[] = "'registrationIpAddress' can't be null";
        }
        if ($this->container['canGrantAdmin'] === null) {
            $invalidProperties[] = "'canGrantAdmin' can't be null";
        }
        if ($this->container['canRevokeAdmin'] === null) {
            $invalidProperties[] = "'canRevokeAdmin' can't be null";
        }
        if ($this->container['canGrantModeration'] === null) {
            $invalidProperties[] = "'canGrantModeration' can't be null";
        }
        if ($this->container['canRevokeModeration'] === null) {
            $invalidProperties[] = "'canRevokeModeration' can't be null";
        }
        if ($this->container['canImpersonate'] === null) {
            $invalidProperties[] = "'canImpersonate' can't be null";
        }
        if ($this->container['likeCount'] === null) {
            $invalidProperties[] = "'likeCount' can't be null";
        }
        if ($this->container['likeGivenCount'] === null) {
            $invalidProperties[] = "'likeGivenCount' can't be null";
        }
        if ($this->container['topicCount'] === null) {
            $invalidProperties[] = "'topicCount' can't be null";
        }
        if ($this->container['flagsGivenCount'] === null) {
            $invalidProperties[] = "'flagsGivenCount' can't be null";
        }
        if ($this->container['flagsReceivedCount'] === null) {
            $invalidProperties[] = "'flagsReceivedCount' can't be null";
        }
        if ($this->container['privateTopicsCount'] === null) {
            $invalidProperties[] = "'privateTopicsCount' can't be null";
        }
        if ($this->container['canDeleteAllPosts'] === null) {
            $invalidProperties[] = "'canDeleteAllPosts' can't be null";
        }
        if ($this->container['canBeDeleted'] === null) {
            $invalidProperties[] = "'canBeDeleted' can't be null";
        }
        if ($this->container['canBeAnonymized'] === null) {
            $invalidProperties[] = "'canBeAnonymized' can't be null";
        }
        if ($this->container['canBeMerged'] === null) {
            $invalidProperties[] = "'canBeMerged' can't be null";
        }
        if ($this->container['fullSuspendReason'] === null) {
            $invalidProperties[] = "'fullSuspendReason' can't be null";
        }
        if ($this->container['silenceReason'] === null) {
            $invalidProperties[] = "'silenceReason' can't be null";
        }
        if ($this->container['primaryGroupId'] === null) {
            $invalidProperties[] = "'primaryGroupId' can't be null";
        }
        if ($this->container['badgeCount'] === null) {
            $invalidProperties[] = "'badgeCount' can't be null";
        }
        if ($this->container['warningsReceivedCount'] === null) {
            $invalidProperties[] = "'warningsReceivedCount' can't be null";
        }
        if ($this->container['bounceScore'] === null) {
            $invalidProperties[] = "'bounceScore' can't be null";
        }
        if ($this->container['resetBounceScoreAfter'] === null) {
            $invalidProperties[] = "'resetBounceScoreAfter' can't be null";
        }
        if ($this->container['canViewActionLogs'] === null) {
            $invalidProperties[] = "'canViewActionLogs' can't be null";
        }
        if ($this->container['canDisableSecondFactor'] === null) {
            $invalidProperties[] = "'canDisableSecondFactor' can't be null";
        }
        if ($this->container['canDeleteSsoRecord'] === null) {
            $invalidProperties[] = "'canDeleteSsoRecord' can't be null";
        }
        if ($this->container['apiKeyCount'] === null) {
            $invalidProperties[] = "'apiKeyCount' can't be null";
        }
        if ($this->container['singleSignOnRecord'] === null) {
            $invalidProperties[] = "'singleSignOnRecord' can't be null";
        }
        if ($this->container['approvedBy'] === null) {
            $invalidProperties[] = "'approvedBy' can't be null";
        }
        if ($this->container['suspendedBy'] === null) {
            $invalidProperties[] = "'suspendedBy' can't be null";
        }
        if ($this->container['silencedBy'] === null) {
            $invalidProperties[] = "'silencedBy' can't be null";
        }
        if ($this->container['groups'] === null) {
            $invalidProperties[] = "'groups' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets avatarTemplate
     *
     * @return string
     */
    public function getAvatarTemplate()
    {
        return $this->container['avatarTemplate'];
    }

    /**
     * Sets avatarTemplate
     *
     * @param string $avatarTemplate avatarTemplate
     *
     * @return self
     */
    public function setAvatarTemplate($avatarTemplate)
    {
        $this->container['avatarTemplate'] = $avatarTemplate;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets secondaryEmails
     *
     * @return array|null
     */
    public function getSecondaryEmails()
    {
        return $this->container['secondaryEmails'];
    }

    /**
     * Sets secondaryEmails
     *
     * @param array|null $secondaryEmails secondaryEmails
     *
     * @return self
     */
    public function setSecondaryEmails($secondaryEmails)
    {
        $this->container['secondaryEmails'] = $secondaryEmails;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool $admin admin
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets moderator
     *
     * @return bool
     */
    public function getModerator()
    {
        return $this->container['moderator'];
    }

    /**
     * Sets moderator
     *
     * @param bool $moderator moderator
     *
     * @return self
     */
    public function setModerator($moderator)
    {
        $this->container['moderator'] = $moderator;

        return $this;
    }

    /**
     * Gets lastSeenAt
     *
     * @return mixed
     */
    public function getLastSeenAt()
    {
        return $this->container['lastSeenAt'];
    }

    /**
     * Sets lastSeenAt
     *
     * @param mixed $lastSeenAt lastSeenAt
     *
     * @return self
     */
    public function setLastSeenAt($lastSeenAt)
    {
        $this->container['lastSeenAt'] = $lastSeenAt;

        return $this;
    }

    /**
     * Gets lastEmailedAt
     *
     * @return mixed
     */
    public function getLastEmailedAt()
    {
        return $this->container['lastEmailedAt'];
    }

    /**
     * Sets lastEmailedAt
     *
     * @param mixed $lastEmailedAt lastEmailedAt
     *
     * @return self
     */
    public function setLastEmailedAt($lastEmailedAt)
    {
        $this->container['lastEmailedAt'] = $lastEmailedAt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets lastSeenAge
     *
     * @return mixed
     */
    public function getLastSeenAge()
    {
        return $this->container['lastSeenAge'];
    }

    /**
     * Sets lastSeenAge
     *
     * @param mixed $lastSeenAge lastSeenAge
     *
     * @return self
     */
    public function setLastSeenAge($lastSeenAge)
    {
        $this->container['lastSeenAge'] = $lastSeenAge;

        return $this;
    }

    /**
     * Gets lastEmailedAge
     *
     * @return mixed
     */
    public function getLastEmailedAge()
    {
        return $this->container['lastEmailedAge'];
    }

    /**
     * Sets lastEmailedAge
     *
     * @param mixed $lastEmailedAge lastEmailedAge
     *
     * @return self
     */
    public function setLastEmailedAge($lastEmailedAge)
    {
        $this->container['lastEmailedAge'] = $lastEmailedAge;

        return $this;
    }

    /**
     * Gets createdAtAge
     *
     * @return mixed
     */
    public function getCreatedAtAge()
    {
        return $this->container['createdAtAge'];
    }

    /**
     * Sets createdAtAge
     *
     * @param mixed $createdAtAge createdAtAge
     *
     * @return self
     */
    public function setCreatedAtAge($createdAtAge)
    {
        $this->container['createdAtAge'] = $createdAtAge;

        return $this;
    }

    /**
     * Gets trustLevel
     *
     * @return int
     */
    public function getTrustLevel()
    {
        return $this->container['trustLevel'];
    }

    /**
     * Sets trustLevel
     *
     * @param int $trustLevel trustLevel
     *
     * @return self
     */
    public function setTrustLevel($trustLevel)
    {
        $this->container['trustLevel'] = $trustLevel;

        return $this;
    }

    /**
     * Gets manualLockedTrustLevel
     *
     * @return mixed
     */
    public function getManualLockedTrustLevel()
    {
        return $this->container['manualLockedTrustLevel'];
    }

    /**
     * Sets manualLockedTrustLevel
     *
     * @param mixed $manualLockedTrustLevel manualLockedTrustLevel
     *
     * @return self
     */
    public function setManualLockedTrustLevel($manualLockedTrustLevel)
    {
        $this->container['manualLockedTrustLevel'] = $manualLockedTrustLevel;

        return $this;
    }

    /**
     * Gets flagLevel
     *
     * @return int
     */
    public function getFlagLevel()
    {
        return $this->container['flagLevel'];
    }

    /**
     * Sets flagLevel
     *
     * @param int $flagLevel flagLevel
     *
     * @return self
     */
    public function setFlagLevel($flagLevel)
    {
        $this->container['flagLevel'] = $flagLevel;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets timeRead
     *
     * @return int
     */
    public function getTimeRead()
    {
        return $this->container['timeRead'];
    }

    /**
     * Sets timeRead
     *
     * @param int $timeRead timeRead
     *
     * @return self
     */
    public function setTimeRead($timeRead)
    {
        $this->container['timeRead'] = $timeRead;

        return $this;
    }

    /**
     * Gets staged
     *
     * @return bool
     */
    public function getStaged()
    {
        return $this->container['staged'];
    }

    /**
     * Sets staged
     *
     * @param bool $staged staged
     *
     * @return self
     */
    public function setStaged($staged)
    {
        $this->container['staged'] = $staged;

        return $this;
    }

    /**
     * Gets daysVisited
     *
     * @return int
     */
    public function getDaysVisited()
    {
        return $this->container['daysVisited'];
    }

    /**
     * Sets daysVisited
     *
     * @param int $daysVisited daysVisited
     *
     * @return self
     */
    public function setDaysVisited($daysVisited)
    {
        $this->container['daysVisited'] = $daysVisited;

        return $this;
    }

    /**
     * Gets postsReadCount
     *
     * @return int
     */
    public function getPostsReadCount()
    {
        return $this->container['postsReadCount'];
    }

    /**
     * Sets postsReadCount
     *
     * @param int $postsReadCount postsReadCount
     *
     * @return self
     */
    public function setPostsReadCount($postsReadCount)
    {
        $this->container['postsReadCount'] = $postsReadCount;

        return $this;
    }

    /**
     * Gets topicsEntered
     *
     * @return int
     */
    public function getTopicsEntered()
    {
        return $this->container['topicsEntered'];
    }

    /**
     * Sets topicsEntered
     *
     * @param int $topicsEntered topicsEntered
     *
     * @return self
     */
    public function setTopicsEntered($topicsEntered)
    {
        $this->container['topicsEntered'] = $topicsEntered;

        return $this;
    }

    /**
     * Gets postCount
     *
     * @return int
     */
    public function getPostCount()
    {
        return $this->container['postCount'];
    }

    /**
     * Sets postCount
     *
     * @param int $postCount postCount
     *
     * @return self
     */
    public function setPostCount($postCount)
    {
        $this->container['postCount'] = $postCount;

        return $this;
    }

    /**
     * Gets associatedAccounts
     *
     * @return array|null
     */
    public function getAssociatedAccounts()
    {
        return $this->container['associatedAccounts'];
    }

    /**
     * Sets associatedAccounts
     *
     * @param array|null $associatedAccounts associatedAccounts
     *
     * @return self
     */
    public function setAssociatedAccounts($associatedAccounts)
    {
        $this->container['associatedAccounts'] = $associatedAccounts;

        return $this;
    }

    /**
     * Gets canSendActivationEmail
     *
     * @return bool
     */
    public function getCanSendActivationEmail()
    {
        return $this->container['canSendActivationEmail'];
    }

    /**
     * Sets canSendActivationEmail
     *
     * @param bool $canSendActivationEmail canSendActivationEmail
     *
     * @return self
     */
    public function setCanSendActivationEmail($canSendActivationEmail)
    {
        $this->container['canSendActivationEmail'] = $canSendActivationEmail;

        return $this;
    }

    /**
     * Gets canActivate
     *
     * @return bool
     */
    public function getCanActivate()
    {
        return $this->container['canActivate'];
    }

    /**
     * Sets canActivate
     *
     * @param bool $canActivate canActivate
     *
     * @return self
     */
    public function setCanActivate($canActivate)
    {
        $this->container['canActivate'] = $canActivate;

        return $this;
    }

    /**
     * Gets canDeactivate
     *
     * @return bool
     */
    public function getCanDeactivate()
    {
        return $this->container['canDeactivate'];
    }

    /**
     * Sets canDeactivate
     *
     * @param bool $canDeactivate canDeactivate
     *
     * @return self
     */
    public function setCanDeactivate($canDeactivate)
    {
        $this->container['canDeactivate'] = $canDeactivate;

        return $this;
    }

    /**
     * Gets ipAddress
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     *
     * @param string $ipAddress ipAddress
     *
     * @return self
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets registrationIpAddress
     *
     * @return mixed
     */
    public function getRegistrationIpAddress()
    {
        return $this->container['registrationIpAddress'];
    }

    /**
     * Sets registrationIpAddress
     *
     * @param mixed $registrationIpAddress registrationIpAddress
     *
     * @return self
     */
    public function setRegistrationIpAddress($registrationIpAddress)
    {
        $this->container['registrationIpAddress'] = $registrationIpAddress;

        return $this;
    }

    /**
     * Gets canGrantAdmin
     *
     * @return bool
     */
    public function getCanGrantAdmin()
    {
        return $this->container['canGrantAdmin'];
    }

    /**
     * Sets canGrantAdmin
     *
     * @param bool $canGrantAdmin canGrantAdmin
     *
     * @return self
     */
    public function setCanGrantAdmin($canGrantAdmin)
    {
        $this->container['canGrantAdmin'] = $canGrantAdmin;

        return $this;
    }

    /**
     * Gets canRevokeAdmin
     *
     * @return bool
     */
    public function getCanRevokeAdmin()
    {
        return $this->container['canRevokeAdmin'];
    }

    /**
     * Sets canRevokeAdmin
     *
     * @param bool $canRevokeAdmin canRevokeAdmin
     *
     * @return self
     */
    public function setCanRevokeAdmin($canRevokeAdmin)
    {
        $this->container['canRevokeAdmin'] = $canRevokeAdmin;

        return $this;
    }

    /**
     * Gets canGrantModeration
     *
     * @return bool
     */
    public function getCanGrantModeration()
    {
        return $this->container['canGrantModeration'];
    }

    /**
     * Sets canGrantModeration
     *
     * @param bool $canGrantModeration canGrantModeration
     *
     * @return self
     */
    public function setCanGrantModeration($canGrantModeration)
    {
        $this->container['canGrantModeration'] = $canGrantModeration;

        return $this;
    }

    /**
     * Gets canRevokeModeration
     *
     * @return bool
     */
    public function getCanRevokeModeration()
    {
        return $this->container['canRevokeModeration'];
    }

    /**
     * Sets canRevokeModeration
     *
     * @param bool $canRevokeModeration canRevokeModeration
     *
     * @return self
     */
    public function setCanRevokeModeration($canRevokeModeration)
    {
        $this->container['canRevokeModeration'] = $canRevokeModeration;

        return $this;
    }

    /**
     * Gets canImpersonate
     *
     * @return bool
     */
    public function getCanImpersonate()
    {
        return $this->container['canImpersonate'];
    }

    /**
     * Sets canImpersonate
     *
     * @param bool $canImpersonate canImpersonate
     *
     * @return self
     */
    public function setCanImpersonate($canImpersonate)
    {
        $this->container['canImpersonate'] = $canImpersonate;

        return $this;
    }

    /**
     * Gets likeCount
     *
     * @return int
     */
    public function getLikeCount()
    {
        return $this->container['likeCount'];
    }

    /**
     * Sets likeCount
     *
     * @param int $likeCount likeCount
     *
     * @return self
     */
    public function setLikeCount($likeCount)
    {
        $this->container['likeCount'] = $likeCount;

        return $this;
    }

    /**
     * Gets likeGivenCount
     *
     * @return int
     */
    public function getLikeGivenCount()
    {
        return $this->container['likeGivenCount'];
    }

    /**
     * Sets likeGivenCount
     *
     * @param int $likeGivenCount likeGivenCount
     *
     * @return self
     */
    public function setLikeGivenCount($likeGivenCount)
    {
        $this->container['likeGivenCount'] = $likeGivenCount;

        return $this;
    }

    /**
     * Gets topicCount
     *
     * @return int
     */
    public function getTopicCount()
    {
        return $this->container['topicCount'];
    }

    /**
     * Sets topicCount
     *
     * @param int $topicCount topicCount
     *
     * @return self
     */
    public function setTopicCount($topicCount)
    {
        $this->container['topicCount'] = $topicCount;

        return $this;
    }

    /**
     * Gets flagsGivenCount
     *
     * @return int
     */
    public function getFlagsGivenCount()
    {
        return $this->container['flagsGivenCount'];
    }

    /**
     * Sets flagsGivenCount
     *
     * @param int $flagsGivenCount flagsGivenCount
     *
     * @return self
     */
    public function setFlagsGivenCount($flagsGivenCount)
    {
        $this->container['flagsGivenCount'] = $flagsGivenCount;

        return $this;
    }

    /**
     * Gets flagsReceivedCount
     *
     * @return int
     */
    public function getFlagsReceivedCount()
    {
        return $this->container['flagsReceivedCount'];
    }

    /**
     * Sets flagsReceivedCount
     *
     * @param int $flagsReceivedCount flagsReceivedCount
     *
     * @return self
     */
    public function setFlagsReceivedCount($flagsReceivedCount)
    {
        $this->container['flagsReceivedCount'] = $flagsReceivedCount;

        return $this;
    }

    /**
     * Gets privateTopicsCount
     *
     * @return int
     */
    public function getPrivateTopicsCount()
    {
        return $this->container['privateTopicsCount'];
    }

    /**
     * Sets privateTopicsCount
     *
     * @param int $privateTopicsCount privateTopicsCount
     *
     * @return self
     */
    public function setPrivateTopicsCount($privateTopicsCount)
    {
        $this->container['privateTopicsCount'] = $privateTopicsCount;

        return $this;
    }

    /**
     * Gets canDeleteAllPosts
     *
     * @return bool
     */
    public function getCanDeleteAllPosts()
    {
        return $this->container['canDeleteAllPosts'];
    }

    /**
     * Sets canDeleteAllPosts
     *
     * @param bool $canDeleteAllPosts canDeleteAllPosts
     *
     * @return self
     */
    public function setCanDeleteAllPosts($canDeleteAllPosts)
    {
        $this->container['canDeleteAllPosts'] = $canDeleteAllPosts;

        return $this;
    }

    /**
     * Gets canBeDeleted
     *
     * @return bool
     */
    public function getCanBeDeleted()
    {
        return $this->container['canBeDeleted'];
    }

    /**
     * Sets canBeDeleted
     *
     * @param bool $canBeDeleted canBeDeleted
     *
     * @return self
     */
    public function setCanBeDeleted($canBeDeleted)
    {
        $this->container['canBeDeleted'] = $canBeDeleted;

        return $this;
    }

    /**
     * Gets canBeAnonymized
     *
     * @return bool
     */
    public function getCanBeAnonymized()
    {
        return $this->container['canBeAnonymized'];
    }

    /**
     * Sets canBeAnonymized
     *
     * @param bool $canBeAnonymized canBeAnonymized
     *
     * @return self
     */
    public function setCanBeAnonymized($canBeAnonymized)
    {
        $this->container['canBeAnonymized'] = $canBeAnonymized;

        return $this;
    }

    /**
     * Gets canBeMerged
     *
     * @return bool
     */
    public function getCanBeMerged()
    {
        return $this->container['canBeMerged'];
    }

    /**
     * Sets canBeMerged
     *
     * @param bool $canBeMerged canBeMerged
     *
     * @return self
     */
    public function setCanBeMerged($canBeMerged)
    {
        $this->container['canBeMerged'] = $canBeMerged;

        return $this;
    }

    /**
     * Gets fullSuspendReason
     *
     * @return mixed
     */
    public function getFullSuspendReason()
    {
        return $this->container['fullSuspendReason'];
    }

    /**
     * Sets fullSuspendReason
     *
     * @param mixed $fullSuspendReason fullSuspendReason
     *
     * @return self
     */
    public function setFullSuspendReason($fullSuspendReason)
    {
        $this->container['fullSuspendReason'] = $fullSuspendReason;

        return $this;
    }

    /**
     * Gets silenceReason
     *
     * @return mixed
     */
    public function getSilenceReason()
    {
        return $this->container['silenceReason'];
    }

    /**
     * Sets silenceReason
     *
     * @param mixed $silenceReason silenceReason
     *
     * @return self
     */
    public function setSilenceReason($silenceReason)
    {
        $this->container['silenceReason'] = $silenceReason;

        return $this;
    }

    /**
     * Gets postEditsCount
     *
     * @return mixed|null
     */
    public function getPostEditsCount()
    {
        return $this->container['postEditsCount'];
    }

    /**
     * Sets postEditsCount
     *
     * @param mixed|null $postEditsCount postEditsCount
     *
     * @return self
     */
    public function setPostEditsCount($postEditsCount)
    {
        $this->container['postEditsCount'] = $postEditsCount;

        return $this;
    }

    /**
     * Gets primaryGroupId
     *
     * @return mixed
     */
    public function getPrimaryGroupId()
    {
        return $this->container['primaryGroupId'];
    }

    /**
     * Sets primaryGroupId
     *
     * @param mixed $primaryGroupId primaryGroupId
     *
     * @return self
     */
    public function setPrimaryGroupId($primaryGroupId)
    {
        $this->container['primaryGroupId'] = $primaryGroupId;

        return $this;
    }

    /**
     * Gets badgeCount
     *
     * @return int
     */
    public function getBadgeCount()
    {
        return $this->container['badgeCount'];
    }

    /**
     * Sets badgeCount
     *
     * @param int $badgeCount badgeCount
     *
     * @return self
     */
    public function setBadgeCount($badgeCount)
    {
        $this->container['badgeCount'] = $badgeCount;

        return $this;
    }

    /**
     * Gets warningsReceivedCount
     *
     * @return int
     */
    public function getWarningsReceivedCount()
    {
        return $this->container['warningsReceivedCount'];
    }

    /**
     * Sets warningsReceivedCount
     *
     * @param int $warningsReceivedCount warningsReceivedCount
     *
     * @return self
     */
    public function setWarningsReceivedCount($warningsReceivedCount)
    {
        $this->container['warningsReceivedCount'] = $warningsReceivedCount;

        return $this;
    }

    /**
     * Gets bounceScore
     *
     * @return mixed
     */
    public function getBounceScore()
    {
        return $this->container['bounceScore'];
    }

    /**
     * Sets bounceScore
     *
     * @param mixed $bounceScore bounceScore
     *
     * @return self
     */
    public function setBounceScore($bounceScore)
    {
        $this->container['bounceScore'] = $bounceScore;

        return $this;
    }

    /**
     * Gets resetBounceScoreAfter
     *
     * @return mixed
     */
    public function getResetBounceScoreAfter()
    {
        return $this->container['resetBounceScoreAfter'];
    }

    /**
     * Sets resetBounceScoreAfter
     *
     * @param mixed $resetBounceScoreAfter resetBounceScoreAfter
     *
     * @return self
     */
    public function setResetBounceScoreAfter($resetBounceScoreAfter)
    {
        $this->container['resetBounceScoreAfter'] = $resetBounceScoreAfter;

        return $this;
    }

    /**
     * Gets canViewActionLogs
     *
     * @return bool
     */
    public function getCanViewActionLogs()
    {
        return $this->container['canViewActionLogs'];
    }

    /**
     * Sets canViewActionLogs
     *
     * @param bool $canViewActionLogs canViewActionLogs
     *
     * @return self
     */
    public function setCanViewActionLogs($canViewActionLogs)
    {
        $this->container['canViewActionLogs'] = $canViewActionLogs;

        return $this;
    }

    /**
     * Gets canDisableSecondFactor
     *
     * @return bool
     */
    public function getCanDisableSecondFactor()
    {
        return $this->container['canDisableSecondFactor'];
    }

    /**
     * Sets canDisableSecondFactor
     *
     * @param bool $canDisableSecondFactor canDisableSecondFactor
     *
     * @return self
     */
    public function setCanDisableSecondFactor($canDisableSecondFactor)
    {
        $this->container['canDisableSecondFactor'] = $canDisableSecondFactor;

        return $this;
    }

    /**
     * Gets canDeleteSsoRecord
     *
     * @return bool
     */
    public function getCanDeleteSsoRecord()
    {
        return $this->container['canDeleteSsoRecord'];
    }

    /**
     * Sets canDeleteSsoRecord
     *
     * @param bool $canDeleteSsoRecord canDeleteSsoRecord
     *
     * @return self
     */
    public function setCanDeleteSsoRecord($canDeleteSsoRecord)
    {
        $this->container['canDeleteSsoRecord'] = $canDeleteSsoRecord;

        return $this;
    }

    /**
     * Gets apiKeyCount
     *
     * @return int
     */
    public function getApiKeyCount()
    {
        return $this->container['apiKeyCount'];
    }

    /**
     * Sets apiKeyCount
     *
     * @param int $apiKeyCount apiKeyCount
     *
     * @return self
     */
    public function setApiKeyCount($apiKeyCount)
    {
        $this->container['apiKeyCount'] = $apiKeyCount;

        return $this;
    }

    /**
     * Gets singleSignOnRecord
     *
     * @return mixed
     */
    public function getSingleSignOnRecord()
    {
        return $this->container['singleSignOnRecord'];
    }

    /**
     * Sets singleSignOnRecord
     *
     * @param mixed $singleSignOnRecord singleSignOnRecord
     *
     * @return self
     */
    public function setSingleSignOnRecord($singleSignOnRecord)
    {
        $this->container['singleSignOnRecord'] = $singleSignOnRecord;

        return $this;
    }

    /**
     * Gets approvedBy
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20047ApprovedBy
     */
    public function getApprovedBy()
    {
        return $this->container['approvedBy'];
    }

    /**
     * Sets approvedBy
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20047ApprovedBy $approvedBy approvedBy
     *
     * @return self
     */
    public function setApprovedBy($approvedBy)
    {
        $this->container['approvedBy'] = $approvedBy;

        return $this;
    }

    /**
     * Gets suspendedBy
     *
     * @return mixed
     */
    public function getSuspendedBy()
    {
        return $this->container['suspendedBy'];
    }

    /**
     * Sets suspendedBy
     *
     * @param mixed $suspendedBy suspendedBy
     *
     * @return self
     */
    public function setSuspendedBy($suspendedBy)
    {
        $this->container['suspendedBy'] = $suspendedBy;

        return $this;
    }

    /**
     * Gets silencedBy
     *
     * @return mixed
     */
    public function getSilencedBy()
    {
        return $this->container['silencedBy'];
    }

    /**
     * Sets silencedBy
     *
     * @param mixed $silencedBy silencedBy
     *
     * @return self
     */
    public function setSilencedBy($silencedBy)
    {
        $this->container['silencedBy'] = $silencedBy;

        return $this;
    }

    /**
     * Gets penaltyCounts
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20047PenaltyCounts|null
     */
    public function getPenaltyCounts()
    {
        return $this->container['penaltyCounts'];
    }

    /**
     * Sets penaltyCounts
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20047PenaltyCounts|null $penaltyCounts penaltyCounts
     *
     * @return self
     */
    public function setPenaltyCounts($penaltyCounts)
    {
        $this->container['penaltyCounts'] = $penaltyCounts;

        return $this;
    }

    /**
     * Gets nextPenalty
     *
     * @return string|null
     */
    public function getNextPenalty()
    {
        return $this->container['nextPenalty'];
    }

    /**
     * Sets nextPenalty
     *
     * @param string|null $nextPenalty nextPenalty
     *
     * @return self
     */
    public function setNextPenalty($nextPenalty)
    {
        $this->container['nextPenalty'] = $nextPenalty;

        return $this;
    }

    /**
     * Gets tl3Requirements
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20047Tl3Requirements|null
     */
    public function getTl3Requirements()
    {
        return $this->container['tl3Requirements'];
    }

    /**
     * Sets tl3Requirements
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20047Tl3Requirements|null $tl3Requirements tl3Requirements
     *
     * @return self
     */
    public function setTl3Requirements($tl3Requirements)
    {
        $this->container['tl3Requirements'] = $tl3Requirements;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return array
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param array $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


