<?php
/**
 * InlineResponse20045User
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Discourse API Documentation
 *
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfinityFree\DiscourseApi\Model;

use \ArrayAccess;
use \InfinityFree\DiscourseApi\ObjectSerializer;

/**
 * InlineResponse20045User Class Doc Comment
 *
 * @category Class
 * @package  InfinityFree\DiscourseApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20045User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_45_user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'username' => 'string',
        'name' => 'string',
        'avatarTemplate' => 'string',
        'lastPostedAt' => 'mixed',
        'lastSeenAt' => 'mixed',
        'createdAt' => 'string',
        'ignored' => 'bool',
        'muted' => 'bool',
        'canIgnoreUser' => 'bool',
        'canMuteUser' => 'bool',
        'canSendPrivateMessages' => 'bool',
        'canSendPrivateMessageToUser' => 'bool',
        'trustLevel' => 'int',
        'moderator' => 'bool',
        'admin' => 'bool',
        'title' => 'mixed',
        'badgeCount' => 'int',
        'email' => 'string',
        'secondaryEmails' => 'array',
        'unconfirmedEmails' => 'array',
        'associatedAccounts' => 'array',
        'secondFactorBackupEnabled' => 'bool',
        'userFields' => '\InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserFields',
        'customFields' => '\InfinityFree\DiscourseApi\Model\InlineResponse20045UserCustomFields',
        'timeRead' => 'int',
        'recentTimeRead' => 'int',
        'primaryGroupId' => 'mixed',
        'primaryGroupName' => 'mixed',
        'flairGroupId' => 'mixed',
        'flairName' => 'mixed',
        'flairUrl' => 'mixed',
        'flairBgColor' => 'mixed',
        'flairColor' => 'mixed',
        'featuredTopic' => 'mixed',
        'staged' => 'bool',
        'canEdit' => 'bool',
        'canEditUsername' => 'bool',
        'canEditEmail' => 'bool',
        'canEditName' => 'bool',
        'uploadedAvatarId' => 'mixed',
        'hasTitleBadges' => 'bool',
        'pendingCount' => 'int',
        'profileViewCount' => 'int',
        'secondFactorEnabled' => 'bool',
        'canUploadProfileHeader' => 'bool',
        'canUploadUserCardBackground' => 'bool',
        'postCount' => 'int',
        'canBeDeleted' => 'bool',
        'canDeleteAllPosts' => 'bool',
        'locale' => 'mixed',
        'mutedCategoryIds' => 'array',
        'regularCategoryIds' => 'array',
        'watchedTags' => 'array',
        'watchingFirstPostTags' => 'array',
        'trackedTags' => 'array',
        'mutedTags' => 'array',
        'trackedCategoryIds' => 'array',
        'watchedCategoryIds' => 'array',
        'watchedFirstPostCategoryIds' => 'array',
        'systemAvatarUploadId' => 'mixed',
        'systemAvatarTemplate' => 'string',
        'mutedUsernames' => 'array',
        'ignoredUsernames' => 'array',
        'allowedPmUsernames' => 'array',
        'mailingListPostsPerDay' => 'int',
        'canChangeBio' => 'bool',
        'canChangeLocation' => 'bool',
        'canChangeWebsite' => 'bool',
        'canChangeTrackingPreferences' => 'bool',
        'userApiKeys' => 'mixed',
        'userAuthTokens' => 'array',
        'userNotificationSchedule' => '\InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserNotificationSchedule',
        'useLogoSmallAsAvatar' => 'bool',
        'featuredUserBadgeIds' => 'array',
        'invitedBy' => 'mixed',
        'groups' => 'array',
        'groupUsers' => 'array',
        'userOption' => '\InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserOption'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'username' => null,
        'name' => null,
        'avatarTemplate' => null,
        'lastPostedAt' => null,
        'lastSeenAt' => null,
        'createdAt' => null,
        'ignored' => null,
        'muted' => null,
        'canIgnoreUser' => null,
        'canMuteUser' => null,
        'canSendPrivateMessages' => null,
        'canSendPrivateMessageToUser' => null,
        'trustLevel' => null,
        'moderator' => null,
        'admin' => null,
        'title' => null,
        'badgeCount' => null,
        'email' => null,
        'secondaryEmails' => null,
        'unconfirmedEmails' => null,
        'associatedAccounts' => null,
        'secondFactorBackupEnabled' => null,
        'userFields' => null,
        'customFields' => null,
        'timeRead' => null,
        'recentTimeRead' => null,
        'primaryGroupId' => null,
        'primaryGroupName' => null,
        'flairGroupId' => null,
        'flairName' => null,
        'flairUrl' => null,
        'flairBgColor' => null,
        'flairColor' => null,
        'featuredTopic' => null,
        'staged' => null,
        'canEdit' => null,
        'canEditUsername' => null,
        'canEditEmail' => null,
        'canEditName' => null,
        'uploadedAvatarId' => null,
        'hasTitleBadges' => null,
        'pendingCount' => null,
        'profileViewCount' => null,
        'secondFactorEnabled' => null,
        'canUploadProfileHeader' => null,
        'canUploadUserCardBackground' => null,
        'postCount' => null,
        'canBeDeleted' => null,
        'canDeleteAllPosts' => null,
        'locale' => null,
        'mutedCategoryIds' => null,
        'regularCategoryIds' => null,
        'watchedTags' => null,
        'watchingFirstPostTags' => null,
        'trackedTags' => null,
        'mutedTags' => null,
        'trackedCategoryIds' => null,
        'watchedCategoryIds' => null,
        'watchedFirstPostCategoryIds' => null,
        'systemAvatarUploadId' => null,
        'systemAvatarTemplate' => null,
        'mutedUsernames' => null,
        'ignoredUsernames' => null,
        'allowedPmUsernames' => null,
        'mailingListPostsPerDay' => null,
        'canChangeBio' => null,
        'canChangeLocation' => null,
        'canChangeWebsite' => null,
        'canChangeTrackingPreferences' => null,
        'userApiKeys' => null,
        'userAuthTokens' => null,
        'userNotificationSchedule' => null,
        'useLogoSmallAsAvatar' => null,
        'featuredUserBadgeIds' => null,
        'invitedBy' => null,
        'groups' => null,
        'groupUsers' => null,
        'userOption' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'name' => 'name',
        'avatarTemplate' => 'avatar_template',
        'lastPostedAt' => 'last_posted_at',
        'lastSeenAt' => 'last_seen_at',
        'createdAt' => 'created_at',
        'ignored' => 'ignored',
        'muted' => 'muted',
        'canIgnoreUser' => 'can_ignore_user',
        'canMuteUser' => 'can_mute_user',
        'canSendPrivateMessages' => 'can_send_private_messages',
        'canSendPrivateMessageToUser' => 'can_send_private_message_to_user',
        'trustLevel' => 'trust_level',
        'moderator' => 'moderator',
        'admin' => 'admin',
        'title' => 'title',
        'badgeCount' => 'badge_count',
        'email' => 'email',
        'secondaryEmails' => 'secondary_emails',
        'unconfirmedEmails' => 'unconfirmed_emails',
        'associatedAccounts' => 'associated_accounts',
        'secondFactorBackupEnabled' => 'second_factor_backup_enabled',
        'userFields' => 'user_fields',
        'customFields' => 'custom_fields',
        'timeRead' => 'time_read',
        'recentTimeRead' => 'recent_time_read',
        'primaryGroupId' => 'primary_group_id',
        'primaryGroupName' => 'primary_group_name',
        'flairGroupId' => 'flair_group_id',
        'flairName' => 'flair_name',
        'flairUrl' => 'flair_url',
        'flairBgColor' => 'flair_bg_color',
        'flairColor' => 'flair_color',
        'featuredTopic' => 'featured_topic',
        'staged' => 'staged',
        'canEdit' => 'can_edit',
        'canEditUsername' => 'can_edit_username',
        'canEditEmail' => 'can_edit_email',
        'canEditName' => 'can_edit_name',
        'uploadedAvatarId' => 'uploaded_avatar_id',
        'hasTitleBadges' => 'has_title_badges',
        'pendingCount' => 'pending_count',
        'profileViewCount' => 'profile_view_count',
        'secondFactorEnabled' => 'second_factor_enabled',
        'canUploadProfileHeader' => 'can_upload_profile_header',
        'canUploadUserCardBackground' => 'can_upload_user_card_background',
        'postCount' => 'post_count',
        'canBeDeleted' => 'can_be_deleted',
        'canDeleteAllPosts' => 'can_delete_all_posts',
        'locale' => 'locale',
        'mutedCategoryIds' => 'muted_category_ids',
        'regularCategoryIds' => 'regular_category_ids',
        'watchedTags' => 'watched_tags',
        'watchingFirstPostTags' => 'watching_first_post_tags',
        'trackedTags' => 'tracked_tags',
        'mutedTags' => 'muted_tags',
        'trackedCategoryIds' => 'tracked_category_ids',
        'watchedCategoryIds' => 'watched_category_ids',
        'watchedFirstPostCategoryIds' => 'watched_first_post_category_ids',
        'systemAvatarUploadId' => 'system_avatar_upload_id',
        'systemAvatarTemplate' => 'system_avatar_template',
        'mutedUsernames' => 'muted_usernames',
        'ignoredUsernames' => 'ignored_usernames',
        'allowedPmUsernames' => 'allowed_pm_usernames',
        'mailingListPostsPerDay' => 'mailing_list_posts_per_day',
        'canChangeBio' => 'can_change_bio',
        'canChangeLocation' => 'can_change_location',
        'canChangeWebsite' => 'can_change_website',
        'canChangeTrackingPreferences' => 'can_change_tracking_preferences',
        'userApiKeys' => 'user_api_keys',
        'userAuthTokens' => 'user_auth_tokens',
        'userNotificationSchedule' => 'user_notification_schedule',
        'useLogoSmallAsAvatar' => 'use_logo_small_as_avatar',
        'featuredUserBadgeIds' => 'featured_user_badge_ids',
        'invitedBy' => 'invited_by',
        'groups' => 'groups',
        'groupUsers' => 'group_users',
        'userOption' => 'user_option'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'name' => 'setName',
        'avatarTemplate' => 'setAvatarTemplate',
        'lastPostedAt' => 'setLastPostedAt',
        'lastSeenAt' => 'setLastSeenAt',
        'createdAt' => 'setCreatedAt',
        'ignored' => 'setIgnored',
        'muted' => 'setMuted',
        'canIgnoreUser' => 'setCanIgnoreUser',
        'canMuteUser' => 'setCanMuteUser',
        'canSendPrivateMessages' => 'setCanSendPrivateMessages',
        'canSendPrivateMessageToUser' => 'setCanSendPrivateMessageToUser',
        'trustLevel' => 'setTrustLevel',
        'moderator' => 'setModerator',
        'admin' => 'setAdmin',
        'title' => 'setTitle',
        'badgeCount' => 'setBadgeCount',
        'email' => 'setEmail',
        'secondaryEmails' => 'setSecondaryEmails',
        'unconfirmedEmails' => 'setUnconfirmedEmails',
        'associatedAccounts' => 'setAssociatedAccounts',
        'secondFactorBackupEnabled' => 'setSecondFactorBackupEnabled',
        'userFields' => 'setUserFields',
        'customFields' => 'setCustomFields',
        'timeRead' => 'setTimeRead',
        'recentTimeRead' => 'setRecentTimeRead',
        'primaryGroupId' => 'setPrimaryGroupId',
        'primaryGroupName' => 'setPrimaryGroupName',
        'flairGroupId' => 'setFlairGroupId',
        'flairName' => 'setFlairName',
        'flairUrl' => 'setFlairUrl',
        'flairBgColor' => 'setFlairBgColor',
        'flairColor' => 'setFlairColor',
        'featuredTopic' => 'setFeaturedTopic',
        'staged' => 'setStaged',
        'canEdit' => 'setCanEdit',
        'canEditUsername' => 'setCanEditUsername',
        'canEditEmail' => 'setCanEditEmail',
        'canEditName' => 'setCanEditName',
        'uploadedAvatarId' => 'setUploadedAvatarId',
        'hasTitleBadges' => 'setHasTitleBadges',
        'pendingCount' => 'setPendingCount',
        'profileViewCount' => 'setProfileViewCount',
        'secondFactorEnabled' => 'setSecondFactorEnabled',
        'canUploadProfileHeader' => 'setCanUploadProfileHeader',
        'canUploadUserCardBackground' => 'setCanUploadUserCardBackground',
        'postCount' => 'setPostCount',
        'canBeDeleted' => 'setCanBeDeleted',
        'canDeleteAllPosts' => 'setCanDeleteAllPosts',
        'locale' => 'setLocale',
        'mutedCategoryIds' => 'setMutedCategoryIds',
        'regularCategoryIds' => 'setRegularCategoryIds',
        'watchedTags' => 'setWatchedTags',
        'watchingFirstPostTags' => 'setWatchingFirstPostTags',
        'trackedTags' => 'setTrackedTags',
        'mutedTags' => 'setMutedTags',
        'trackedCategoryIds' => 'setTrackedCategoryIds',
        'watchedCategoryIds' => 'setWatchedCategoryIds',
        'watchedFirstPostCategoryIds' => 'setWatchedFirstPostCategoryIds',
        'systemAvatarUploadId' => 'setSystemAvatarUploadId',
        'systemAvatarTemplate' => 'setSystemAvatarTemplate',
        'mutedUsernames' => 'setMutedUsernames',
        'ignoredUsernames' => 'setIgnoredUsernames',
        'allowedPmUsernames' => 'setAllowedPmUsernames',
        'mailingListPostsPerDay' => 'setMailingListPostsPerDay',
        'canChangeBio' => 'setCanChangeBio',
        'canChangeLocation' => 'setCanChangeLocation',
        'canChangeWebsite' => 'setCanChangeWebsite',
        'canChangeTrackingPreferences' => 'setCanChangeTrackingPreferences',
        'userApiKeys' => 'setUserApiKeys',
        'userAuthTokens' => 'setUserAuthTokens',
        'userNotificationSchedule' => 'setUserNotificationSchedule',
        'useLogoSmallAsAvatar' => 'setUseLogoSmallAsAvatar',
        'featuredUserBadgeIds' => 'setFeaturedUserBadgeIds',
        'invitedBy' => 'setInvitedBy',
        'groups' => 'setGroups',
        'groupUsers' => 'setGroupUsers',
        'userOption' => 'setUserOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'name' => 'getName',
        'avatarTemplate' => 'getAvatarTemplate',
        'lastPostedAt' => 'getLastPostedAt',
        'lastSeenAt' => 'getLastSeenAt',
        'createdAt' => 'getCreatedAt',
        'ignored' => 'getIgnored',
        'muted' => 'getMuted',
        'canIgnoreUser' => 'getCanIgnoreUser',
        'canMuteUser' => 'getCanMuteUser',
        'canSendPrivateMessages' => 'getCanSendPrivateMessages',
        'canSendPrivateMessageToUser' => 'getCanSendPrivateMessageToUser',
        'trustLevel' => 'getTrustLevel',
        'moderator' => 'getModerator',
        'admin' => 'getAdmin',
        'title' => 'getTitle',
        'badgeCount' => 'getBadgeCount',
        'email' => 'getEmail',
        'secondaryEmails' => 'getSecondaryEmails',
        'unconfirmedEmails' => 'getUnconfirmedEmails',
        'associatedAccounts' => 'getAssociatedAccounts',
        'secondFactorBackupEnabled' => 'getSecondFactorBackupEnabled',
        'userFields' => 'getUserFields',
        'customFields' => 'getCustomFields',
        'timeRead' => 'getTimeRead',
        'recentTimeRead' => 'getRecentTimeRead',
        'primaryGroupId' => 'getPrimaryGroupId',
        'primaryGroupName' => 'getPrimaryGroupName',
        'flairGroupId' => 'getFlairGroupId',
        'flairName' => 'getFlairName',
        'flairUrl' => 'getFlairUrl',
        'flairBgColor' => 'getFlairBgColor',
        'flairColor' => 'getFlairColor',
        'featuredTopic' => 'getFeaturedTopic',
        'staged' => 'getStaged',
        'canEdit' => 'getCanEdit',
        'canEditUsername' => 'getCanEditUsername',
        'canEditEmail' => 'getCanEditEmail',
        'canEditName' => 'getCanEditName',
        'uploadedAvatarId' => 'getUploadedAvatarId',
        'hasTitleBadges' => 'getHasTitleBadges',
        'pendingCount' => 'getPendingCount',
        'profileViewCount' => 'getProfileViewCount',
        'secondFactorEnabled' => 'getSecondFactorEnabled',
        'canUploadProfileHeader' => 'getCanUploadProfileHeader',
        'canUploadUserCardBackground' => 'getCanUploadUserCardBackground',
        'postCount' => 'getPostCount',
        'canBeDeleted' => 'getCanBeDeleted',
        'canDeleteAllPosts' => 'getCanDeleteAllPosts',
        'locale' => 'getLocale',
        'mutedCategoryIds' => 'getMutedCategoryIds',
        'regularCategoryIds' => 'getRegularCategoryIds',
        'watchedTags' => 'getWatchedTags',
        'watchingFirstPostTags' => 'getWatchingFirstPostTags',
        'trackedTags' => 'getTrackedTags',
        'mutedTags' => 'getMutedTags',
        'trackedCategoryIds' => 'getTrackedCategoryIds',
        'watchedCategoryIds' => 'getWatchedCategoryIds',
        'watchedFirstPostCategoryIds' => 'getWatchedFirstPostCategoryIds',
        'systemAvatarUploadId' => 'getSystemAvatarUploadId',
        'systemAvatarTemplate' => 'getSystemAvatarTemplate',
        'mutedUsernames' => 'getMutedUsernames',
        'ignoredUsernames' => 'getIgnoredUsernames',
        'allowedPmUsernames' => 'getAllowedPmUsernames',
        'mailingListPostsPerDay' => 'getMailingListPostsPerDay',
        'canChangeBio' => 'getCanChangeBio',
        'canChangeLocation' => 'getCanChangeLocation',
        'canChangeWebsite' => 'getCanChangeWebsite',
        'canChangeTrackingPreferences' => 'getCanChangeTrackingPreferences',
        'userApiKeys' => 'getUserApiKeys',
        'userAuthTokens' => 'getUserAuthTokens',
        'userNotificationSchedule' => 'getUserNotificationSchedule',
        'useLogoSmallAsAvatar' => 'getUseLogoSmallAsAvatar',
        'featuredUserBadgeIds' => 'getFeaturedUserBadgeIds',
        'invitedBy' => 'getInvitedBy',
        'groups' => 'getGroups',
        'groupUsers' => 'getGroupUsers',
        'userOption' => 'getUserOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['avatarTemplate'] = $data['avatarTemplate'] ?? null;
        $this->container['lastPostedAt'] = $data['lastPostedAt'] ?? null;
        $this->container['lastSeenAt'] = $data['lastSeenAt'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['ignored'] = $data['ignored'] ?? null;
        $this->container['muted'] = $data['muted'] ?? null;
        $this->container['canIgnoreUser'] = $data['canIgnoreUser'] ?? null;
        $this->container['canMuteUser'] = $data['canMuteUser'] ?? null;
        $this->container['canSendPrivateMessages'] = $data['canSendPrivateMessages'] ?? null;
        $this->container['canSendPrivateMessageToUser'] = $data['canSendPrivateMessageToUser'] ?? null;
        $this->container['trustLevel'] = $data['trustLevel'] ?? null;
        $this->container['moderator'] = $data['moderator'] ?? null;
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['badgeCount'] = $data['badgeCount'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['secondaryEmails'] = $data['secondaryEmails'] ?? null;
        $this->container['unconfirmedEmails'] = $data['unconfirmedEmails'] ?? null;
        $this->container['associatedAccounts'] = $data['associatedAccounts'] ?? null;
        $this->container['secondFactorBackupEnabled'] = $data['secondFactorBackupEnabled'] ?? null;
        $this->container['userFields'] = $data['userFields'] ?? null;
        $this->container['customFields'] = $data['customFields'] ?? null;
        $this->container['timeRead'] = $data['timeRead'] ?? null;
        $this->container['recentTimeRead'] = $data['recentTimeRead'] ?? null;
        $this->container['primaryGroupId'] = $data['primaryGroupId'] ?? null;
        $this->container['primaryGroupName'] = $data['primaryGroupName'] ?? null;
        $this->container['flairGroupId'] = $data['flairGroupId'] ?? null;
        $this->container['flairName'] = $data['flairName'] ?? null;
        $this->container['flairUrl'] = $data['flairUrl'] ?? null;
        $this->container['flairBgColor'] = $data['flairBgColor'] ?? null;
        $this->container['flairColor'] = $data['flairColor'] ?? null;
        $this->container['featuredTopic'] = $data['featuredTopic'] ?? null;
        $this->container['staged'] = $data['staged'] ?? null;
        $this->container['canEdit'] = $data['canEdit'] ?? null;
        $this->container['canEditUsername'] = $data['canEditUsername'] ?? null;
        $this->container['canEditEmail'] = $data['canEditEmail'] ?? null;
        $this->container['canEditName'] = $data['canEditName'] ?? null;
        $this->container['uploadedAvatarId'] = $data['uploadedAvatarId'] ?? null;
        $this->container['hasTitleBadges'] = $data['hasTitleBadges'] ?? null;
        $this->container['pendingCount'] = $data['pendingCount'] ?? null;
        $this->container['profileViewCount'] = $data['profileViewCount'] ?? null;
        $this->container['secondFactorEnabled'] = $data['secondFactorEnabled'] ?? null;
        $this->container['canUploadProfileHeader'] = $data['canUploadProfileHeader'] ?? null;
        $this->container['canUploadUserCardBackground'] = $data['canUploadUserCardBackground'] ?? null;
        $this->container['postCount'] = $data['postCount'] ?? null;
        $this->container['canBeDeleted'] = $data['canBeDeleted'] ?? null;
        $this->container['canDeleteAllPosts'] = $data['canDeleteAllPosts'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['mutedCategoryIds'] = $data['mutedCategoryIds'] ?? null;
        $this->container['regularCategoryIds'] = $data['regularCategoryIds'] ?? null;
        $this->container['watchedTags'] = $data['watchedTags'] ?? null;
        $this->container['watchingFirstPostTags'] = $data['watchingFirstPostTags'] ?? null;
        $this->container['trackedTags'] = $data['trackedTags'] ?? null;
        $this->container['mutedTags'] = $data['mutedTags'] ?? null;
        $this->container['trackedCategoryIds'] = $data['trackedCategoryIds'] ?? null;
        $this->container['watchedCategoryIds'] = $data['watchedCategoryIds'] ?? null;
        $this->container['watchedFirstPostCategoryIds'] = $data['watchedFirstPostCategoryIds'] ?? null;
        $this->container['systemAvatarUploadId'] = $data['systemAvatarUploadId'] ?? null;
        $this->container['systemAvatarTemplate'] = $data['systemAvatarTemplate'] ?? null;
        $this->container['mutedUsernames'] = $data['mutedUsernames'] ?? null;
        $this->container['ignoredUsernames'] = $data['ignoredUsernames'] ?? null;
        $this->container['allowedPmUsernames'] = $data['allowedPmUsernames'] ?? null;
        $this->container['mailingListPostsPerDay'] = $data['mailingListPostsPerDay'] ?? null;
        $this->container['canChangeBio'] = $data['canChangeBio'] ?? null;
        $this->container['canChangeLocation'] = $data['canChangeLocation'] ?? null;
        $this->container['canChangeWebsite'] = $data['canChangeWebsite'] ?? null;
        $this->container['canChangeTrackingPreferences'] = $data['canChangeTrackingPreferences'] ?? null;
        $this->container['userApiKeys'] = $data['userApiKeys'] ?? null;
        $this->container['userAuthTokens'] = $data['userAuthTokens'] ?? null;
        $this->container['userNotificationSchedule'] = $data['userNotificationSchedule'] ?? null;
        $this->container['useLogoSmallAsAvatar'] = $data['useLogoSmallAsAvatar'] ?? null;
        $this->container['featuredUserBadgeIds'] = $data['featuredUserBadgeIds'] ?? null;
        $this->container['invitedBy'] = $data['invitedBy'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
        $this->container['groupUsers'] = $data['groupUsers'] ?? null;
        $this->container['userOption'] = $data['userOption'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['avatarTemplate'] === null) {
            $invalidProperties[] = "'avatarTemplate' can't be null";
        }
        if ($this->container['lastPostedAt'] === null) {
            $invalidProperties[] = "'lastPostedAt' can't be null";
        }
        if ($this->container['lastSeenAt'] === null) {
            $invalidProperties[] = "'lastSeenAt' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['ignored'] === null) {
            $invalidProperties[] = "'ignored' can't be null";
        }
        if ($this->container['muted'] === null) {
            $invalidProperties[] = "'muted' can't be null";
        }
        if ($this->container['canIgnoreUser'] === null) {
            $invalidProperties[] = "'canIgnoreUser' can't be null";
        }
        if ($this->container['canMuteUser'] === null) {
            $invalidProperties[] = "'canMuteUser' can't be null";
        }
        if ($this->container['canSendPrivateMessages'] === null) {
            $invalidProperties[] = "'canSendPrivateMessages' can't be null";
        }
        if ($this->container['canSendPrivateMessageToUser'] === null) {
            $invalidProperties[] = "'canSendPrivateMessageToUser' can't be null";
        }
        if ($this->container['trustLevel'] === null) {
            $invalidProperties[] = "'trustLevel' can't be null";
        }
        if ($this->container['moderator'] === null) {
            $invalidProperties[] = "'moderator' can't be null";
        }
        if ($this->container['admin'] === null) {
            $invalidProperties[] = "'admin' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['badgeCount'] === null) {
            $invalidProperties[] = "'badgeCount' can't be null";
        }
        if ($this->container['customFields'] === null) {
            $invalidProperties[] = "'customFields' can't be null";
        }
        if ($this->container['timeRead'] === null) {
            $invalidProperties[] = "'timeRead' can't be null";
        }
        if ($this->container['recentTimeRead'] === null) {
            $invalidProperties[] = "'recentTimeRead' can't be null";
        }
        if ($this->container['primaryGroupId'] === null) {
            $invalidProperties[] = "'primaryGroupId' can't be null";
        }
        if ($this->container['primaryGroupName'] === null) {
            $invalidProperties[] = "'primaryGroupName' can't be null";
        }
        if ($this->container['flairGroupId'] === null) {
            $invalidProperties[] = "'flairGroupId' can't be null";
        }
        if ($this->container['flairName'] === null) {
            $invalidProperties[] = "'flairName' can't be null";
        }
        if ($this->container['flairUrl'] === null) {
            $invalidProperties[] = "'flairUrl' can't be null";
        }
        if ($this->container['flairBgColor'] === null) {
            $invalidProperties[] = "'flairBgColor' can't be null";
        }
        if ($this->container['flairColor'] === null) {
            $invalidProperties[] = "'flairColor' can't be null";
        }
        if ($this->container['featuredTopic'] === null) {
            $invalidProperties[] = "'featuredTopic' can't be null";
        }
        if ($this->container['staged'] === null) {
            $invalidProperties[] = "'staged' can't be null";
        }
        if ($this->container['canEdit'] === null) {
            $invalidProperties[] = "'canEdit' can't be null";
        }
        if ($this->container['canEditUsername'] === null) {
            $invalidProperties[] = "'canEditUsername' can't be null";
        }
        if ($this->container['canEditEmail'] === null) {
            $invalidProperties[] = "'canEditEmail' can't be null";
        }
        if ($this->container['canEditName'] === null) {
            $invalidProperties[] = "'canEditName' can't be null";
        }
        if ($this->container['uploadedAvatarId'] === null) {
            $invalidProperties[] = "'uploadedAvatarId' can't be null";
        }
        if ($this->container['hasTitleBadges'] === null) {
            $invalidProperties[] = "'hasTitleBadges' can't be null";
        }
        if ($this->container['pendingCount'] === null) {
            $invalidProperties[] = "'pendingCount' can't be null";
        }
        if ($this->container['profileViewCount'] === null) {
            $invalidProperties[] = "'profileViewCount' can't be null";
        }
        if ($this->container['secondFactorEnabled'] === null) {
            $invalidProperties[] = "'secondFactorEnabled' can't be null";
        }
        if ($this->container['canUploadProfileHeader'] === null) {
            $invalidProperties[] = "'canUploadProfileHeader' can't be null";
        }
        if ($this->container['canUploadUserCardBackground'] === null) {
            $invalidProperties[] = "'canUploadUserCardBackground' can't be null";
        }
        if ($this->container['postCount'] === null) {
            $invalidProperties[] = "'postCount' can't be null";
        }
        if ($this->container['canBeDeleted'] === null) {
            $invalidProperties[] = "'canBeDeleted' can't be null";
        }
        if ($this->container['canDeleteAllPosts'] === null) {
            $invalidProperties[] = "'canDeleteAllPosts' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ($this->container['mutedCategoryIds'] === null) {
            $invalidProperties[] = "'mutedCategoryIds' can't be null";
        }
        if ($this->container['regularCategoryIds'] === null) {
            $invalidProperties[] = "'regularCategoryIds' can't be null";
        }
        if ($this->container['watchedTags'] === null) {
            $invalidProperties[] = "'watchedTags' can't be null";
        }
        if ($this->container['watchingFirstPostTags'] === null) {
            $invalidProperties[] = "'watchingFirstPostTags' can't be null";
        }
        if ($this->container['trackedTags'] === null) {
            $invalidProperties[] = "'trackedTags' can't be null";
        }
        if ($this->container['mutedTags'] === null) {
            $invalidProperties[] = "'mutedTags' can't be null";
        }
        if ($this->container['trackedCategoryIds'] === null) {
            $invalidProperties[] = "'trackedCategoryIds' can't be null";
        }
        if ($this->container['watchedCategoryIds'] === null) {
            $invalidProperties[] = "'watchedCategoryIds' can't be null";
        }
        if ($this->container['watchedFirstPostCategoryIds'] === null) {
            $invalidProperties[] = "'watchedFirstPostCategoryIds' can't be null";
        }
        if ($this->container['systemAvatarUploadId'] === null) {
            $invalidProperties[] = "'systemAvatarUploadId' can't be null";
        }
        if ($this->container['systemAvatarTemplate'] === null) {
            $invalidProperties[] = "'systemAvatarTemplate' can't be null";
        }
        if ($this->container['mutedUsernames'] === null) {
            $invalidProperties[] = "'mutedUsernames' can't be null";
        }
        if ($this->container['ignoredUsernames'] === null) {
            $invalidProperties[] = "'ignoredUsernames' can't be null";
        }
        if ($this->container['allowedPmUsernames'] === null) {
            $invalidProperties[] = "'allowedPmUsernames' can't be null";
        }
        if ($this->container['mailingListPostsPerDay'] === null) {
            $invalidProperties[] = "'mailingListPostsPerDay' can't be null";
        }
        if ($this->container['canChangeBio'] === null) {
            $invalidProperties[] = "'canChangeBio' can't be null";
        }
        if ($this->container['canChangeLocation'] === null) {
            $invalidProperties[] = "'canChangeLocation' can't be null";
        }
        if ($this->container['canChangeWebsite'] === null) {
            $invalidProperties[] = "'canChangeWebsite' can't be null";
        }
        if ($this->container['canChangeTrackingPreferences'] === null) {
            $invalidProperties[] = "'canChangeTrackingPreferences' can't be null";
        }
        if ($this->container['userApiKeys'] === null) {
            $invalidProperties[] = "'userApiKeys' can't be null";
        }
        if ($this->container['userAuthTokens'] === null) {
            $invalidProperties[] = "'userAuthTokens' can't be null";
        }
        if ($this->container['userNotificationSchedule'] === null) {
            $invalidProperties[] = "'userNotificationSchedule' can't be null";
        }
        if ($this->container['useLogoSmallAsAvatar'] === null) {
            $invalidProperties[] = "'useLogoSmallAsAvatar' can't be null";
        }
        if ($this->container['featuredUserBadgeIds'] === null) {
            $invalidProperties[] = "'featuredUserBadgeIds' can't be null";
        }
        if ($this->container['invitedBy'] === null) {
            $invalidProperties[] = "'invitedBy' can't be null";
        }
        if ($this->container['groups'] === null) {
            $invalidProperties[] = "'groups' can't be null";
        }
        if ($this->container['groupUsers'] === null) {
            $invalidProperties[] = "'groupUsers' can't be null";
        }
        if ($this->container['userOption'] === null) {
            $invalidProperties[] = "'userOption' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets avatarTemplate
     *
     * @return string
     */
    public function getAvatarTemplate()
    {
        return $this->container['avatarTemplate'];
    }

    /**
     * Sets avatarTemplate
     *
     * @param string $avatarTemplate avatarTemplate
     *
     * @return self
     */
    public function setAvatarTemplate($avatarTemplate)
    {
        $this->container['avatarTemplate'] = $avatarTemplate;

        return $this;
    }

    /**
     * Gets lastPostedAt
     *
     * @return mixed
     */
    public function getLastPostedAt()
    {
        return $this->container['lastPostedAt'];
    }

    /**
     * Sets lastPostedAt
     *
     * @param mixed $lastPostedAt lastPostedAt
     *
     * @return self
     */
    public function setLastPostedAt($lastPostedAt)
    {
        $this->container['lastPostedAt'] = $lastPostedAt;

        return $this;
    }

    /**
     * Gets lastSeenAt
     *
     * @return mixed
     */
    public function getLastSeenAt()
    {
        return $this->container['lastSeenAt'];
    }

    /**
     * Sets lastSeenAt
     *
     * @param mixed $lastSeenAt lastSeenAt
     *
     * @return self
     */
    public function setLastSeenAt($lastSeenAt)
    {
        $this->container['lastSeenAt'] = $lastSeenAt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets ignored
     *
     * @return bool
     */
    public function getIgnored()
    {
        return $this->container['ignored'];
    }

    /**
     * Sets ignored
     *
     * @param bool $ignored ignored
     *
     * @return self
     */
    public function setIgnored($ignored)
    {
        $this->container['ignored'] = $ignored;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return bool
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param bool $muted muted
     *
     * @return self
     */
    public function setMuted($muted)
    {
        $this->container['muted'] = $muted;

        return $this;
    }

    /**
     * Gets canIgnoreUser
     *
     * @return bool
     */
    public function getCanIgnoreUser()
    {
        return $this->container['canIgnoreUser'];
    }

    /**
     * Sets canIgnoreUser
     *
     * @param bool $canIgnoreUser canIgnoreUser
     *
     * @return self
     */
    public function setCanIgnoreUser($canIgnoreUser)
    {
        $this->container['canIgnoreUser'] = $canIgnoreUser;

        return $this;
    }

    /**
     * Gets canMuteUser
     *
     * @return bool
     */
    public function getCanMuteUser()
    {
        return $this->container['canMuteUser'];
    }

    /**
     * Sets canMuteUser
     *
     * @param bool $canMuteUser canMuteUser
     *
     * @return self
     */
    public function setCanMuteUser($canMuteUser)
    {
        $this->container['canMuteUser'] = $canMuteUser;

        return $this;
    }

    /**
     * Gets canSendPrivateMessages
     *
     * @return bool
     */
    public function getCanSendPrivateMessages()
    {
        return $this->container['canSendPrivateMessages'];
    }

    /**
     * Sets canSendPrivateMessages
     *
     * @param bool $canSendPrivateMessages canSendPrivateMessages
     *
     * @return self
     */
    public function setCanSendPrivateMessages($canSendPrivateMessages)
    {
        $this->container['canSendPrivateMessages'] = $canSendPrivateMessages;

        return $this;
    }

    /**
     * Gets canSendPrivateMessageToUser
     *
     * @return bool
     */
    public function getCanSendPrivateMessageToUser()
    {
        return $this->container['canSendPrivateMessageToUser'];
    }

    /**
     * Sets canSendPrivateMessageToUser
     *
     * @param bool $canSendPrivateMessageToUser canSendPrivateMessageToUser
     *
     * @return self
     */
    public function setCanSendPrivateMessageToUser($canSendPrivateMessageToUser)
    {
        $this->container['canSendPrivateMessageToUser'] = $canSendPrivateMessageToUser;

        return $this;
    }

    /**
     * Gets trustLevel
     *
     * @return int
     */
    public function getTrustLevel()
    {
        return $this->container['trustLevel'];
    }

    /**
     * Sets trustLevel
     *
     * @param int $trustLevel trustLevel
     *
     * @return self
     */
    public function setTrustLevel($trustLevel)
    {
        $this->container['trustLevel'] = $trustLevel;

        return $this;
    }

    /**
     * Gets moderator
     *
     * @return bool
     */
    public function getModerator()
    {
        return $this->container['moderator'];
    }

    /**
     * Sets moderator
     *
     * @param bool $moderator moderator
     *
     * @return self
     */
    public function setModerator($moderator)
    {
        $this->container['moderator'] = $moderator;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool $admin admin
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets badgeCount
     *
     * @return int
     */
    public function getBadgeCount()
    {
        return $this->container['badgeCount'];
    }

    /**
     * Sets badgeCount
     *
     * @param int $badgeCount badgeCount
     *
     * @return self
     */
    public function setBadgeCount($badgeCount)
    {
        $this->container['badgeCount'] = $badgeCount;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets secondaryEmails
     *
     * @return array|null
     */
    public function getSecondaryEmails()
    {
        return $this->container['secondaryEmails'];
    }

    /**
     * Sets secondaryEmails
     *
     * @param array|null $secondaryEmails secondaryEmails
     *
     * @return self
     */
    public function setSecondaryEmails($secondaryEmails)
    {
        $this->container['secondaryEmails'] = $secondaryEmails;

        return $this;
    }

    /**
     * Gets unconfirmedEmails
     *
     * @return array|null
     */
    public function getUnconfirmedEmails()
    {
        return $this->container['unconfirmedEmails'];
    }

    /**
     * Sets unconfirmedEmails
     *
     * @param array|null $unconfirmedEmails unconfirmedEmails
     *
     * @return self
     */
    public function setUnconfirmedEmails($unconfirmedEmails)
    {
        $this->container['unconfirmedEmails'] = $unconfirmedEmails;

        return $this;
    }

    /**
     * Gets associatedAccounts
     *
     * @return array|null
     */
    public function getAssociatedAccounts()
    {
        return $this->container['associatedAccounts'];
    }

    /**
     * Sets associatedAccounts
     *
     * @param array|null $associatedAccounts associatedAccounts
     *
     * @return self
     */
    public function setAssociatedAccounts($associatedAccounts)
    {
        $this->container['associatedAccounts'] = $associatedAccounts;

        return $this;
    }

    /**
     * Gets secondFactorBackupEnabled
     *
     * @return bool|null
     */
    public function getSecondFactorBackupEnabled()
    {
        return $this->container['secondFactorBackupEnabled'];
    }

    /**
     * Sets secondFactorBackupEnabled
     *
     * @param bool|null $secondFactorBackupEnabled secondFactorBackupEnabled
     *
     * @return self
     */
    public function setSecondFactorBackupEnabled($secondFactorBackupEnabled)
    {
        $this->container['secondFactorBackupEnabled'] = $secondFactorBackupEnabled;

        return $this;
    }

    /**
     * Gets userFields
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserFields|null
     */
    public function getUserFields()
    {
        return $this->container['userFields'];
    }

    /**
     * Sets userFields
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserFields|null $userFields userFields
     *
     * @return self
     */
    public function setUserFields($userFields)
    {
        $this->container['userFields'] = $userFields;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20045UserCustomFields
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20045UserCustomFields $customFields customFields
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets timeRead
     *
     * @return int
     */
    public function getTimeRead()
    {
        return $this->container['timeRead'];
    }

    /**
     * Sets timeRead
     *
     * @param int $timeRead timeRead
     *
     * @return self
     */
    public function setTimeRead($timeRead)
    {
        $this->container['timeRead'] = $timeRead;

        return $this;
    }

    /**
     * Gets recentTimeRead
     *
     * @return int
     */
    public function getRecentTimeRead()
    {
        return $this->container['recentTimeRead'];
    }

    /**
     * Sets recentTimeRead
     *
     * @param int $recentTimeRead recentTimeRead
     *
     * @return self
     */
    public function setRecentTimeRead($recentTimeRead)
    {
        $this->container['recentTimeRead'] = $recentTimeRead;

        return $this;
    }

    /**
     * Gets primaryGroupId
     *
     * @return mixed
     */
    public function getPrimaryGroupId()
    {
        return $this->container['primaryGroupId'];
    }

    /**
     * Sets primaryGroupId
     *
     * @param mixed $primaryGroupId primaryGroupId
     *
     * @return self
     */
    public function setPrimaryGroupId($primaryGroupId)
    {
        $this->container['primaryGroupId'] = $primaryGroupId;

        return $this;
    }

    /**
     * Gets primaryGroupName
     *
     * @return mixed
     */
    public function getPrimaryGroupName()
    {
        return $this->container['primaryGroupName'];
    }

    /**
     * Sets primaryGroupName
     *
     * @param mixed $primaryGroupName primaryGroupName
     *
     * @return self
     */
    public function setPrimaryGroupName($primaryGroupName)
    {
        $this->container['primaryGroupName'] = $primaryGroupName;

        return $this;
    }

    /**
     * Gets flairGroupId
     *
     * @return mixed
     */
    public function getFlairGroupId()
    {
        return $this->container['flairGroupId'];
    }

    /**
     * Sets flairGroupId
     *
     * @param mixed $flairGroupId flairGroupId
     *
     * @return self
     */
    public function setFlairGroupId($flairGroupId)
    {
        $this->container['flairGroupId'] = $flairGroupId;

        return $this;
    }

    /**
     * Gets flairName
     *
     * @return mixed
     */
    public function getFlairName()
    {
        return $this->container['flairName'];
    }

    /**
     * Sets flairName
     *
     * @param mixed $flairName flairName
     *
     * @return self
     */
    public function setFlairName($flairName)
    {
        $this->container['flairName'] = $flairName;

        return $this;
    }

    /**
     * Gets flairUrl
     *
     * @return mixed
     */
    public function getFlairUrl()
    {
        return $this->container['flairUrl'];
    }

    /**
     * Sets flairUrl
     *
     * @param mixed $flairUrl flairUrl
     *
     * @return self
     */
    public function setFlairUrl($flairUrl)
    {
        $this->container['flairUrl'] = $flairUrl;

        return $this;
    }

    /**
     * Gets flairBgColor
     *
     * @return mixed
     */
    public function getFlairBgColor()
    {
        return $this->container['flairBgColor'];
    }

    /**
     * Sets flairBgColor
     *
     * @param mixed $flairBgColor flairBgColor
     *
     * @return self
     */
    public function setFlairBgColor($flairBgColor)
    {
        $this->container['flairBgColor'] = $flairBgColor;

        return $this;
    }

    /**
     * Gets flairColor
     *
     * @return mixed
     */
    public function getFlairColor()
    {
        return $this->container['flairColor'];
    }

    /**
     * Sets flairColor
     *
     * @param mixed $flairColor flairColor
     *
     * @return self
     */
    public function setFlairColor($flairColor)
    {
        $this->container['flairColor'] = $flairColor;

        return $this;
    }

    /**
     * Gets featuredTopic
     *
     * @return mixed
     */
    public function getFeaturedTopic()
    {
        return $this->container['featuredTopic'];
    }

    /**
     * Sets featuredTopic
     *
     * @param mixed $featuredTopic featuredTopic
     *
     * @return self
     */
    public function setFeaturedTopic($featuredTopic)
    {
        $this->container['featuredTopic'] = $featuredTopic;

        return $this;
    }

    /**
     * Gets staged
     *
     * @return bool
     */
    public function getStaged()
    {
        return $this->container['staged'];
    }

    /**
     * Sets staged
     *
     * @param bool $staged staged
     *
     * @return self
     */
    public function setStaged($staged)
    {
        $this->container['staged'] = $staged;

        return $this;
    }

    /**
     * Gets canEdit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['canEdit'];
    }

    /**
     * Sets canEdit
     *
     * @param bool $canEdit canEdit
     *
     * @return self
     */
    public function setCanEdit($canEdit)
    {
        $this->container['canEdit'] = $canEdit;

        return $this;
    }

    /**
     * Gets canEditUsername
     *
     * @return bool
     */
    public function getCanEditUsername()
    {
        return $this->container['canEditUsername'];
    }

    /**
     * Sets canEditUsername
     *
     * @param bool $canEditUsername canEditUsername
     *
     * @return self
     */
    public function setCanEditUsername($canEditUsername)
    {
        $this->container['canEditUsername'] = $canEditUsername;

        return $this;
    }

    /**
     * Gets canEditEmail
     *
     * @return bool
     */
    public function getCanEditEmail()
    {
        return $this->container['canEditEmail'];
    }

    /**
     * Sets canEditEmail
     *
     * @param bool $canEditEmail canEditEmail
     *
     * @return self
     */
    public function setCanEditEmail($canEditEmail)
    {
        $this->container['canEditEmail'] = $canEditEmail;

        return $this;
    }

    /**
     * Gets canEditName
     *
     * @return bool
     */
    public function getCanEditName()
    {
        return $this->container['canEditName'];
    }

    /**
     * Sets canEditName
     *
     * @param bool $canEditName canEditName
     *
     * @return self
     */
    public function setCanEditName($canEditName)
    {
        $this->container['canEditName'] = $canEditName;

        return $this;
    }

    /**
     * Gets uploadedAvatarId
     *
     * @return mixed
     */
    public function getUploadedAvatarId()
    {
        return $this->container['uploadedAvatarId'];
    }

    /**
     * Sets uploadedAvatarId
     *
     * @param mixed $uploadedAvatarId uploadedAvatarId
     *
     * @return self
     */
    public function setUploadedAvatarId($uploadedAvatarId)
    {
        $this->container['uploadedAvatarId'] = $uploadedAvatarId;

        return $this;
    }

    /**
     * Gets hasTitleBadges
     *
     * @return bool
     */
    public function getHasTitleBadges()
    {
        return $this->container['hasTitleBadges'];
    }

    /**
     * Sets hasTitleBadges
     *
     * @param bool $hasTitleBadges hasTitleBadges
     *
     * @return self
     */
    public function setHasTitleBadges($hasTitleBadges)
    {
        $this->container['hasTitleBadges'] = $hasTitleBadges;

        return $this;
    }

    /**
     * Gets pendingCount
     *
     * @return int
     */
    public function getPendingCount()
    {
        return $this->container['pendingCount'];
    }

    /**
     * Sets pendingCount
     *
     * @param int $pendingCount pendingCount
     *
     * @return self
     */
    public function setPendingCount($pendingCount)
    {
        $this->container['pendingCount'] = $pendingCount;

        return $this;
    }

    /**
     * Gets profileViewCount
     *
     * @return int
     */
    public function getProfileViewCount()
    {
        return $this->container['profileViewCount'];
    }

    /**
     * Sets profileViewCount
     *
     * @param int $profileViewCount profileViewCount
     *
     * @return self
     */
    public function setProfileViewCount($profileViewCount)
    {
        $this->container['profileViewCount'] = $profileViewCount;

        return $this;
    }

    /**
     * Gets secondFactorEnabled
     *
     * @return bool
     */
    public function getSecondFactorEnabled()
    {
        return $this->container['secondFactorEnabled'];
    }

    /**
     * Sets secondFactorEnabled
     *
     * @param bool $secondFactorEnabled secondFactorEnabled
     *
     * @return self
     */
    public function setSecondFactorEnabled($secondFactorEnabled)
    {
        $this->container['secondFactorEnabled'] = $secondFactorEnabled;

        return $this;
    }

    /**
     * Gets canUploadProfileHeader
     *
     * @return bool
     */
    public function getCanUploadProfileHeader()
    {
        return $this->container['canUploadProfileHeader'];
    }

    /**
     * Sets canUploadProfileHeader
     *
     * @param bool $canUploadProfileHeader canUploadProfileHeader
     *
     * @return self
     */
    public function setCanUploadProfileHeader($canUploadProfileHeader)
    {
        $this->container['canUploadProfileHeader'] = $canUploadProfileHeader;

        return $this;
    }

    /**
     * Gets canUploadUserCardBackground
     *
     * @return bool
     */
    public function getCanUploadUserCardBackground()
    {
        return $this->container['canUploadUserCardBackground'];
    }

    /**
     * Sets canUploadUserCardBackground
     *
     * @param bool $canUploadUserCardBackground canUploadUserCardBackground
     *
     * @return self
     */
    public function setCanUploadUserCardBackground($canUploadUserCardBackground)
    {
        $this->container['canUploadUserCardBackground'] = $canUploadUserCardBackground;

        return $this;
    }

    /**
     * Gets postCount
     *
     * @return int
     */
    public function getPostCount()
    {
        return $this->container['postCount'];
    }

    /**
     * Sets postCount
     *
     * @param int $postCount postCount
     *
     * @return self
     */
    public function setPostCount($postCount)
    {
        $this->container['postCount'] = $postCount;

        return $this;
    }

    /**
     * Gets canBeDeleted
     *
     * @return bool
     */
    public function getCanBeDeleted()
    {
        return $this->container['canBeDeleted'];
    }

    /**
     * Sets canBeDeleted
     *
     * @param bool $canBeDeleted canBeDeleted
     *
     * @return self
     */
    public function setCanBeDeleted($canBeDeleted)
    {
        $this->container['canBeDeleted'] = $canBeDeleted;

        return $this;
    }

    /**
     * Gets canDeleteAllPosts
     *
     * @return bool
     */
    public function getCanDeleteAllPosts()
    {
        return $this->container['canDeleteAllPosts'];
    }

    /**
     * Sets canDeleteAllPosts
     *
     * @param bool $canDeleteAllPosts canDeleteAllPosts
     *
     * @return self
     */
    public function setCanDeleteAllPosts($canDeleteAllPosts)
    {
        $this->container['canDeleteAllPosts'] = $canDeleteAllPosts;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return mixed
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param mixed $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets mutedCategoryIds
     *
     * @return array
     */
    public function getMutedCategoryIds()
    {
        return $this->container['mutedCategoryIds'];
    }

    /**
     * Sets mutedCategoryIds
     *
     * @param array $mutedCategoryIds mutedCategoryIds
     *
     * @return self
     */
    public function setMutedCategoryIds($mutedCategoryIds)
    {
        $this->container['mutedCategoryIds'] = $mutedCategoryIds;

        return $this;
    }

    /**
     * Gets regularCategoryIds
     *
     * @return array
     */
    public function getRegularCategoryIds()
    {
        return $this->container['regularCategoryIds'];
    }

    /**
     * Sets regularCategoryIds
     *
     * @param array $regularCategoryIds regularCategoryIds
     *
     * @return self
     */
    public function setRegularCategoryIds($regularCategoryIds)
    {
        $this->container['regularCategoryIds'] = $regularCategoryIds;

        return $this;
    }

    /**
     * Gets watchedTags
     *
     * @return array
     */
    public function getWatchedTags()
    {
        return $this->container['watchedTags'];
    }

    /**
     * Sets watchedTags
     *
     * @param array $watchedTags watchedTags
     *
     * @return self
     */
    public function setWatchedTags($watchedTags)
    {
        $this->container['watchedTags'] = $watchedTags;

        return $this;
    }

    /**
     * Gets watchingFirstPostTags
     *
     * @return array
     */
    public function getWatchingFirstPostTags()
    {
        return $this->container['watchingFirstPostTags'];
    }

    /**
     * Sets watchingFirstPostTags
     *
     * @param array $watchingFirstPostTags watchingFirstPostTags
     *
     * @return self
     */
    public function setWatchingFirstPostTags($watchingFirstPostTags)
    {
        $this->container['watchingFirstPostTags'] = $watchingFirstPostTags;

        return $this;
    }

    /**
     * Gets trackedTags
     *
     * @return array
     */
    public function getTrackedTags()
    {
        return $this->container['trackedTags'];
    }

    /**
     * Sets trackedTags
     *
     * @param array $trackedTags trackedTags
     *
     * @return self
     */
    public function setTrackedTags($trackedTags)
    {
        $this->container['trackedTags'] = $trackedTags;

        return $this;
    }

    /**
     * Gets mutedTags
     *
     * @return array
     */
    public function getMutedTags()
    {
        return $this->container['mutedTags'];
    }

    /**
     * Sets mutedTags
     *
     * @param array $mutedTags mutedTags
     *
     * @return self
     */
    public function setMutedTags($mutedTags)
    {
        $this->container['mutedTags'] = $mutedTags;

        return $this;
    }

    /**
     * Gets trackedCategoryIds
     *
     * @return array
     */
    public function getTrackedCategoryIds()
    {
        return $this->container['trackedCategoryIds'];
    }

    /**
     * Sets trackedCategoryIds
     *
     * @param array $trackedCategoryIds trackedCategoryIds
     *
     * @return self
     */
    public function setTrackedCategoryIds($trackedCategoryIds)
    {
        $this->container['trackedCategoryIds'] = $trackedCategoryIds;

        return $this;
    }

    /**
     * Gets watchedCategoryIds
     *
     * @return array
     */
    public function getWatchedCategoryIds()
    {
        return $this->container['watchedCategoryIds'];
    }

    /**
     * Sets watchedCategoryIds
     *
     * @param array $watchedCategoryIds watchedCategoryIds
     *
     * @return self
     */
    public function setWatchedCategoryIds($watchedCategoryIds)
    {
        $this->container['watchedCategoryIds'] = $watchedCategoryIds;

        return $this;
    }

    /**
     * Gets watchedFirstPostCategoryIds
     *
     * @return array
     */
    public function getWatchedFirstPostCategoryIds()
    {
        return $this->container['watchedFirstPostCategoryIds'];
    }

    /**
     * Sets watchedFirstPostCategoryIds
     *
     * @param array $watchedFirstPostCategoryIds watchedFirstPostCategoryIds
     *
     * @return self
     */
    public function setWatchedFirstPostCategoryIds($watchedFirstPostCategoryIds)
    {
        $this->container['watchedFirstPostCategoryIds'] = $watchedFirstPostCategoryIds;

        return $this;
    }

    /**
     * Gets systemAvatarUploadId
     *
     * @return mixed
     */
    public function getSystemAvatarUploadId()
    {
        return $this->container['systemAvatarUploadId'];
    }

    /**
     * Sets systemAvatarUploadId
     *
     * @param mixed $systemAvatarUploadId systemAvatarUploadId
     *
     * @return self
     */
    public function setSystemAvatarUploadId($systemAvatarUploadId)
    {
        $this->container['systemAvatarUploadId'] = $systemAvatarUploadId;

        return $this;
    }

    /**
     * Gets systemAvatarTemplate
     *
     * @return string
     */
    public function getSystemAvatarTemplate()
    {
        return $this->container['systemAvatarTemplate'];
    }

    /**
     * Sets systemAvatarTemplate
     *
     * @param string $systemAvatarTemplate systemAvatarTemplate
     *
     * @return self
     */
    public function setSystemAvatarTemplate($systemAvatarTemplate)
    {
        $this->container['systemAvatarTemplate'] = $systemAvatarTemplate;

        return $this;
    }

    /**
     * Gets mutedUsernames
     *
     * @return array
     */
    public function getMutedUsernames()
    {
        return $this->container['mutedUsernames'];
    }

    /**
     * Sets mutedUsernames
     *
     * @param array $mutedUsernames mutedUsernames
     *
     * @return self
     */
    public function setMutedUsernames($mutedUsernames)
    {
        $this->container['mutedUsernames'] = $mutedUsernames;

        return $this;
    }

    /**
     * Gets ignoredUsernames
     *
     * @return array
     */
    public function getIgnoredUsernames()
    {
        return $this->container['ignoredUsernames'];
    }

    /**
     * Sets ignoredUsernames
     *
     * @param array $ignoredUsernames ignoredUsernames
     *
     * @return self
     */
    public function setIgnoredUsernames($ignoredUsernames)
    {
        $this->container['ignoredUsernames'] = $ignoredUsernames;

        return $this;
    }

    /**
     * Gets allowedPmUsernames
     *
     * @return array
     */
    public function getAllowedPmUsernames()
    {
        return $this->container['allowedPmUsernames'];
    }

    /**
     * Sets allowedPmUsernames
     *
     * @param array $allowedPmUsernames allowedPmUsernames
     *
     * @return self
     */
    public function setAllowedPmUsernames($allowedPmUsernames)
    {
        $this->container['allowedPmUsernames'] = $allowedPmUsernames;

        return $this;
    }

    /**
     * Gets mailingListPostsPerDay
     *
     * @return int
     */
    public function getMailingListPostsPerDay()
    {
        return $this->container['mailingListPostsPerDay'];
    }

    /**
     * Sets mailingListPostsPerDay
     *
     * @param int $mailingListPostsPerDay mailingListPostsPerDay
     *
     * @return self
     */
    public function setMailingListPostsPerDay($mailingListPostsPerDay)
    {
        $this->container['mailingListPostsPerDay'] = $mailingListPostsPerDay;

        return $this;
    }

    /**
     * Gets canChangeBio
     *
     * @return bool
     */
    public function getCanChangeBio()
    {
        return $this->container['canChangeBio'];
    }

    /**
     * Sets canChangeBio
     *
     * @param bool $canChangeBio canChangeBio
     *
     * @return self
     */
    public function setCanChangeBio($canChangeBio)
    {
        $this->container['canChangeBio'] = $canChangeBio;

        return $this;
    }

    /**
     * Gets canChangeLocation
     *
     * @return bool
     */
    public function getCanChangeLocation()
    {
        return $this->container['canChangeLocation'];
    }

    /**
     * Sets canChangeLocation
     *
     * @param bool $canChangeLocation canChangeLocation
     *
     * @return self
     */
    public function setCanChangeLocation($canChangeLocation)
    {
        $this->container['canChangeLocation'] = $canChangeLocation;

        return $this;
    }

    /**
     * Gets canChangeWebsite
     *
     * @return bool
     */
    public function getCanChangeWebsite()
    {
        return $this->container['canChangeWebsite'];
    }

    /**
     * Sets canChangeWebsite
     *
     * @param bool $canChangeWebsite canChangeWebsite
     *
     * @return self
     */
    public function setCanChangeWebsite($canChangeWebsite)
    {
        $this->container['canChangeWebsite'] = $canChangeWebsite;

        return $this;
    }

    /**
     * Gets canChangeTrackingPreferences
     *
     * @return bool
     */
    public function getCanChangeTrackingPreferences()
    {
        return $this->container['canChangeTrackingPreferences'];
    }

    /**
     * Sets canChangeTrackingPreferences
     *
     * @param bool $canChangeTrackingPreferences canChangeTrackingPreferences
     *
     * @return self
     */
    public function setCanChangeTrackingPreferences($canChangeTrackingPreferences)
    {
        $this->container['canChangeTrackingPreferences'] = $canChangeTrackingPreferences;

        return $this;
    }

    /**
     * Gets userApiKeys
     *
     * @return mixed
     */
    public function getUserApiKeys()
    {
        return $this->container['userApiKeys'];
    }

    /**
     * Sets userApiKeys
     *
     * @param mixed $userApiKeys userApiKeys
     *
     * @return self
     */
    public function setUserApiKeys($userApiKeys)
    {
        $this->container['userApiKeys'] = $userApiKeys;

        return $this;
    }

    /**
     * Gets userAuthTokens
     *
     * @return array
     */
    public function getUserAuthTokens()
    {
        return $this->container['userAuthTokens'];
    }

    /**
     * Sets userAuthTokens
     *
     * @param array $userAuthTokens userAuthTokens
     *
     * @return self
     */
    public function setUserAuthTokens($userAuthTokens)
    {
        $this->container['userAuthTokens'] = $userAuthTokens;

        return $this;
    }

    /**
     * Gets userNotificationSchedule
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserNotificationSchedule
     */
    public function getUserNotificationSchedule()
    {
        return $this->container['userNotificationSchedule'];
    }

    /**
     * Sets userNotificationSchedule
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserNotificationSchedule $userNotificationSchedule userNotificationSchedule
     *
     * @return self
     */
    public function setUserNotificationSchedule($userNotificationSchedule)
    {
        $this->container['userNotificationSchedule'] = $userNotificationSchedule;

        return $this;
    }

    /**
     * Gets useLogoSmallAsAvatar
     *
     * @return bool
     */
    public function getUseLogoSmallAsAvatar()
    {
        return $this->container['useLogoSmallAsAvatar'];
    }

    /**
     * Sets useLogoSmallAsAvatar
     *
     * @param bool $useLogoSmallAsAvatar useLogoSmallAsAvatar
     *
     * @return self
     */
    public function setUseLogoSmallAsAvatar($useLogoSmallAsAvatar)
    {
        $this->container['useLogoSmallAsAvatar'] = $useLogoSmallAsAvatar;

        return $this;
    }

    /**
     * Gets featuredUserBadgeIds
     *
     * @return array
     */
    public function getFeaturedUserBadgeIds()
    {
        return $this->container['featuredUserBadgeIds'];
    }

    /**
     * Sets featuredUserBadgeIds
     *
     * @param array $featuredUserBadgeIds featuredUserBadgeIds
     *
     * @return self
     */
    public function setFeaturedUserBadgeIds($featuredUserBadgeIds)
    {
        $this->container['featuredUserBadgeIds'] = $featuredUserBadgeIds;

        return $this;
    }

    /**
     * Gets invitedBy
     *
     * @return mixed
     */
    public function getInvitedBy()
    {
        return $this->container['invitedBy'];
    }

    /**
     * Sets invitedBy
     *
     * @param mixed $invitedBy invitedBy
     *
     * @return self
     */
    public function setInvitedBy($invitedBy)
    {
        $this->container['invitedBy'] = $invitedBy;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return array
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param array $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets groupUsers
     *
     * @return array
     */
    public function getGroupUsers()
    {
        return $this->container['groupUsers'];
    }

    /**
     * Sets groupUsers
     *
     * @param array $groupUsers groupUsers
     *
     * @return self
     */
    public function setGroupUsers($groupUsers)
    {
        $this->container['groupUsers'] = $groupUsers;

        return $this;
    }

    /**
     * Gets userOption
     *
     * @return \InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserOption
     */
    public function getUserOption()
    {
        return $this->container['userOption'];
    }

    /**
     * Sets userOption
     *
     * @param \InfinityFree\DiscourseApi\Model\InlineResponse20045UserUserOption $userOption userOption
     *
     * @return self
     */
    public function setUserOption($userOption)
    {
        $this->container['userOption'] = $userOption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


